[
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "authentication_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "RefreshToken",
        "importPath": "rest_framework_simplejwt.tokens",
        "description": "rest_framework_simplejwt.tokens",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.tokens",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "exceptions",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "TokenObtainPairView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenRefreshView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "TokenVerifyView",
        "importPath": "rest_framework_simplejwt.views",
        "description": "rest_framework_simplejwt.views",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.views",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "PKCS1_OAEP",
        "importPath": "Crypto.Cipher",
        "description": "Crypto.Cipher",
        "isExtraImport": true,
        "detail": "Crypto.Cipher",
        "documentation": {}
    },
    {
        "label": "RSA",
        "importPath": "Crypto.PublicKey",
        "description": "Crypto.PublicKey",
        "isExtraImport": true,
        "detail": "Crypto.PublicKey",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "rsa",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "rsa",
        "description": "rsa",
        "detail": "rsa",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "management",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "csrf_exempt",
        "importPath": "django.views.decorators.csrf",
        "description": "django.views.decorators.csrf",
        "isExtraImport": true,
        "detail": "django.views.decorators.csrf",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "JWTAuthentication",
        "importPath": "rest_framework_simplejwt.authentication",
        "description": "rest_framework_simplejwt.authentication",
        "isExtraImport": true,
        "detail": "rest_framework_simplejwt.authentication",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "importPath": "flashSaleProduct.models",
        "description": "flashSaleProduct.models",
        "isExtraImport": true,
        "detail": "flashSaleProduct.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Price",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Photo_product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Price",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Photo_product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Heart",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Category",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "Heart",
        "importPath": "product.models",
        "description": "product.models",
        "isExtraImport": true,
        "detail": "product.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "CSRFCheck",
        "importPath": "rest_framework.authentication",
        "description": "rest_framework.authentication",
        "isExtraImport": true,
        "detail": "rest_framework.authentication",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ListSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "SerializerMethodField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ListSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "UUIDField",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "ModelSerializer",
        "importPath": "rest_framework.serializers",
        "description": "rest_framework.serializers",
        "isExtraImport": true,
        "detail": "rest_framework.serializers",
        "documentation": {}
    },
    {
        "label": "make_password",
        "importPath": "django.contrib.auth.hashers",
        "description": "django.contrib.auth.hashers",
        "isExtraImport": true,
        "detail": "django.contrib.auth.hashers",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "get_token",
        "importPath": "django.middleware.csrf",
        "description": "django.middleware.csrf",
        "isExtraImport": true,
        "detail": "django.middleware.csrf",
        "documentation": {}
    },
    {
        "label": "csrf",
        "importPath": "django.middleware",
        "description": "django.middleware",
        "isExtraImport": true,
        "detail": "django.middleware",
        "documentation": {}
    },
    {
        "label": "decrypt_tokens",
        "importPath": "decryptRSA.encryptRSA",
        "description": "decryptRSA.encryptRSA",
        "isExtraImport": true,
        "detail": "decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "DeviceClient",
        "importPath": "decryptRSA.models",
        "description": "decryptRSA.models",
        "isExtraImport": true,
        "detail": "decryptRSA.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth.validators",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth.validators",
        "description": "django.contrib.auth.validators",
        "detail": "django.contrib.auth.validators",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "New",
        "importPath": "new.models",
        "description": "new.models",
        "isExtraImport": true,
        "detail": "new.models",
        "documentation": {}
    },
    {
        "label": "Photo_new",
        "importPath": "new.models",
        "description": "new.models",
        "isExtraImport": true,
        "detail": "new.models",
        "documentation": {}
    },
    {
        "label": "New",
        "importPath": "new.models",
        "description": "new.models",
        "isExtraImport": true,
        "detail": "new.models",
        "documentation": {}
    },
    {
        "label": "Photo_new",
        "importPath": "new.models",
        "description": "new.models",
        "isExtraImport": true,
        "detail": "new.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "Transport",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "DetailOrder",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "Transport",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "DetailOrder",
        "importPath": "order.models",
        "description": "order.models",
        "isExtraImport": true,
        "detail": "order.models",
        "documentation": {}
    },
    {
        "label": "url",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "Prefetch",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "mptt.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mptt.fields",
        "description": "mptt.fields",
        "detail": "mptt.fields",
        "documentation": {}
    },
    {
        "label": "MPTTModel",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "TreeForeignKey",
        "importPath": "mptt.models",
        "description": "mptt.models",
        "isExtraImport": true,
        "detail": "mptt.models",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "gyp.common",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.common",
        "description": "gyp.common",
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "GetEnvironFallback",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "GetEnvironFallback",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "GypError",
        "importPath": "gyp.common",
        "description": "gyp.common",
        "isExtraImport": true,
        "detail": "gyp.common",
        "documentation": {}
    },
    {
        "label": "posixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "posixpath",
        "description": "posixpath",
        "detail": "posixpath",
        "documentation": {}
    },
    {
        "label": "gyp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp",
        "description": "gyp",
        "detail": "gyp",
        "documentation": {}
    },
    {
        "label": "gyp.generator.make",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.make",
        "description": "gyp.generator.make",
        "detail": "gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "multiprocessing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "signal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "signal",
        "description": "signal",
        "detail": "signal",
        "documentation": {}
    },
    {
        "label": "gyp.xcode_emulation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcode_emulation",
        "description": "gyp.xcode_emulation",
        "detail": "gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "gyp.msvs_emulation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.msvs_emulation",
        "description": "gyp.msvs_emulation",
        "detail": "gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "xml.sax.saxutils",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "detail": "xml.sax.saxutils",
        "documentation": {}
    },
    {
        "label": "escape",
        "importPath": "xml.sax.saxutils",
        "description": "xml.sax.saxutils",
        "isExtraImport": true,
        "detail": "xml.sax.saxutils",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "shlex",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shlex",
        "description": "shlex",
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "xml.etree.cElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.cElementTree",
        "description": "xml.etree.cElementTree",
        "detail": "xml.etree.cElementTree",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "code",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "code",
        "description": "code",
        "detail": "code",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "ntpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ntpath",
        "description": "ntpath",
        "detail": "ntpath",
        "documentation": {}
    },
    {
        "label": "collections",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "collections",
        "description": "collections",
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "gyp.easy_xml",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.easy_xml",
        "description": "gyp.easy_xml",
        "detail": "gyp.easy_xml",
        "documentation": {}
    },
    {
        "label": "gyp.generator.ninja",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.ninja",
        "description": "gyp.generator.ninja",
        "detail": "gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSNew",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSNew",
        "description": "gyp.MSVSNew",
        "detail": "gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSProject",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSProject",
        "description": "gyp.MSVSProject",
        "detail": "gyp.MSVSProject",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSSettings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSSettings",
        "description": "gyp.MSVSSettings",
        "detail": "gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSToolFile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSToolFile",
        "description": "gyp.MSVSToolFile",
        "detail": "gyp.MSVSToolFile",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSUserFile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSUserFile",
        "description": "gyp.MSVSUserFile",
        "detail": "gyp.MSVSUserFile",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSUtil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSUtil",
        "description": "gyp.MSVSUtil",
        "detail": "gyp.MSVSUtil",
        "documentation": {}
    },
    {
        "label": "gyp.MSVSVersion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.MSVSVersion",
        "description": "gyp.MSVSVersion",
        "detail": "gyp.MSVSVersion",
        "documentation": {}
    },
    {
        "label": "gyp.generator.msvs",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.msvs",
        "description": "gyp.generator.msvs",
        "detail": "gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "copy",
        "description": "copy",
        "detail": "copy",
        "documentation": {}
    },
    {
        "label": "gyp.ninja_syntax",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.ninja_syntax",
        "description": "gyp.ninja_syntax",
        "detail": "gyp.ninja_syntax",
        "documentation": {}
    },
    {
        "label": "filecmp",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "filecmp",
        "description": "filecmp",
        "detail": "filecmp",
        "documentation": {}
    },
    {
        "label": "gyp.xcodeproj_file",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcodeproj_file",
        "description": "gyp.xcodeproj_file",
        "detail": "gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "gyp.xcode_ninja",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.xcode_ninja",
        "description": "gyp.xcode_ninja",
        "detail": "gyp.xcode_ninja",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "gyp.generator.xcode",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.generator.xcode",
        "description": "gyp.generator.xcode",
        "detail": "gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "attrgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "MutableSet",
        "importPath": "collections.abc",
        "description": "collections.abc",
        "isExtraImport": true,
        "detail": "collections.abc",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "reduce",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "cmp_to_key",
        "importPath": "functools",
        "description": "functools",
        "isExtraImport": true,
        "detail": "functools",
        "documentation": {}
    },
    {
        "label": "fcntl",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fcntl",
        "description": "fcntl",
        "detail": "fcntl",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "ast",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ast",
        "description": "ast",
        "detail": "ast",
        "documentation": {}
    },
    {
        "label": "gyp.simple_copy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.simple_copy",
        "description": "gyp.simple_copy",
        "detail": "gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "StrictVersion",
        "importPath": "distutils.version",
        "description": "distutils.version",
        "isExtraImport": true,
        "detail": "distutils.version",
        "documentation": {}
    },
    {
        "label": "gyp.input",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gyp.input",
        "description": "gyp.input",
        "detail": "gyp.input",
        "documentation": {}
    },
    {
        "label": "fnmatch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fnmatch",
        "description": "fnmatch",
        "detail": "fnmatch",
        "documentation": {}
    },
    {
        "label": "plistlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plistlib",
        "description": "plistlib",
        "detail": "plistlib",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "stat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "stat",
        "description": "stat",
        "detail": "stat",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "xml.dom.minidom",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "parse",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "Node",
        "importPath": "xml.dom.minidom",
        "description": "xml.dom.minidom",
        "isExtraImport": true,
        "detail": "xml.dom.minidom",
        "documentation": {}
    },
    {
        "label": "pretty_vcproj",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pretty_vcproj",
        "description": "pretty_vcproj",
        "detail": "pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "urllib2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib2",
        "description": "urllib2",
        "detail": "urllib2",
        "documentation": {}
    },
    {
        "label": "JwtConfig",
        "kind": 6,
        "importPath": "backend.JWT.apps",
        "description": "backend.JWT.apps",
        "peekOfCode": "class JwtConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'JWT'",
        "detail": "backend.JWT.apps",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.JWT.urls",
        "description": "backend.JWT.urls",
        "peekOfCode": "urlpatterns = [\n    path('token/refresh/', refreshTokenJWT, name = \"refresh_token_jwt\") # api refresh token access\n]",
        "detail": "backend.JWT.urls",
        "documentation": {}
    },
    {
        "label": "refreshTokenJWT",
        "kind": 2,
        "importPath": "backend.JWT.views",
        "description": "backend.JWT.views",
        "peekOfCode": "def refreshTokenJWT(request):\n    response = Response()\n    try:\n        # ----------------------------- check information ---------------------------- #\n        #decyption token jwt\n        jwtToken = request.COOKIES.get('refresh_token')\n        refresh_token = RefreshToken(jwtToken)\n        access_token = refresh_token.access_token\n        response.data = {\n            'access_token' : str(access_token) , ",
        "detail": "backend.JWT.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.asgi",
        "description": "backend.backend.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "backend.backend.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nload_dotenv(dotenv_path=os.path.join(BASE_DIR, '.env'))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure---z(_e613s_gyrf%n=zc#!6k9hr^5qm46n^0!-3cxr+7n#jk4l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = []\n# Application definition",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure---z(_e613s_gyrf%n=zc#!6k9hr^5qm46n^0!-3cxr+7n#jk4l'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEBUG = os.getenv('DEBUG')\nALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ALLOWED_HOSTS = []\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'product.apps.ProductConfig',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'product.apps.ProductConfig',\n    'decryptRSA.apps.DecryptrsaConfig',\n    'JWT.apps.JwtConfig',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'corsheaders.middleware.CorsMiddleware',\n    'login.middlewares.RequestRateMiddleWare'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "ROOT_URLCONF = 'backend.urls'\nCORS_ALLOW_CREDENTIALS = True\nCORS_EXPOSE_HEADERS = [\"Content-Type\", \"X-CSRFToken\"]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOW_CREDENTIALS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOW_CREDENTIALS = True\nCORS_EXPOSE_HEADERS = [\"Content-Type\", \"X-CSRFToken\"]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [\n    {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_EXPOSE_HEADERS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_EXPOSE_HEADERS = [\"Content-Type\", \"X-CSRFToken\"]\nCORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CORS_ALLOWED_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CORS_ALLOWED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nSESSION_COOKIE_SECURE = True\nSESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SECURE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SESSION_COOKIE_SECURE = True\nSESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SESSION_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SESSION_COOKIE_SAMESITE = \"None\"\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "WSGI_APPLICATION = 'backend.wsgi.application'\nAUTH_USER_MODEL = \"login.User\"\n# ------------------------------ REST FRAMEWORK ------------------------------ #\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'login.api.authenticate.CustomAuthentication',",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_USER_MODEL = \"login.User\"\n# ------------------------------ REST FRAMEWORK ------------------------------ #\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'login.api.authenticate.CustomAuthentication',\n    ),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.AllowAny',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework_simplejwt.authentication.JWTAuthentication',\n        'login.api.authenticate.CustomAuthentication',\n    ),\n}\n# -------------------------------- CONFIG JWT -------------------------------- #",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "SIMPLE_JWT",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "SIMPLE_JWT = {\n  'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),\n  'REFRESH_TOKEN_LIFETIME': timedelta(days=1),\n  'ROTATE_REFRESH_TOKENS': False,\n  'BLACKLIST_AFTER_ROTATION': True,\n  'UPDATE_LAST_LOGIN': False,\n  'ALGORITHM': 'HS256',\n  'SIGNING_KEY': SECRET_KEY,\n  'VERIFYING_KEY': None,\n  'AUDIENCE': None,",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SECURE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CSRF_COOKIE_SECURE = True\nCSRF_COOKIE_HTTP_ONLY = True\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nCSRF_COOKIE_SAMESITE = \"None\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_HTTP_ONLY",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CSRF_COOKIE_HTTP_ONLY = True\nCSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nCSRF_COOKIE_SAMESITE = \"None\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_TRUSTED_ORIGINS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CSRF_TRUSTED_ORIGINS = [\n    \"http://localhost:5173\",\n    'http://127.0.0.1:8080'\n]\nCSRF_COOKIE_SAMESITE = \"None\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE'),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_COOKIE_SAMESITE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "CSRF_COOKIE_SAMESITE = \"None\"\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE'),\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': os.getenv('DB_ENGINE'),\n        'NAME': os.getenv('DB_NAME'),\n        'USER': os.getenv('DB_USER'),\n        'PASSWORD': os.getenv('DB_PASSWORD'),\n        'HOST': os.getenv('DB_HOST'),\n        'PORT': os.getenv('DB_PORT'),\n    }\n}",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "LANGUAGE_CODE = os.getenv('LANGUAGE_CODE')\nTIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = os.getenv('USE_I18N')\nUSE_TZ = os.getenv('USE_TZ')\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "TIME_ZONE = os.getenv('TIME_ZONE')\nUSE_I18N = os.getenv('USE_I18N')\nUSE_TZ = os.getenv('USE_TZ')\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_I18N = os.getenv('USE_I18N')\nUSE_TZ = os.getenv('USE_TZ')\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "USE_TZ = os.getenv('USE_TZ')\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "backend.backend.settings",
        "description": "backend.backend.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "backend.backend.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.backend.urls",
        "description": "backend.backend.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/',include('product.api.urls')),\n    path('api/',include('login.api.urls')),\n    path('api/',include('user.api.urls')),\n    path('api/',include('new.api.urls')),\n    path('api/',include('order.api.urls')),\n    path('api/',include('flashSaleProduct.api.urls')),\n    path('api/', include('JWT.urls')),\n    path('api/', TokenRefreshView.as_view(), name='token_refresh'),",
        "detail": "backend.backend.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "backend.backend.wsgi",
        "description": "backend.backend.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "backend.backend.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0001_initial",
        "description": "backend.decryptRSA.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='DeviceClient',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('private_key', models.CharField(max_length=1024)),",
        "detail": "backend.decryptRSA.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0002_alter_deviceclient_expired",
        "description": "backend.decryptRSA.migrations.0002_alter_deviceclient_expired",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='deviceclient',\n            name='expired',\n            field=models.IntegerField(),\n        ),",
        "detail": "backend.decryptRSA.migrations.0002_alter_deviceclient_expired",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0003_auto_20230313_1503",
        "description": "backend.decryptRSA.migrations.0003_auto_20230313_1503",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0002_alter_deviceclient_expired'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='deviceclient',\n            name='public_key',\n        ),\n        migrations.AlterField(",
        "detail": "backend.decryptRSA.migrations.0003_auto_20230313_1503",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0004_deviceclient_public_key",
        "description": "backend.decryptRSA.migrations.0004_deviceclient_public_key",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0003_auto_20230313_1503'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='deviceclient',\n            name='public_key',\n            field=models.TextField(default=django.utils.timezone.now),\n            preserve_default=False,",
        "detail": "backend.decryptRSA.migrations.0004_deviceclient_public_key",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0005_auto_20230314_0620",
        "description": "backend.decryptRSA.migrations.0005_auto_20230314_0620",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0004_deviceclient_public_key'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='deviceclient',\n            name='private_key',\n            field=models.TextField(null=True),\n        ),",
        "detail": "backend.decryptRSA.migrations.0005_auto_20230314_0620",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0006_deviceclient_date_activate",
        "description": "backend.decryptRSA.migrations.0006_deviceclient_date_activate",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0005_auto_20230314_0620'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='deviceclient',\n            name='date_activate',\n            field=models.DateTimeField(null=True),\n        ),",
        "detail": "backend.decryptRSA.migrations.0006_deviceclient_date_activate",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0007_alter_deviceclient_private_key",
        "description": "backend.decryptRSA.migrations.0007_alter_deviceclient_private_key",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0006_deviceclient_date_activate'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='deviceclient',\n            name='private_key',\n            field=models.CharField(max_length=200, null=True),\n        ),",
        "detail": "backend.decryptRSA.migrations.0007_alter_deviceclient_private_key",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0008_deviceclient_name_private_key",
        "description": "backend.decryptRSA.migrations.0008_deviceclient_name_private_key",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0007_alter_deviceclient_private_key'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='deviceclient',\n            name='name_private_key',\n            field=models.TextField(null=True),\n        ),",
        "detail": "backend.decryptRSA.migrations.0008_deviceclient_name_private_key",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.decryptRSA.migrations.0009_auto_20230315_1424",
        "description": "backend.decryptRSA.migrations.0009_auto_20230315_1424",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('decryptRSA', '0008_deviceclient_name_private_key'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='deviceclient',\n            name='name_private_key',\n        ),\n        migrations.AlterField(",
        "detail": "backend.decryptRSA.migrations.0009_auto_20230315_1424",
        "documentation": {}
    },
    {
        "label": "DecryptrsaConfig",
        "kind": 6,
        "importPath": "backend.decryptRSA.apps",
        "description": "backend.decryptRSA.apps",
        "peekOfCode": "class DecryptrsaConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'decryptRSA'",
        "detail": "backend.decryptRSA.apps",
        "documentation": {}
    },
    {
        "label": "generateKey",
        "kind": 2,
        "importPath": "backend.decryptRSA.encryptRSA",
        "description": "backend.decryptRSA.encryptRSA",
        "peekOfCode": "def generateKey(device_id):\n    public_key , private_key = rsa.newkeys(1024)\n    namePrivateKeyFile = \"KEYPRIVATE-\"+str(device_id)+'.pem'\n    with open(path_save_private_key+namePrivateKeyFile,\"wb\") as f:\n        f.write(private_key.save_pkcs1('PEM'))\n    namePublicKeyFile = \"KEYPUBLIC-\"+str(device_id)+'.pem'\n    with open(path_save_public_key+namePublicKeyFile,\"wb\") as f:\n        f.write(public_key.save_pkcs1('PEM'))\n    return {\n        'name_private_key' : namePrivateKeyFile,",
        "detail": "backend.decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "decrypt_tokens",
        "kind": 2,
        "importPath": "backend.decryptRSA.encryptRSA",
        "description": "backend.decryptRSA.encryptRSA",
        "peekOfCode": "def decrypt_tokens(encrypted_data, nameFile):\n    decode_data = base64.b64decode(encrypted_data)\n    with open(\n        path_save_private_key\n        + nameFile.replace(\"(\",'').replace(\")\",'').replace(\",\" , \"\").replace(\"'\",\"\"), \n        'rb'\n    ) as f:\n        private_key = RSA.importKey(f.read())\n    cipher = PKCS1_OAEP.new(private_key)\n    decrypted_data = cipher.decrypt(decode_data)",
        "detail": "backend.decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "getPublicKey",
        "kind": 2,
        "importPath": "backend.decryptRSA.encryptRSA",
        "description": "backend.decryptRSA.encryptRSA",
        "peekOfCode": "def getPublicKey(namePublicKeyFile):\n    with open(path_save_public_key+namePublicKeyFile,\"rb\") as f:\n        return f.read().decode('utf-8')",
        "detail": "backend.decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "path_save_private_key",
        "kind": 5,
        "importPath": "backend.decryptRSA.encryptRSA",
        "description": "backend.decryptRSA.encryptRSA",
        "peekOfCode": "path_save_private_key = str(settings.BASE_DIR)+\"/decryptRSA/key/private_key/\"\npath_save_public_key = str(settings.BASE_DIR)+\"/decryptRSA/key/public_key/\"\n# ---------------------------------------------------------------------------- #\n#                   METHOD CREATE PUBLIC_KEY AND PRIVATE_KEY                   #\n# ---------------------------------------------------------------------------- #\ndef generateKey(device_id):\n    public_key , private_key = rsa.newkeys(1024)\n    namePrivateKeyFile = \"KEYPRIVATE-\"+str(device_id)+'.pem'\n    with open(path_save_private_key+namePrivateKeyFile,\"wb\") as f:\n        f.write(private_key.save_pkcs1('PEM'))",
        "detail": "backend.decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "path_save_public_key",
        "kind": 5,
        "importPath": "backend.decryptRSA.encryptRSA",
        "description": "backend.decryptRSA.encryptRSA",
        "peekOfCode": "path_save_public_key = str(settings.BASE_DIR)+\"/decryptRSA/key/public_key/\"\n# ---------------------------------------------------------------------------- #\n#                   METHOD CREATE PUBLIC_KEY AND PRIVATE_KEY                   #\n# ---------------------------------------------------------------------------- #\ndef generateKey(device_id):\n    public_key , private_key = rsa.newkeys(1024)\n    namePrivateKeyFile = \"KEYPRIVATE-\"+str(device_id)+'.pem'\n    with open(path_save_private_key+namePrivateKeyFile,\"wb\") as f:\n        f.write(private_key.save_pkcs1('PEM'))\n    namePublicKeyFile = \"KEYPUBLIC-\"+str(device_id)+'.pem'",
        "detail": "backend.decryptRSA.encryptRSA",
        "documentation": {}
    },
    {
        "label": "DeviceClient",
        "kind": 6,
        "importPath": "backend.decryptRSA.models",
        "description": "backend.decryptRSA.models",
        "peekOfCode": "class DeviceClient(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    private_key = models.CharField(max_length=200 , null = True)\n    public_key = models.CharField(max_length=200 , null = True)\n    created=models.DateTimeField()\n    date_activate = models.DateTimeField(null = True)\n    expired = models.IntegerField()\n    def __str__(self):\n        return str(self.id)",
        "detail": "backend.decryptRSA.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.decryptRSA.urls",
        "description": "backend.decryptRSA.urls",
        "peekOfCode": "urlpatterns = [\n    path('token-decryt-rsa/', get_public_key_rsa, name = \"token_decryt_rsa\"), #get public key and check public key \n]",
        "detail": "backend.decryptRSA.urls",
        "documentation": {}
    },
    {
        "label": "get_public_key_rsa",
        "kind": 2,
        "importPath": "backend.decryptRSA.views",
        "description": "backend.decryptRSA.views",
        "peekOfCode": "def get_public_key_rsa(request):\n    try:\n        # ---------------------------- check params input ---------------------------- #\n        data_request= json.loads(request.body.decode('utf-8'))\n        ip_address = request.META.get('REMOTE_ADDR')\n        print(ip_address)\n        response = Response()\n        deviceId = data_request['params']['device_id']\n    except:\n        response.data = { ",
        "detail": "backend.decryptRSA.views",
        "documentation": {}
    },
    {
        "label": "handleRawQueryVoucher",
        "kind": 2,
        "importPath": "backend.flashSaleProduct.api.data_processing",
        "description": "backend.flashSaleProduct.api.data_processing",
        "peekOfCode": "def handleRawQueryVoucher(queryset):\n    voucher_dict = dict()\n    for i in queryset:\n        if i.id not in voucher_dict:\n            voucher_dict[i.id] = {\n                \"voucher\" :{\n                    'id' : i.id ,\n                    'detail' : i.detail,\n                    'sale' : i.sale,\n                    'description' : i.description,",
        "detail": "backend.flashSaleProduct.api.data_processing",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_VOUCHER_FOR_USER",
        "kind": 5,
        "importPath": "backend.flashSaleProduct.api.query_raw",
        "description": "backend.flashSaleProduct.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_VOUCHER_FOR_USER = \"\"\"\n    SELECT \n        `flashSaleProduct_voucher`.`id` as 'id' , \n        `flashSaleProduct_voucher`.`name` as 'name', \n        `flashSaleProduct_voucher`.`detail` as 'detail', \n        `flashSaleProduct_voucher`.`sale` as 'sale',\n        `flashSaleProduct_voucher`.`description` as 'description',\n        `flashSaleProduct_voucher`.`quantity` as 'quantity',\n        `product_product`.`slug` as 'product_slug_in_voucher',\n        `flashSaleProduct_voucher`.`limited_price`",
        "detail": "backend.flashSaleProduct.api.query_raw",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_VOUCHER_FOR_PRODUCT",
        "kind": 5,
        "importPath": "backend.flashSaleProduct.api.query_raw",
        "description": "backend.flashSaleProduct.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_VOUCHER_FOR_PRODUCT = \"\"\"\n    SELECT \n        `flashSaleProduct_voucher`.`id` as 'id' , \n        `flashSaleProduct_voucher`.`name` as 'name', \n        `flashSaleProduct_voucher`.`detail` as 'detail', \n        `flashSaleProduct_voucher`.`sale` as 'sale',\n        `flashSaleProduct_voucher`.`description` as 'description',\n        `flashSaleProduct_voucher`.`quantity` as 'quantity',\n        `product_product`.`slug` as 'product_slug_in_voucher',\n        `flashSaleProduct_voucher`.`limited_price`",
        "detail": "backend.flashSaleProduct.api.query_raw",
        "documentation": {}
    },
    {
        "label": "VoucherSerializer",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.api.serializers",
        "description": "backend.flashSaleProduct.api.serializers",
        "peekOfCode": "class VoucherSerializer(serializers.Serializer):\n    id = serializers.UUIDField()\n    detail = serializers.CharField()\n    sale = serializers.FloatField()\n    description = serializers.CharField()\n    limited_price = serializers.IntegerField()\n    quantity = serializers.IntegerField()\nclass ProductInVoucher(serializers.Serializer):\n    product_slug_in_voucher = serializers.CharField()\nclass VoucherHandleRawSQL(serializers.Serializer):",
        "detail": "backend.flashSaleProduct.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProductInVoucher",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.api.serializers",
        "description": "backend.flashSaleProduct.api.serializers",
        "peekOfCode": "class ProductInVoucher(serializers.Serializer):\n    product_slug_in_voucher = serializers.CharField()\nclass VoucherHandleRawSQL(serializers.Serializer):\n    voucher = VoucherSerializer()\n    product_in_vouchers = ProductInVoucher(many = True)",
        "detail": "backend.flashSaleProduct.api.serializers",
        "documentation": {}
    },
    {
        "label": "VoucherHandleRawSQL",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.api.serializers",
        "description": "backend.flashSaleProduct.api.serializers",
        "peekOfCode": "class VoucherHandleRawSQL(serializers.Serializer):\n    voucher = VoucherSerializer()\n    product_in_vouchers = ProductInVoucher(many = True)",
        "detail": "backend.flashSaleProduct.api.serializers",
        "documentation": {}
    },
    {
        "label": "get_order",
        "kind": 5,
        "importPath": "backend.flashSaleProduct.api.urls",
        "description": "backend.flashSaleProduct.api.urls",
        "peekOfCode": "get_order = VoucherViewSet.as_view({\n    'get' : 'get_voucher',\n})\nurlpatterns = [\n    path('voucher/',get_order , name = \"order_cart\"),\n]",
        "detail": "backend.flashSaleProduct.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.flashSaleProduct.api.urls",
        "description": "backend.flashSaleProduct.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('voucher/',get_order , name = \"order_cart\"),\n]",
        "detail": "backend.flashSaleProduct.api.urls",
        "documentation": {}
    },
    {
        "label": "VoucherViewSe",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.api.views",
        "description": "backend.flashSaleProduct.api.views",
        "peekOfCode": "class VoucherViewSet (viewsets.ViewSet):\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    # ---------------------------------------------------------------------------- #\n    #                          METHOD GET VOUCHER FOR USER                         #\n    # ---------------------------------------------------------------------------- #\n    @action(method=['GET'],detail=False, url_path=\"get_voucher\",url_name=\"get_voucher\")\n    def get_voucher(self, request,*args, **kwargs):\n        try:\n            # ---------------------------- check params input ---------------------------- #",
        "detail": "backend.flashSaleProduct.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0001_initial",
        "description": "backend.flashSaleProduct.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('product', '0003_heart'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='FlashSale',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "backend.flashSaleProduct.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0002_detailvoucher_voucher",
        "description": "backend.flashSaleProduct.migrations.0002_detailvoucher_voucher",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('product', '0003_heart'),\n        ('flashSaleProduct', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Voucher',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "backend.flashSaleProduct.migrations.0002_detailvoucher_voucher",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0003_detailvoucher_voucher_id",
        "description": "backend.flashSaleProduct.migrations.0003_detailvoucher_voucher_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('flashSaleProduct', '0002_detailvoucher_voucher'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='detailvoucher',\n            name='voucher_id',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='detail_voucher', to='flashSaleProduct.voucher'),\n        ),",
        "detail": "backend.flashSaleProduct.migrations.0003_detailvoucher_voucher_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0004_alter_detailvoucher_voucher_id",
        "description": "backend.flashSaleProduct.migrations.0004_alter_detailvoucher_voucher_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('flashSaleProduct', '0003_detailvoucher_voucher_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='detailvoucher',\n            name='voucher_id',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='detail_vouchers', to='flashSaleProduct.voucher'),\n        ),",
        "detail": "backend.flashSaleProduct.migrations.0004_alter_detailvoucher_voucher_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0005_voucher_level",
        "description": "backend.flashSaleProduct.migrations.0005_voucher_level",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('flashSaleProduct', '0004_alter_detailvoucher_voucher_id'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='voucher',\n            name='level',\n            field=models.IntegerField(default=1),\n            preserve_default=False,",
        "detail": "backend.flashSaleProduct.migrations.0005_voucher_level",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.migrations.0006_voucher_limited_price",
        "description": "backend.flashSaleProduct.migrations.0006_voucher_limited_price",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('flashSaleProduct', '0005_voucher_level'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='voucher',\n            name='limited_price',\n            field=models.IntegerField(default=20),\n            preserve_default=False,",
        "detail": "backend.flashSaleProduct.migrations.0006_voucher_limited_price",
        "documentation": {}
    },
    {
        "label": "FlashSaleAdmin",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.admin",
        "description": "backend.flashSaleProduct.admin",
        "peekOfCode": "class FlashSaleAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'name' , 'note')\nadmin.site.register(FlashSale,FlashSaleAdmin)\nclass DetailFlashSaleAdmin(admin.ModelAdmin):\n    list_display = ('flash_sale_id' , 'product_id' , 'datetime_created' , 'datetime_finished' , 'status' )\nadmin.site.register(DetailFlashSale,DetailFlashSaleAdmin)\nclass VoucherAdmin(admin.ModelAdmin):\n    list_display = ('id','detail' , 'sale' ,'description' , 'quantity')\nadmin.site.register(Voucher,VoucherAdmin)\nclass DetailVoucherAdmin(admin.ModelAdmin):",
        "detail": "backend.flashSaleProduct.admin",
        "documentation": {}
    },
    {
        "label": "DetailFlashSaleAdmin",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.admin",
        "description": "backend.flashSaleProduct.admin",
        "peekOfCode": "class DetailFlashSaleAdmin(admin.ModelAdmin):\n    list_display = ('flash_sale_id' , 'product_id' , 'datetime_created' , 'datetime_finished' , 'status' )\nadmin.site.register(DetailFlashSale,DetailFlashSaleAdmin)\nclass VoucherAdmin(admin.ModelAdmin):\n    list_display = ('id','detail' , 'sale' ,'description' , 'quantity')\nadmin.site.register(Voucher,VoucherAdmin)\nclass DetailVoucherAdmin(admin.ModelAdmin):\n    list_display = ( 'id' , 'product_id' , 'voucher_id' )\nadmin.site.register(DetailVoucher, DetailVoucherAdmin)",
        "detail": "backend.flashSaleProduct.admin",
        "documentation": {}
    },
    {
        "label": "VoucherAdmin",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.admin",
        "description": "backend.flashSaleProduct.admin",
        "peekOfCode": "class VoucherAdmin(admin.ModelAdmin):\n    list_display = ('id','detail' , 'sale' ,'description' , 'quantity')\nadmin.site.register(Voucher,VoucherAdmin)\nclass DetailVoucherAdmin(admin.ModelAdmin):\n    list_display = ( 'id' , 'product_id' , 'voucher_id' )\nadmin.site.register(DetailVoucher, DetailVoucherAdmin)",
        "detail": "backend.flashSaleProduct.admin",
        "documentation": {}
    },
    {
        "label": "DetailVoucherAdmin",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.admin",
        "description": "backend.flashSaleProduct.admin",
        "peekOfCode": "class DetailVoucherAdmin(admin.ModelAdmin):\n    list_display = ( 'id' , 'product_id' , 'voucher_id' )\nadmin.site.register(DetailVoucher, DetailVoucherAdmin)",
        "detail": "backend.flashSaleProduct.admin",
        "documentation": {}
    },
    {
        "label": "FlashsaleproductConfig",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.apps",
        "description": "backend.flashSaleProduct.apps",
        "peekOfCode": "class FlashsaleproductConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'flashSaleProduct'",
        "detail": "backend.flashSaleProduct.apps",
        "documentation": {}
    },
    {
        "label": "FlashSale",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.models",
        "description": "backend.flashSaleProduct.models",
        "peekOfCode": "class FlashSale(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    name = models.CharField(max_length= 200 , blank = True)\n    note = models.TextField()\n    def __str__(self):\n        return self.name\nclass DetailFlashSale(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    flash_sale_id = models.ForeignKey(FlashSale, on_delete=models.SET_NULL, null=True , related_name='detail_flash_sale')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True , related_name='detail_flash_sale')",
        "detail": "backend.flashSaleProduct.models",
        "documentation": {}
    },
    {
        "label": "DetailFlashSale",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.models",
        "description": "backend.flashSaleProduct.models",
        "peekOfCode": "class DetailFlashSale(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    flash_sale_id = models.ForeignKey(FlashSale, on_delete=models.SET_NULL, null=True , related_name='detail_flash_sale')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True , related_name='detail_flash_sale')\n    datetime_created = models.DateTimeField(auto_now = True, auto_now_add=False,blank = True, null = False)\n    datetime_finished = models.DateTimeField(blank = True,null = False)\n    status = models.BooleanField(blank = True, null = False)\nclass Voucher(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    name = models.CharField(max_length=200 ,blank = True)",
        "detail": "backend.flashSaleProduct.models",
        "documentation": {}
    },
    {
        "label": "Voucher",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.models",
        "description": "backend.flashSaleProduct.models",
        "peekOfCode": "class Voucher(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    name = models.CharField(max_length=200 ,blank = True)\n    detail = models.TextField()\n    sale = models.FloatField()\n    description = models.TextField()\n    quantity = models.IntegerField()\n    level = models.IntegerField()\n    limited_price = models.IntegerField()\n    def __str__(self):",
        "detail": "backend.flashSaleProduct.models",
        "documentation": {}
    },
    {
        "label": "DetailVoucher",
        "kind": 6,
        "importPath": "backend.flashSaleProduct.models",
        "description": "backend.flashSaleProduct.models",
        "peekOfCode": "class DetailVoucher(models.Model):\n    id = models.UUIDField(primary_key = True , default = uuid.uuid4 , editable=False )\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True , related_name='detail_vouchers')\n    voucher_id = models.ForeignKey(Voucher, on_delete=models.SET_NULL, null=True , related_name='detail_vouchers')\n    def __str__(self):\n        return str(self.voucher_id) + \"-\" + str(self.product_id)",
        "detail": "backend.flashSaleProduct.models",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.historyAction.migrations.0001_initial",
        "description": "backend.historyAction.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='HistoryAction',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "backend.historyAction.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "HistoryactionConfig",
        "kind": 6,
        "importPath": "backend.historyAction.apps",
        "description": "backend.historyAction.apps",
        "peekOfCode": "class HistoryactionConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'historyAction'",
        "detail": "backend.historyAction.apps",
        "documentation": {}
    },
    {
        "label": "HistoryAction",
        "kind": 6,
        "importPath": "backend.historyAction.models",
        "description": "backend.historyAction.models",
        "peekOfCode": "class HistoryAction(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    list_selected_products = models.TextField()\n    list_selected_categorié = models.TextField()\n    list_selected_sales = models.TextField()\n    user_id=models.ForeignKey(User, on_delete=models.SET_NULL, null=True , related_name='history_logs')",
        "detail": "backend.historyAction.models",
        "documentation": {}
    },
    {
        "label": "CustomAuthentication",
        "kind": 6,
        "importPath": "backend.login.api.authenticate",
        "description": "backend.login.api.authenticate",
        "peekOfCode": "class CustomAuthentication(JWTAuthentication):\n    def authenticate(self, request):\n        header = self.get_header(request)\n        if header is None:\n            raw_token = request.COOKIES.get(settings.SIMPLE_JWT['AUTH_COOKIE']) or None\n        else:\n            raw_token = self.get_raw_token(header)\n        if raw_token is None:\n            return None\n        validated_token = self.get_validated_token(raw_token)",
        "detail": "backend.login.api.authenticate",
        "documentation": {}
    },
    {
        "label": "enforce_csrf",
        "kind": 2,
        "importPath": "backend.login.api.authenticate",
        "description": "backend.login.api.authenticate",
        "peekOfCode": "def enforce_csrf(request):\n    check = CSRFCheck()\n    check.process_request(request)\n    reason = check.process_view(request, None, (), {})\n    if reason:\n        raise exceptions.PermissionDenied('CSRF Failed: %s' % reason)\nclass CustomAuthentication(JWTAuthentication):\n    def authenticate(self, request):\n        header = self.get_header(request)\n        if header is None:",
        "detail": "backend.login.api.authenticate",
        "documentation": {}
    },
    {
        "label": "AddressSerializer",
        "kind": 6,
        "importPath": "backend.login.api.serializers",
        "description": "backend.login.api.serializers",
        "peekOfCode": "class AddressSerializer(ModelSerializer):\n    class Meta:\n        model = Address\n        fields = ['id','address_content','status']\nclass PhoneUserSerializer(ModelSerializer):\n    class Meta:\n        model = PhoneUser\n        fields = '__all__'\nclass UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) ",
        "detail": "backend.login.api.serializers",
        "documentation": {}
    },
    {
        "label": "PhoneUserSerializer",
        "kind": 6,
        "importPath": "backend.login.api.serializers",
        "description": "backend.login.api.serializers",
        "peekOfCode": "class PhoneUserSerializer(ModelSerializer):\n    class Meta:\n        model = PhoneUser\n        fields = '__all__'\nclass UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) \n    phones = PhoneUserSerializer(many = True)\n    class Meta:\n        model = User\n        fields = ['username','email','photo','address','token_permission_infor_user','name','phones']",
        "detail": "backend.login.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "backend.login.api.serializers",
        "description": "backend.login.api.serializers",
        "peekOfCode": "class UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) \n    phones = PhoneUserSerializer(many = True)\n    class Meta:\n        model = User\n        fields = ['username','email','photo','address','token_permission_infor_user','name','phones']",
        "detail": "backend.login.api.serializers",
        "documentation": {}
    },
    {
        "label": "change_password_user",
        "kind": 5,
        "importPath": "backend.login.api.urls",
        "description": "backend.login.api.urls",
        "peekOfCode": "change_password_user = LoginViewSet.as_view({\n    'post' : 'change_password_user',\n})\nregister_user = RegisterUserViewSet.as_view({\n    'post': 'register_user',\n})\nurlpatterns = [\n    path('login/', login, name = \"login_user\"),\n    path('logout/', logout, name = \"logout_user\"),\n    path('user/change-password/', change_password_user, name = \"change_password_user\"),",
        "detail": "backend.login.api.urls",
        "documentation": {}
    },
    {
        "label": "register_user",
        "kind": 5,
        "importPath": "backend.login.api.urls",
        "description": "backend.login.api.urls",
        "peekOfCode": "register_user = RegisterUserViewSet.as_view({\n    'post': 'register_user',\n})\nurlpatterns = [\n    path('login/', login, name = \"login_user\"),\n    path('logout/', logout, name = \"logout_user\"),\n    path('user/change-password/', change_password_user, name = \"change_password_user\"),\n    path('register-user/', register_user, name = \"register_user\")\n]",
        "detail": "backend.login.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.login.api.urls",
        "description": "backend.login.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('login/', login, name = \"login_user\"),\n    path('logout/', logout, name = \"logout_user\"),\n    path('user/change-password/', change_password_user, name = \"change_password_user\"),\n    path('register-user/', register_user, name = \"register_user\")\n]",
        "detail": "backend.login.api.urls",
        "documentation": {}
    },
    {
        "label": "RegisterUserViewSe",
        "kind": 6,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "class RegisterUserViewSet (viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    @action(methods = ['POST'], detail = False, url_path = 'register_user', url_name = \"post_user\")\n    def register_user(self, request, *args, **kwargs):\n        list_name_file_blog = []\n        def decodeFile(image_data,is_image,is_video):\n            file_format, file_string = image_data.split(';base64,')\n            file_ext = file_format.split('/')[-1]\n            file_bytes = base64.b64decode(file_string)",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "LoginViewSe",
        "kind": 6,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "class LoginViewSet (viewsets.ViewSet):\n    authentication_classes =[]\n    # ---------------------------------------------------------------------------- #\n    #                             CHANGE PASSWORD USER                             #\n    # ---------------------------------------------------------------------------- #\n    @action(methods = [\"POST\"], detail = False, url_path = \"change_password_user\", url_name = \"change_password_user\")\n    def change_password_user(self,request,*args, **kwargs):\n        data_request= json.loads(request.body.decode('utf-8'))\n        token_permission_infor_user = data_request['params']['token_permission_infor_user']\n        email_user = data_request['params']['email_user']",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "def login(request):\n    def get_tokens_for_user(user):\n        refresh = RefreshToken.for_user(user)\n        return {\n            'refresh': str(refresh),\n            'access': str(refresh.access_token),\n    }\n    data_request= json.loads(request.body.decode('utf-8'))\n    print(data_request)\n    response = Response()",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "def logout(request):\n    try:\n        response = Response()\n        response.delete_cookie('refresh_token')\n        response.delete_cookie('csrftoken')\n        response.data = {\n            \"success\" : \"Logout success\" , \"status\" : status.HTTP_200_OK\n        }\n        response.status_code = status.HTTP_200_OK\n    except Exception as e :",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "path_upload_image",
        "kind": 5,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "path_upload_image = str(settings.BASE_DIR)+\"/media/photos\"\npath_upload_video = str(settings.BASE_DIR)+\"/media/videos\"\nclass RegisterUserViewSet (viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    @action(methods = ['POST'], detail = False, url_path = 'register_user', url_name = \"post_user\")\n    def register_user(self, request, *args, **kwargs):\n        list_name_file_blog = []\n        def decodeFile(image_data,is_image,is_video):\n            file_format, file_string = image_data.split(';base64,')",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "path_upload_video",
        "kind": 5,
        "importPath": "backend.login.api.views",
        "description": "backend.login.api.views",
        "peekOfCode": "path_upload_video = str(settings.BASE_DIR)+\"/media/videos\"\nclass RegisterUserViewSet (viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    @action(methods = ['POST'], detail = False, url_path = 'register_user', url_name = \"post_user\")\n    def register_user(self, request, *args, **kwargs):\n        list_name_file_blog = []\n        def decodeFile(image_data,is_image,is_video):\n            file_format, file_string = image_data.split(';base64,')\n            file_ext = file_format.split('/')[-1]",
        "detail": "backend.login.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0001_initial",
        "description": "backend.login.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "backend.login.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0002_address",
        "description": "backend.login.migrations.0002_address",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0001_initial'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Address',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('address_content', models.CharField(max_length=500)),",
        "detail": "backend.login.migrations.0002_address",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0003_auto_20230206_1510",
        "description": "backend.login.migrations.0003_auto_20230206_1510",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0002_address'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='token_permission_infor_user',\n            field=models.UUIDField(default=uuid.uuid4, editable=False),\n        ),",
        "detail": "backend.login.migrations.0003_auto_20230206_1510",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0004_auto_20230207_0219",
        "description": "backend.login.migrations.0004_auto_20230207_0219",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0003_auto_20230206_1510'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='name',\n            field=models.CharField(default='Nguyen Hoang Truong', max_length=200),\n            preserve_default=False,",
        "detail": "backend.login.migrations.0004_auto_20230207_0219",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0005_phoneuser",
        "description": "backend.login.migrations.0005_phoneuser",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0004_auto_20230207_0219'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='PhoneUser',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('phone', models.CharField(max_length=10)),",
        "detail": "backend.login.migrations.0005_phoneuser",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0006_phoneuser_user_id",
        "description": "backend.login.migrations.0006_phoneuser_user_id",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0005_phoneuser'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='phoneuser',\n            name='user_id',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='phones', to=settings.AUTH_USER_MODEL),\n        ),",
        "detail": "backend.login.migrations.0006_phoneuser_user_id",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0007_alter_user_token_permission_infor_user",
        "description": "backend.login.migrations.0007_alter_user_token_permission_infor_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0006_phoneuser_user_id'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='token_permission_infor_user',\n            field=models.UUIDField(default=uuid.uuid4, unique=True),\n        ),",
        "detail": "backend.login.migrations.0007_alter_user_token_permission_infor_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0008_remove_user_phone",
        "description": "backend.login.migrations.0008_remove_user_phone",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0007_alter_user_token_permission_infor_user'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='user',\n            name='phone',\n        ),\n    ]",
        "detail": "backend.login.migrations.0008_remove_user_phone",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0009_phoneuser_status",
        "description": "backend.login.migrations.0009_phoneuser_status",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0008_remove_user_phone'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='phoneuser',\n            name='status',\n            field=models.BooleanField(default=False),\n            preserve_default=False,",
        "detail": "backend.login.migrations.0009_phoneuser_status",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.login.migrations.0010_user_level",
        "description": "backend.login.migrations.0010_user_level",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0009_phoneuser_status'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='level',\n            field=models.IntegerField(default=False),\n            preserve_default=False,",
        "detail": "backend.login.migrations.0010_user_level",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "backend.login.admin",
        "description": "backend.login.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ('username' , 'email')\nclass AddressAdmin(admin.ModelAdmin):\n    list_display = ('user_id' , 'address_content')\nclass PhoneUserAdmin(admin.ModelAdmin):\n    list_display = ('phone','name','user_id')\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Address,AddressAdmin)\nadmin.site.register(PhoneUser,PhoneUserAdmin)",
        "detail": "backend.login.admin",
        "documentation": {}
    },
    {
        "label": "AddressAdmin",
        "kind": 6,
        "importPath": "backend.login.admin",
        "description": "backend.login.admin",
        "peekOfCode": "class AddressAdmin(admin.ModelAdmin):\n    list_display = ('user_id' , 'address_content')\nclass PhoneUserAdmin(admin.ModelAdmin):\n    list_display = ('phone','name','user_id')\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Address,AddressAdmin)\nadmin.site.register(PhoneUser,PhoneUserAdmin)",
        "detail": "backend.login.admin",
        "documentation": {}
    },
    {
        "label": "PhoneUserAdmin",
        "kind": 6,
        "importPath": "backend.login.admin",
        "description": "backend.login.admin",
        "peekOfCode": "class PhoneUserAdmin(admin.ModelAdmin):\n    list_display = ('phone','name','user_id')\nadmin.site.register(User,UserAdmin)\nadmin.site.register(Address,AddressAdmin)\nadmin.site.register(PhoneUser,PhoneUserAdmin)",
        "detail": "backend.login.admin",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "backend.login.apps",
        "description": "backend.login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "backend.login.apps",
        "documentation": {}
    },
    {
        "label": "RequestRateMiddleWare",
        "kind": 6,
        "importPath": "backend.login.middlewares",
        "description": "backend.login.middlewares",
        "peekOfCode": "class RequestRateMiddleWare:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        # Code to be executed for each request before\n        # the view (and later middleware) are called.\n        response = self.get_response(request)\n        # Code to be executed for each request/response after\n        # the view is called.\n        print(response)",
        "detail": "backend.login.middlewares",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "backend.login.models",
        "description": "backend.login.models",
        "peekOfCode": "class User(AbstractUser):\n    id       = uuid4()\n    photo    = models.ImageField(upload_to =  'media/photos/user', height_field = None, width_field = None, max_length = None)\n    name     = models.CharField( max_length=200 )\n    password = models.CharField( max_length = 200)\n    email    = models.EmailField(max_length = 254)\n    level = models.IntegerField()\n    token_permission_infor_user = models.UUIDField(default=uuid.uuid4 , unique=True)\n    USERNAME_FIELD = 'username'\n    def __str__(self):",
        "detail": "backend.login.models",
        "documentation": {}
    },
    {
        "label": "Address",
        "kind": 6,
        "importPath": "backend.login.models",
        "description": "backend.login.models",
        "peekOfCode": "class Address(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    address_content =models.CharField(max_length=500,null=False)\n    status = models.BooleanField(null = False)\n    user_id=models.ForeignKey(User, on_delete=models.SET_NULL, null=True , related_name='address')\nclass PhoneUser(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    phone = models.CharField(max_length=10)\n    name = models.CharField(max_length=100)\n    status = models.BooleanField(null = False)",
        "detail": "backend.login.models",
        "documentation": {}
    },
    {
        "label": "PhoneUser",
        "kind": 6,
        "importPath": "backend.login.models",
        "description": "backend.login.models",
        "peekOfCode": "class PhoneUser(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    phone = models.CharField(max_length=10)\n    name = models.CharField(max_length=100)\n    status = models.BooleanField(null = False)\n    user_id=models.ForeignKey(User, on_delete=models.SET_NULL, null=True , related_name='phones')",
        "detail": "backend.login.models",
        "documentation": {}
    },
    {
        "label": "path_root",
        "kind": 5,
        "importPath": "backend.login.models",
        "description": "backend.login.models",
        "peekOfCode": "path_root = str(settings.BASE_DIR)+\"/media/photos\"\n# Create your models here.\nclass User(AbstractUser):\n    id       = uuid4()\n    photo    = models.ImageField(upload_to =  'media/photos/user', height_field = None, width_field = None, max_length = None)\n    name     = models.CharField( max_length=200 )\n    password = models.CharField( max_length = 200)\n    email    = models.EmailField(max_length = 254)\n    level = models.IntegerField()\n    token_permission_infor_user = models.UUIDField(default=uuid.uuid4 , unique=True)",
        "detail": "backend.login.models",
        "documentation": {}
    },
    {
        "label": "PhotoNewSerializer",
        "kind": 6,
        "importPath": "backend.new.api.serializers",
        "description": "backend.new.api.serializers",
        "peekOfCode": "class PhotoNewSerializer(ModelSerializer):\n    class Meta:\n        model = Photo_new\n        fields = \"__all__\"\nclass NewSerializer(ModelSerializer):\n    photo_news = PhotoNewSerializer(many = True)\n    class Meta:\n        model = New\n        fields = ['slug','name','description','product_id','photo_news']",
        "detail": "backend.new.api.serializers",
        "documentation": {}
    },
    {
        "label": "NewSerializer",
        "kind": 6,
        "importPath": "backend.new.api.serializers",
        "description": "backend.new.api.serializers",
        "peekOfCode": "class NewSerializer(ModelSerializer):\n    photo_news = PhotoNewSerializer(many = True)\n    class Meta:\n        model = New\n        fields = ['slug','name','description','product_id','photo_news']",
        "detail": "backend.new.api.serializers",
        "documentation": {}
    },
    {
        "label": "new",
        "kind": 5,
        "importPath": "backend.new.api.urls",
        "description": "backend.new.api.urls",
        "peekOfCode": "new = NewViewSet.as_view({\n    'get' : 'get_new'\n})\nurlpatterns = [\n    path('new/',new , name =\"get_new\")\n]",
        "detail": "backend.new.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.new.api.urls",
        "description": "backend.new.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('new/',new , name =\"get_new\")\n]",
        "detail": "backend.new.api.urls",
        "documentation": {}
    },
    {
        "label": "NewViewSet",
        "kind": 6,
        "importPath": "backend.new.api.views",
        "description": "backend.new.api.views",
        "peekOfCode": "class NewViewSet(viewsets.ModelViewSet):\n    queryset = New.objects.all()\n    authentication_classes = []\n    permission_classes = []\n    @action(method=['GET'], detail = False , url_name='new',url_path=\"get_new\")\n    def get_new(self, request, *args, **kwargs):\n        queryset = New.objects.all()\n        serializer = NewSerializer(queryset,many = True)\n        return Response(serializer.data)\n# class PhotoNewViewSet(viewsets.ModelViewSet):",
        "detail": "backend.new.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.new.migrations.0001_initial",
        "description": "backend.new.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('product', '0002_alter_photo_product_data'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='New',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "backend.new.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "NewAdmin",
        "kind": 6,
        "importPath": "backend.new.admin",
        "description": "backend.new.admin",
        "peekOfCode": "class NewAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'slug' , 'product_id')\nclass PhotoNewAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'data' , 'new_id')\n# Register your models here.\nadmin.site.register(New, NewAdmin)\nadmin.site.register(Photo_new,PhotoNewAdmin)",
        "detail": "backend.new.admin",
        "documentation": {}
    },
    {
        "label": "PhotoNewAdmin",
        "kind": 6,
        "importPath": "backend.new.admin",
        "description": "backend.new.admin",
        "peekOfCode": "class PhotoNewAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'data' , 'new_id')\n# Register your models here.\nadmin.site.register(New, NewAdmin)\nadmin.site.register(Photo_new,PhotoNewAdmin)",
        "detail": "backend.new.admin",
        "documentation": {}
    },
    {
        "label": "NewConfig",
        "kind": 6,
        "importPath": "backend.new.apps",
        "description": "backend.new.apps",
        "peekOfCode": "class NewConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'new'",
        "detail": "backend.new.apps",
        "documentation": {}
    },
    {
        "label": "Ne",
        "kind": 6,
        "importPath": "backend.new.models",
        "description": "backend.new.models",
        "peekOfCode": "class New (models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    slug = models.CharField(null=False,max_length=50)\n    name=models.CharField(max_length=50,null=False)\n    description=models.TextField(null=True)\n    product_id = models.ForeignKey(Product, on_delete= models.SET_NULL, null = True, blank= True, related_name='news')\n    def __str__(self) -> str:\n        return str(self.slug)\nclass Photo_new(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)",
        "detail": "backend.new.models",
        "documentation": {}
    },
    {
        "label": "Photo_new",
        "kind": 6,
        "importPath": "backend.new.models",
        "description": "backend.new.models",
        "peekOfCode": "class Photo_new(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    data=models.ImageField(upload_to='media/photos/')\n    new_id = models.ForeignKey(New, on_delete=models.SET_NULL, null=True,blank=True,related_name='photo_news')\n    fields = ['data']",
        "detail": "backend.new.models",
        "documentation": {}
    },
    {
        "label": "handleRawQuery",
        "kind": 2,
        "importPath": "backend.order.api.data_processing",
        "description": "backend.order.api.data_processing",
        "peekOfCode": "def handleRawQuery(queryset):\n    order_dict = dict()\n    for i in queryset:\n        if i.id not in order_dict:\n            order_dict[i.id] = {\n                \"order\" :{\n                    'name' : i.name ,\n                    'datetime' : i.datetime,\n                    'receiver' : i.receiver,\n                    'address_receiver' : i.address_receiver,",
        "detail": "backend.order.api.data_processing",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_ALL_ORDER_FOR_USER",
        "kind": 5,
        "importPath": "backend.order.api.raw_query",
        "description": "backend.order.api.raw_query",
        "peekOfCode": "QUERY_SQL_GET_ALL_ORDER_FOR_USER = \"\"\"\n    SELECT order_order.*, order_detailorder.status as 'detail_order_status' ,\n        product_product.slug as 'product_slug' , product_product.name as 'product_name',\n        product_product.description as 'product_description',\n        product_category.name as 'category_name', product_price.price as 'product_price',\n        product_price.sale as 'product_sale' , product_price.status as 'product_price_status',\n        product_price.price_total as 'product_price_total' , product_photo_product.data as 'photo_product',\n        order_transport.slug as 'transport_slug' , order_transport.name as 'transport_name' ,\n        order_transport.logo as 'transport_logo' , order_transport.price as 'transport_price',\n        `order_detailorder`.`quantity` as 'product_quantity'",
        "detail": "backend.order.api.raw_query",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_ALL_ORDER_FOR_USER_BETWEEN_DAYS",
        "kind": 5,
        "importPath": "backend.order.api.raw_query",
        "description": "backend.order.api.raw_query",
        "peekOfCode": "QUERY_SQL_GET_ALL_ORDER_FOR_USER_BETWEEN_DAYS = \"\"\"\n    SELECT order_order.*, order_detailorder.status as 'detail_order_status' ,\n        product_product.slug as 'product_slug' , product_product.name as 'product_name',\n        product_product.description as 'product_description',\n        product_category.name as 'category_name', product_price.price as 'product_price',\n        product_price.sale as 'product_sale' , product_price.status as 'product_price_status',\n        product_price.price_total as 'product_price_total' , product_photo_product.data as 'photo_product',\n        order_transport.slug as 'transport_slug' , order_transport.name as 'transport_name' ,\n        order_transport.logo as 'transport_logo' , order_transport.price as 'transport_price',\n        `order_detailorder`.`quantity` as 'product_quantity'",
        "detail": "backend.order.api.raw_query",
        "documentation": {}
    },
    {
        "label": "TransportSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class TransportSerializer(serializers.Serializer):\n    # ------------------------- params model detail order ------------------------ #\n    transport_slug = serializers.CharField(max_length=50)\n    transport_name = serializers.CharField(max_length=50)\n    transport_price = serializers.FloatField()\n    transport_logo = serializers.CharField()\nclass ProductSerializer(serializers.Serializer):\n    # --------------------------- params model product --------------------------- #\n    product_slug = serializers.CharField()\n    product_name = serializers.CharField()",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProductSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class ProductSerializer(serializers.Serializer):\n    # --------------------------- params model product --------------------------- #\n    product_slug = serializers.CharField()\n    product_name = serializers.CharField()\n    product_description = serializers.CharField()\n    product_price = serializers.FloatField()\n    product_sale = serializers.FloatField()\n    product_price_status = serializers.BooleanField()\n    product_price_total = serializers.FloatField()\n    photo_product = serializers.CharField()",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "OrderSerialize",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class OrderSerializer (serializers.Serializer):\n    # ---------------------------- params model order ---------------------------- #\n    name = serializers.CharField(max_length=200)\n    datetime = serializers.DateTimeField()\n    receiver = serializers.CharField(max_length=50)\n    address_receiver = serializers.CharField(max_length=200)\n    phone_receiver = serializers.CharField(max_length=10)\n    status = serializers.BooleanField()\n    note = serializers.CharField(max_length=50)\n    logs = serializers.CharField()",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "OrderHandleDataSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class OrderHandleDataSerializer(serializers.Serializer):\n    order = OrderSerializer(many = False)\n    transport = TransportSerializer(many = False)\n    products = ProductSerializer(many = True)\nclass TransportModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Transport\n        fields = \"__all__\" \nclass OrderModelSerializer(serializers.ModelSerializer):\n    transport = TransportModelSerializer(many = False)",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "TransportModelSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class TransportModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Transport\n        fields = \"__all__\" \nclass OrderModelSerializer(serializers.ModelSerializer):\n    transport = TransportModelSerializer(many = False)\n    detail_orders = TransportModelSerializer(many = True)\n    class Meta:\n        model = Order\n        fields = \"__all__\"",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "OrderModelSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class OrderModelSerializer(serializers.ModelSerializer):\n    transport = TransportModelSerializer(many = False)\n    detail_orders = TransportModelSerializer(many = True)\n    class Meta:\n        model = Order\n        fields = \"__all__\"\nclass DetailOrderModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DetailOrder\n        fields = \"__all__\"",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "DetailOrderModelSerializer",
        "kind": 6,
        "importPath": "backend.order.api.serializers",
        "description": "backend.order.api.serializers",
        "peekOfCode": "class DetailOrderModelSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = DetailOrder\n        fields = \"__all__\"",
        "detail": "backend.order.api.serializers",
        "documentation": {}
    },
    {
        "label": "get_order",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "get_order = OrderViewSet.as_view({\n    'get' : 'get_order',\n    'post' : 'add_to_cart'\n})\nget_order_today = OrderViewSet.as_view({\n    'get' : 'get_order_today'\n})\npost_remove_order = OrderViewSet.as_view({\n    'post' : 'remove_product_in_cart'\n})",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "get_order_today",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "get_order_today = OrderViewSet.as_view({\n    'get' : 'get_order_today'\n})\npost_remove_order = OrderViewSet.as_view({\n    'post' : 'remove_product_in_cart'\n})\nget_transport = TransportViewSet.as_view({\n    'get' : 'get_transport'\n})\nchange_order_today = OrderViewSet.as_view({",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "post_remove_order",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "post_remove_order = OrderViewSet.as_view({\n    'post' : 'remove_product_in_cart'\n})\nget_transport = TransportViewSet.as_view({\n    'get' : 'get_transport'\n})\nchange_order_today = OrderViewSet.as_view({\n    'post' : 'change_order_today'\n})\n# ---------------------------------------------------------------------------- #",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "get_transport",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "get_transport = TransportViewSet.as_view({\n    'get' : 'get_transport'\n})\nchange_order_today = OrderViewSet.as_view({\n    'post' : 'change_order_today'\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "change_order_today",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "change_order_today = OrderViewSet.as_view({\n    'post' : 'change_order_today'\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [\n    path('order/',get_order , name = \"order_cart\"), # get order after login for user\n    path('order/today/',get_order_today , name = \"order_cart\"), # get order today after login for user\n    path('order/remove-product/',post_remove_order , name = \"order_cart_remove\"), # remove product in order for user",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.order.api.urls",
        "description": "backend.order.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('order/',get_order , name = \"order_cart\"), # get order after login for user\n    path('order/today/',get_order_today , name = \"order_cart\"), # get order today after login for user\n    path('order/remove-product/',post_remove_order , name = \"order_cart_remove\"), # remove product in order for user\n    path('order/change-order-today/',change_order_today , name = \"change_order_today\"), # change order today for user\n    path('transport/',get_transport , name=\"get_transport\") # get transport after select product in cart or payment\n]",
        "detail": "backend.order.api.urls",
        "documentation": {}
    },
    {
        "label": "TransportViewSet",
        "kind": 6,
        "importPath": "backend.order.api.views",
        "description": "backend.order.api.views",
        "peekOfCode": "class TransportViewSet(viewsets.ViewSet):\n    @action(method=[\"GET\"],detail=False,url_path=\"get_transport\",url_name=\"get_transport\")\n    def get_transport(self, request,*args, **kwargs):\n        try:\n            queryset = Transport.objects.all().order_by('price')\n            serializer = TransportModelSerializer(queryset , many = True)\n            return Response({\"data\" : serializer.data})\n        except Exception as e:\n            print(e)\n            return Response({\"data\" : False})",
        "detail": "backend.order.api.views",
        "documentation": {}
    },
    {
        "label": "OrderViewSe",
        "kind": 6,
        "importPath": "backend.order.api.views",
        "description": "backend.order.api.views",
        "peekOfCode": "class OrderViewSet (viewsets.ModelViewSet):\n    queryset = Order.objects.all()\n    serializer_class = OrderHandleDataSerializer\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    # ---------------------------------------------------------------------------- #\n    #                               METHOD GET ORDER                               #\n    # ---------------------------------------------------------------------------- #\n    @action(method=[\"GET\"],detail=False,url_path=\"get_order\",url_name=\"get_order\")\n    def get_order(self, request,*args, **kwargs):",
        "detail": "backend.order.api.views",
        "documentation": {}
    },
    {
        "label": "checkTheOrderIsAvailebleToDay",
        "kind": 2,
        "importPath": "backend.order.api.views",
        "description": "backend.order.api.views",
        "peekOfCode": "def checkTheOrderIsAvailebleToDay(curent_user,now):\n    start_datetime = datetime(\n        now.year,now.month , now.day, 0, 0, 0\n    ) \n    end_datetime = datetime(\n        now.year,now.month , now.day, 23, 59, 59\n    )\n    order_current = Order.objects.filter(datetime__range=[start_datetime, end_datetime] , user_id = curent_user)\n    print(order_current.query)\n    if len(order_current) > 0 :",
        "detail": "backend.order.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.order.migrations.0001_initial",
        "description": "backend.order.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('product', '0003_heart'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Transport',\n            fields=[",
        "detail": "backend.order.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.order.migrations.0002_auto_20230223_0738",
        "description": "backend.order.migrations.0002_auto_20230223_0738",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('order', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='detailorder',\n            name='id',\n            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False),\n        ),",
        "detail": "backend.order.migrations.0002_auto_20230223_0738",
        "documentation": {}
    },
    {
        "label": "OrderAdmin",
        "kind": 6,
        "importPath": "backend.order.admin",
        "description": "backend.order.admin",
        "peekOfCode": "class OrderAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'name' , 'user_id' ,'status','total_price' ,'cancel')\nadmin.site.register(Order,OrderAdmin)\nclass DetailOrderAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'status' , 'order_id' , 'product_id' , 'quantity' )\nadmin.site.register(DetailOrder,DetailOrderAdmin)\nclass TransportAdmin(admin.ModelAdmin):\n    list_display = ('id','slug' , 'name' ,'price')\nadmin.site.register(Transport,TransportAdmin)",
        "detail": "backend.order.admin",
        "documentation": {}
    },
    {
        "label": "DetailOrderAdmin",
        "kind": 6,
        "importPath": "backend.order.admin",
        "description": "backend.order.admin",
        "peekOfCode": "class DetailOrderAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'status' , 'order_id' , 'product_id' , 'quantity' )\nadmin.site.register(DetailOrder,DetailOrderAdmin)\nclass TransportAdmin(admin.ModelAdmin):\n    list_display = ('id','slug' , 'name' ,'price')\nadmin.site.register(Transport,TransportAdmin)",
        "detail": "backend.order.admin",
        "documentation": {}
    },
    {
        "label": "TransportAdmin",
        "kind": 6,
        "importPath": "backend.order.admin",
        "description": "backend.order.admin",
        "peekOfCode": "class TransportAdmin(admin.ModelAdmin):\n    list_display = ('id','slug' , 'name' ,'price')\nadmin.site.register(Transport,TransportAdmin)",
        "detail": "backend.order.admin",
        "documentation": {}
    },
    {
        "label": "OrderConfig",
        "kind": 6,
        "importPath": "backend.order.apps",
        "description": "backend.order.apps",
        "peekOfCode": "class OrderConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'order'",
        "detail": "backend.order.apps",
        "documentation": {}
    },
    {
        "label": "Transport",
        "kind": 6,
        "importPath": "backend.order.models",
        "description": "backend.order.models",
        "peekOfCode": "class Transport(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    slug = models.CharField(null=False,max_length=50)\n    name = models.CharField(max_length=50)\n    logo = models.ImageField(null=True)\n    price = models.FloatField(null=True)\nclass Order(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    datetime = models.DateTimeField()",
        "detail": "backend.order.models",
        "documentation": {}
    },
    {
        "label": "Order",
        "kind": 6,
        "importPath": "backend.order.models",
        "description": "backend.order.models",
        "peekOfCode": "class Order(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    name = models.CharField(max_length=200)\n    datetime = models.DateTimeField()\n    receiver = models.CharField(max_length=50,null=True)\n    address_receiver = models.CharField(max_length=200,null=True)\n    phone_receiver = models.CharField(max_length=10,null=True)\n    status = models.BooleanField()\n    note = models.CharField(max_length=50,null=True)\n    logs = models.TextField(null=True)",
        "detail": "backend.order.models",
        "documentation": {}
    },
    {
        "label": "DetailOrder",
        "kind": 6,
        "importPath": "backend.order.models",
        "description": "backend.order.models",
        "peekOfCode": "class DetailOrder(models.Model):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    status = models.BooleanField()\n    quantity = models.IntegerField()\n    order_id = models.ForeignKey(Order, on_delete=models.SET_NULL, null=True,related_name='detail_orders')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)",
        "detail": "backend.order.models",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_PRODUCT_DETAIL_NOT_USER",
        "kind": 5,
        "importPath": "backend.product.api.query_raw",
        "description": "backend.product.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_PRODUCT_DETAIL_NOT_USER = \"\"\"\n    SELECT  `product_product`.`id`, `product_product`.`slug`, \n            `product_product`.`name`, `product_product`.`sex`, \n            `product_product`.`description`, `product_photo_product`.`data`, \n            `product_price`.`price`, `product_price`.`sale`, \n            `product_product`.`description`,\n            (\n                SELECT COUNT(U0.`id`) AS `heart_count` \n                FROM `product_heart` U0 \n                WHERE U0.`product_id_id` = `product_product`.`id`",
        "detail": "backend.product.api.query_raw",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_ALL_PRODUCT_FOR_USER",
        "kind": 5,
        "importPath": "backend.product.api.query_raw",
        "description": "backend.product.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_ALL_PRODUCT_FOR_USER = \"\"\"\n    SELECT  `product_product`.`id`, `product_product`.`slug`, \n            `product_product`.`name`, `product_product`.`sex`, \n            `product_product`.`description`, `product_photo_product`.`data`, \n            `product_price`.`price`, `product_price`.`sale`, \n            `product_product`.`description`,\n            EXISTS\n                (\n                    SELECT \n                        (1) AS `a` FROM `product_heart` U0 ",
        "detail": "backend.product.api.query_raw",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_ALL_PRODUCT_NOT_USER",
        "kind": 5,
        "importPath": "backend.product.api.query_raw",
        "description": "backend.product.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_ALL_PRODUCT_NOT_USER = \"\"\"\n    SELECT  \n        `product_product`.`id`, `product_product`.`slug`, \n        `product_product`.`name`, `product_product`.`sex`, \n        `product_product`.`description`, `product_photo_product`.`data`, \n        `product_price`.`price`, `product_price`.`sale`, \n        `product_product`.`description` ,\n        (\n            SELECT \n                COUNT(U0.`id`) AS `heart_count` ",
        "detail": "backend.product.api.query_raw",
        "documentation": {}
    },
    {
        "label": "QUERY_SQL_GET_PRODUCT_FOR_CATEGORY_SLUG",
        "kind": 5,
        "importPath": "backend.product.api.query_raw",
        "description": "backend.product.api.query_raw",
        "peekOfCode": "QUERY_SQL_GET_PRODUCT_FOR_CATEGORY_SLUG = \"\"\"\n    SELECT *\n    FROM \n        (\n            (\n                    SELECT NULL AS content_id, NULL AS question, NULL AS answer, node.*, \n                        (\n                            SELECT COUNT(parent1.id) - 1\n                            FROM faq_categories AS node1,\n                            faq_categories AS parent1",
        "detail": "backend.product.api.query_raw",
        "documentation": {}
    },
    {
        "label": "PriceSerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class PriceSerializer(ModelSerializer):\n    class Meta:\n        model = Price\n        fields = ['id','price','sale','datetime_create']\n    def create(self, validated_data):\n        price =Price.objects.create( **validated_data)\n        return price\nclass PhotoProductSerializer(ModelSerializer):\n    class Meta:\n        model = Photo_product",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "PhotoProductSerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class PhotoProductSerializer(ModelSerializer):\n    class Meta:\n        model = Photo_product\n        fields = ['id']\nclass HeartSerializer(ModelSerializer):\n    class Meta:\n        model = Heart\n        fields =['id','user_id']\nclass ProductSerializer(serializers.Serializer):\n    data = serializers.CharField()",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "HeartSerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class HeartSerializer(ModelSerializer):\n    class Meta:\n        model = Heart\n        fields =['id','user_id']\nclass ProductSerializer(serializers.Serializer):\n    data = serializers.CharField()\n    status_heart =  serializers.BooleanField()\n    description = serializers.CharField()\n    price = serializers.FloatField()\n    id = UUIDField()",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProductSerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class ProductSerializer(serializers.Serializer):\n    data = serializers.CharField()\n    status_heart =  serializers.BooleanField()\n    description = serializers.CharField()\n    price = serializers.FloatField()\n    id = UUIDField()\n    slug=serializers.CharField()\n    name = serializers.CharField()\n    sex = serializers.IntegerField()\n    sale = serializers.FloatField()",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "CategorySerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class CategorySerializer(ModelSerializer):\n    class Meta:\n        model = Category\n        fields = \"__all__\"\nclass ProductHeartSerializer(serializers.Serializer):\n    prices__price = serializers.FloatField()\n    photo_products__data = serializers.CharField()\n    name = serializers.CharField()\n    slug = serializers.CharField()\n    prices__sale = serializers.FloatField()",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "ProductHeartSerializer",
        "kind": 6,
        "importPath": "backend.product.api.serializers",
        "description": "backend.product.api.serializers",
        "peekOfCode": "class ProductHeartSerializer(serializers.Serializer):\n    prices__price = serializers.FloatField()\n    photo_products__data = serializers.CharField()\n    name = serializers.CharField()\n    slug = serializers.CharField()\n    prices__sale = serializers.FloatField()",
        "detail": "backend.product.api.serializers",
        "documentation": {}
    },
    {
        "label": "category",
        "kind": 5,
        "importPath": "backend.product.api.urls",
        "description": "backend.product.api.urls",
        "peekOfCode": "category = CategoryViewSet.as_view({\n    'get' : 'get_category'\n})\nproduct = Productviewset.as_view({\n    'get' : 'get_product',\n    #'post' : 'post_product'\n})\nheart = HeartViewSet.as_view({\n    'post' : 'post_heart'\n})",
        "detail": "backend.product.api.urls",
        "documentation": {}
    },
    {
        "label": "product",
        "kind": 5,
        "importPath": "backend.product.api.urls",
        "description": "backend.product.api.urls",
        "peekOfCode": "product = Productviewset.as_view({\n    'get' : 'get_product',\n    #'post' : 'post_product'\n})\nheart = HeartViewSet.as_view({\n    'post' : 'post_heart'\n})\nproduct_heart = ProductHeartViewSet.as_view({\n    'get' : 'get_product_heart'\n})",
        "detail": "backend.product.api.urls",
        "documentation": {}
    },
    {
        "label": "heart",
        "kind": 5,
        "importPath": "backend.product.api.urls",
        "description": "backend.product.api.urls",
        "peekOfCode": "heart = HeartViewSet.as_view({\n    'post' : 'post_heart'\n})\nproduct_heart = ProductHeartViewSet.as_view({\n    'get' : 'get_product_heart'\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [",
        "detail": "backend.product.api.urls",
        "documentation": {}
    },
    {
        "label": "product_heart",
        "kind": 5,
        "importPath": "backend.product.api.urls",
        "description": "backend.product.api.urls",
        "peekOfCode": "product_heart = ProductHeartViewSet.as_view({\n    'get' : 'get_product_heart'\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [\n    path('category/',category, name = \"get_category\"), # get categories \n    path('product/',product,name=\"get_product\"), # get all products or product with product_slug\n    path('heart/post/' , heart , name = \"post_heart\"), # like or dislike product",
        "detail": "backend.product.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.product.api.urls",
        "description": "backend.product.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('category/',category, name = \"get_category\"), # get categories \n    path('product/',product,name=\"get_product\"), # get all products or product with product_slug\n    path('heart/post/' , heart , name = \"post_heart\"), # like or dislike product\n    path('product-heart/',product_heart , name = \"get_product_heart\") # get product liked\n]",
        "detail": "backend.product.api.urls",
        "documentation": {}
    },
    {
        "label": "CategoryViewSet",
        "kind": 6,
        "importPath": "backend.product.api.views",
        "description": "backend.product.api.views",
        "peekOfCode": "class CategoryViewSet(viewsets.ModelViewSet):\n    authentication_classes = []\n    permission_classes = []\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    # ---------------------------------------------------------------------------- #\n    #                                 GET CATOGORY                                 #\n    # ---------------------------------------------------------------------------- #\n    @action(method=\"GET\", detail=False , url_path='category', url_name='get_category')\n    def get_category(self, request , *args, **kwargs):",
        "detail": "backend.product.api.views",
        "documentation": {}
    },
    {
        "label": "ProductHeartViewSet",
        "kind": 6,
        "importPath": "backend.product.api.views",
        "description": "backend.product.api.views",
        "peekOfCode": "class ProductHeartViewSet(viewsets.ViewSet):\n    serializer_class = HeartSerializer\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    @action(method=['GET'], detail = False , url_name= 'product_heart' , url_path='product_heart')\n    def get_product_heart(self , request , *args, **kwargs):\n        jwtToken = request.COOKIES.get('refresh_token')\n        refresh_token = RefreshToken(jwtToken)\n        decoded_token = refresh_token.payload\n        try:",
        "detail": "backend.product.api.views",
        "documentation": {}
    },
    {
        "label": "Productviewset",
        "kind": 6,
        "importPath": "backend.product.api.views",
        "description": "backend.product.api.views",
        "peekOfCode": "class Productviewset(viewsets.ViewSet):\n    authentication_classes = []\n    permission_classes = []\n    @action(method=[\"GET\"],detail=False,url_path=\"product\",url_name=\"get_product\")\n    def get_product(self, request,*args, **kwargs):\n        # ---------------------------------------------------------------------------- #\n        #                                   QUERY RAW                                  #\n        # ---------------------------------------------------------------------------- #\n        rawQuerySqlProductSlug = query_raw.QUERY_SQL_GET_PRODUCT_DETAIL_NOT_USER\n        rawQuerySql =  query_raw.QUERY_SQL_GET_ALL_PRODUCT_FOR_USER",
        "detail": "backend.product.api.views",
        "documentation": {}
    },
    {
        "label": "HeartViewSet",
        "kind": 6,
        "importPath": "backend.product.api.views",
        "description": "backend.product.api.views",
        "peekOfCode": "class HeartViewSet(viewsets.ModelViewSet):\n    queryset = Heart.objects.all()\n    serializer_class = HeartSerializer\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    @action(method=[\"POST\"],detail=False,url_path=\"heart\",url_name=\"post_heart\")\n    def post_heart(self, request,*args, **kwargs):\n        data_request= json.loads(request.body.decode('utf-8'))\n        jwtToken = request.COOKIES.get('refresh_token')\n        refresh_token = RefreshToken(jwtToken)",
        "detail": "backend.product.api.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.product.migrations.0001_initial",
        "description": "backend.product.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),\n                ('slug', models.CharField(max_length=50, unique=True)),",
        "detail": "backend.product.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.product.migrations.0002_alter_photo_product_data",
        "description": "backend.product.migrations.0002_alter_photo_product_data",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('product', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='photo_product',\n            name='data',\n            field=models.ImageField(upload_to='media/photos/'),\n        ),",
        "detail": "backend.product.migrations.0002_alter_photo_product_data",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "backend.product.migrations.0003_heart",
        "description": "backend.product.migrations.0003_heart",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('product', '0002_alter_photo_product_data'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Heart',\n            fields=[\n                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),",
        "detail": "backend.product.migrations.0003_heart",
        "documentation": {}
    },
    {
        "label": "ProductAdmin",
        "kind": 6,
        "importPath": "backend.product.admin",
        "description": "backend.product.admin",
        "peekOfCode": "class ProductAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'name')\nclass PriceAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'product_id' , 'price')\nclass PhotoProduceAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'product_id')\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'parent' , 'name')\nclass HeartAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'user_id' , 'product_id')",
        "detail": "backend.product.admin",
        "documentation": {}
    },
    {
        "label": "PriceAdmin",
        "kind": 6,
        "importPath": "backend.product.admin",
        "description": "backend.product.admin",
        "peekOfCode": "class PriceAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'product_id' , 'price')\nclass PhotoProduceAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'product_id')\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'parent' , 'name')\nclass HeartAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'user_id' , 'product_id')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Category,CategoryAdmin)",
        "detail": "backend.product.admin",
        "documentation": {}
    },
    {
        "label": "PhotoProduceAdmin",
        "kind": 6,
        "importPath": "backend.product.admin",
        "description": "backend.product.admin",
        "peekOfCode": "class PhotoProduceAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'product_id')\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'parent' , 'name')\nclass HeartAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'user_id' , 'product_id')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Category,CategoryAdmin)\nadmin.site.register(Price,PriceAdmin)\nadmin.site.register(Photo_product,PhotoProduceAdmin)",
        "detail": "backend.product.admin",
        "documentation": {}
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "backend.product.admin",
        "description": "backend.product.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'parent' , 'name')\nclass HeartAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'user_id' , 'product_id')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Category,CategoryAdmin)\nadmin.site.register(Price,PriceAdmin)\nadmin.site.register(Photo_product,PhotoProduceAdmin)\nadmin.site.register(Heart,HeartAdmin)\n# Register your models here.",
        "detail": "backend.product.admin",
        "documentation": {}
    },
    {
        "label": "HeartAdmin",
        "kind": 6,
        "importPath": "backend.product.admin",
        "description": "backend.product.admin",
        "peekOfCode": "class HeartAdmin(admin.ModelAdmin):\n    list_display = ('id' , 'user_id' , 'product_id')\nadmin.site.register(Product,ProductAdmin)\nadmin.site.register(Category,CategoryAdmin)\nadmin.site.register(Price,PriceAdmin)\nadmin.site.register(Photo_product,PhotoProduceAdmin)\nadmin.site.register(Heart,HeartAdmin)\n# Register your models here.",
        "detail": "backend.product.admin",
        "documentation": {}
    },
    {
        "label": "ProductConfig",
        "kind": 6,
        "importPath": "backend.product.apps",
        "description": "backend.product.apps",
        "peekOfCode": "class ProductConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'product'",
        "detail": "backend.product.apps",
        "documentation": {}
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "backend.product.models",
        "description": "backend.product.models",
        "peekOfCode": "class Category(MPTTModel):\n    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    slug = models.CharField(null=False,max_length=50,unique=True)\n    name=models.CharField(max_length=50)\n    parent = TreeForeignKey('self', on_delete=models.CASCADE, null=True, blank=True, related_name='children')\n    def __str__(self):\n        return self.name\nclass Product(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    slug = models.CharField(null=False,max_length=50)",
        "detail": "backend.product.models",
        "documentation": {}
    },
    {
        "label": "Product",
        "kind": 6,
        "importPath": "backend.product.models",
        "description": "backend.product.models",
        "peekOfCode": "class Product(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    slug = models.CharField(null=False,max_length=50)\n    name=models.CharField(max_length=50,null=False)\n    sex = models.IntegerField(null=True)\n    description=models.TextField(null=True)\n    category_id=models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    def __str__(self):\n        return self.name\nclass Price(models.Model):",
        "detail": "backend.product.models",
        "documentation": {}
    },
    {
        "label": "Price",
        "kind": 6,
        "importPath": "backend.product.models",
        "description": "backend.product.models",
        "peekOfCode": "class Price(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    price=models.FloatField(null=True)\n    sale =models.FloatField(null=True)\n    status=models.BooleanField(null=True)\n    datetime_create=models.DateTimeField(null=True)\n    price_total=models.FloatField(null=True)\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True,blank=True,related_name='prices')\n    def __str__(self):\n        return self.product_id.name",
        "detail": "backend.product.models",
        "documentation": {}
    },
    {
        "label": "Photo_product",
        "kind": 6,
        "importPath": "backend.product.models",
        "description": "backend.product.models",
        "peekOfCode": "class Photo_product(models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    data=models.ImageField(upload_to='media/photos/')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True,blank=True,related_name='photo_products')\n    fields = ['data']\nclass Heart( models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user_id = models.ForeignKey(User, on_delete=models.SET_NULL, null=True,blank=True,related_name='hearts')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True,blank=True,related_name='hearts')",
        "detail": "backend.product.models",
        "documentation": {}
    },
    {
        "label": "Heart",
        "kind": 6,
        "importPath": "backend.product.models",
        "description": "backend.product.models",
        "peekOfCode": "class Heart( models.Model):\n    id =  models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)\n    user_id = models.ForeignKey(User, on_delete=models.SET_NULL, null=True,blank=True,related_name='hearts')\n    product_id = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True,blank=True,related_name='hearts')",
        "detail": "backend.product.models",
        "documentation": {}
    },
    {
        "label": "AddressSerializer",
        "kind": 6,
        "importPath": "backend.user.api.serializers",
        "description": "backend.user.api.serializers",
        "peekOfCode": "class AddressSerializer(ModelSerializer):\n    class Meta:\n        model = Address\n        fields = ['id','address_content','status']\nclass PhoneUserSerializer(ModelSerializer):\n    class Meta:\n        model = PhoneUser\n        fields = '__all__'\nclass UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) ",
        "detail": "backend.user.api.serializers",
        "documentation": {}
    },
    {
        "label": "PhoneUserSerializer",
        "kind": 6,
        "importPath": "backend.user.api.serializers",
        "description": "backend.user.api.serializers",
        "peekOfCode": "class PhoneUserSerializer(ModelSerializer):\n    class Meta:\n        model = PhoneUser\n        fields = '__all__'\nclass UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) \n    phones = PhoneUserSerializer(many = True)\n    class Meta:\n        model = User\n        fields = ['username','email','photo','address','token_permission_infor_user','name','phones']",
        "detail": "backend.user.api.serializers",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "backend.user.api.serializers",
        "description": "backend.user.api.serializers",
        "peekOfCode": "class UserSerializer(ModelSerializer):\n    address = AddressSerializer(many= True) \n    phones = PhoneUserSerializer(many = True)\n    class Meta:\n        model = User\n        fields = ['username','email','photo','address','token_permission_infor_user','name','phones']",
        "detail": "backend.user.api.serializers",
        "documentation": {}
    },
    {
        "label": "get_infor_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "get_infor_user = InforUserViewSet.as_view({\n    'get' : 'get_infor_user'\n})\n# ---------------------------------- ADDRESS --------------------------------- #\ncreate_address_user = AddressUserViewset.as_view({\n    'post': 'create_address_user',\n})\ndelete_address_user = AddressUserViewset.as_view({\n    'post' : 'delete_address_user'\n})",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "create_address_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "create_address_user = AddressUserViewset.as_view({\n    'post': 'create_address_user',\n})\ndelete_address_user = AddressUserViewset.as_view({\n    'post' : 'delete_address_user'\n})\nupdate_address_user =  AddressUserViewset.as_view({\n    'post' : 'update_address_user' \n})\nget_address_user = AddressUserViewset.as_view({",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "delete_address_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "delete_address_user = AddressUserViewset.as_view({\n    'post' : 'delete_address_user'\n})\nupdate_address_user =  AddressUserViewset.as_view({\n    'post' : 'update_address_user' \n})\nget_address_user = AddressUserViewset.as_view({\n    'get' : 'get_address_user' \n})\n# ----------------------------------- PHONE ---------------------------------- #",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "update_address_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "update_address_user =  AddressUserViewset.as_view({\n    'post' : 'update_address_user' \n})\nget_address_user = AddressUserViewset.as_view({\n    'get' : 'get_address_user' \n})\n# ----------------------------------- PHONE ---------------------------------- #\ncreate_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'create_phone_user',\n})",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "get_address_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "get_address_user = AddressUserViewset.as_view({\n    'get' : 'get_address_user' \n})\n# ----------------------------------- PHONE ---------------------------------- #\ncreate_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'create_phone_user',\n})\ndelete_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'delete_phone_user',\n})",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "create_phone_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "create_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'create_phone_user',\n})\ndelete_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'delete_phone_user',\n})\nupdate_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'update_phone_user',\n})\nget_phone_user = PhoneUserViewSet.as_view({",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "delete_phone_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "delete_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'delete_phone_user',\n})\nupdate_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'update_phone_user',\n})\nget_phone_user = PhoneUserViewSet.as_view({\n    'get' : 'get_phone_user',\n})\n# ---------------------------------------------------------------------------- #",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "update_phone_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "update_phone_user = PhoneUserViewSet.as_view({\n    'post' : 'update_phone_user',\n})\nget_phone_user = PhoneUserViewSet.as_view({\n    'get' : 'get_phone_user',\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "get_phone_user",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "get_phone_user = PhoneUserViewSet.as_view({\n    'get' : 'get_phone_user',\n})\n# ---------------------------------------------------------------------------- #\n#                                     URLS                                     #\n# ---------------------------------------------------------------------------- #\nurlpatterns = [\n    path('get-infor-user/', get_infor_user, name = \"infor_user\"), # api get information user after login with token jwt\n    path('address-user/create/', create_address_user, name = \"create_address_user\"), # api create address of user after login with token jwt\n    path('address-user/delete/', delete_address_user, name = \"delete_address_user\"), # api delete address of user after login with token jwt",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "backend.user.api.urls",
        "description": "backend.user.api.urls",
        "peekOfCode": "urlpatterns = [\n    path('get-infor-user/', get_infor_user, name = \"infor_user\"), # api get information user after login with token jwt\n    path('address-user/create/', create_address_user, name = \"create_address_user\"), # api create address of user after login with token jwt\n    path('address-user/delete/', delete_address_user, name = \"delete_address_user\"), # api delete address of user after login with token jwt\n    path('address-user/update/',update_address_user, name = \"update_address_user\"),# api update address of user after login with token jwt\n    path('address-user/', get_address_user, name = \"get_phone_user\"), # api get address of user after login with token jwt\n    path('phone-user/create/', create_phone_user, name = \"create_phone_user\"), # api create phone of user after login with token jwt\n    path('phone-user/delete/', delete_phone_user, name = \"delete_phone_user\"),# api delete phone of user after login with token jwt\n    path('phone-user/', get_phone_user, name = \"get_phone_user\"),# api get phone of user after login with token jwt\n]",
        "detail": "backend.user.api.urls",
        "documentation": {}
    },
    {
        "label": "InforUserViewSe",
        "kind": 6,
        "importPath": "backend.user.api.views",
        "description": "backend.user.api.views",
        "peekOfCode": "class InforUserViewSet (viewsets.ModelViewSet):\n    queryset = User.objects.all()\n    serializer_class = UserSerializer\n    authentication_classes = []\n    permission_classes = []\n    # ---------------------------------------------------------------------------- #\n    #                                GET INFOR USER                                #\n    # ---------------------------------------------------------------------------- #\n    @action(methods = [\"GET\"], detail = False, url_path = \"get_infor_user\", url_name = \"get_infor_user\")\n    def get_infor_user(self,request,*args, **kwargs):",
        "detail": "backend.user.api.views",
        "documentation": {}
    },
    {
        "label": "PhoneUserViewSet",
        "kind": 6,
        "importPath": "backend.user.api.views",
        "description": "backend.user.api.views",
        "peekOfCode": "class PhoneUserViewSet(viewsets.ModelViewSet):\n    queryset = PhoneUser.objects.all()\n    serializer_class = PhoneUserSerializer\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    # ---------------------------------------------------------------------------- #\n    #                          METHOD GET ADDRESS FOR USER                         #\n    # ---------------------------------------------------------------------------- #\n    @action(method = ['GET'] , detail= False , url_path='get_phone_user' , url_name= 'get_phone_user')\n    def get_phone_user(self , request ,  *args, **kwargs):",
        "detail": "backend.user.api.views",
        "documentation": {}
    },
    {
        "label": "AddressUserViewse",
        "kind": 6,
        "importPath": "backend.user.api.views",
        "description": "backend.user.api.views",
        "peekOfCode": "class AddressUserViewset (viewsets.ModelViewSet):\n    queryset = Address.objects.all()\n    serializer_class = AddressSerializer\n    authentication_classes = [JWTAuthentication]\n    permission_classes = [IsAuthenticated]\n    # ---------------------------------------------------------------------------- #\n    #                          METHOD GET ADDRESS FOR USER                         #\n    # ---------------------------------------------------------------------------- #\n    @action(method = ['GET'] , detail= False , url_path='get_address_user' , url_name= 'get_address_user')\n    def get_address_user(self , request ,  *args, **kwargs):",
        "detail": "backend.user.api.views",
        "documentation": {}
    },
    {
        "label": "UserConfig",
        "kind": 6,
        "importPath": "backend.user.apps",
        "description": "backend.user.apps",
        "peekOfCode": "class UserConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'user'",
        "detail": "backend.user.apps",
        "documentation": {}
    },
    {
        "label": "VitualSupportConfig",
        "kind": 6,
        "importPath": "backend.vitual_support.apps",
        "description": "backend.vitual_support.apps",
        "peekOfCode": "class VitualSupportConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'vitual_support'",
        "detail": "backend.vitual_support.apps",
        "documentation": {}
    },
    {
        "label": "LogsSearchProduct",
        "kind": 6,
        "importPath": "backend.vitual_support.models",
        "description": "backend.vitual_support.models",
        "peekOfCode": "class LogsSearchProduct(models.Model):\n    pass",
        "detail": "backend.vitual_support.models",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "backend.manage",
        "description": "backend.manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'backend.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "backend.manage",
        "documentation": {}
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class Target:\n    \"\"\"Holds information about a particular target:\n  deps: set of Targets this Target depends upon. This is not recursive, only the\n    direct dependent Targets.\n  match_status: one of the MatchStatus values.\n  back_deps: set of Targets that have a dependency on this Target.\n  visited: used during iteration to indicate whether we've visited this target.\n    This is used for two iterations, once in building the set of Targets and\n    again in _GetBuildTargets().\n  name: fully qualified name of the target.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class Config:\n    \"\"\"Details what we're looking for\n  files: set of files to search for\n  targets: see file description for details.\"\"\"\n    def __init__(self):\n        self.files = []\n        self.targets = set()\n        self.additional_compile_target_names = set()\n        self.test_target_names = set()\n    def Init(self, params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "TargetCalculator",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "class TargetCalculator:\n    \"\"\"Calculates the matching test_targets and matching compile_targets.\"\"\"\n    def __init__(\n        self,\n        files,\n        additional_compile_target_names,\n        test_target_names,\n        data,\n        target_list,\n        target_dicts,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n    elif flavor == \"win\":\n        default_variables.setdefault(\"OS\", \"win\")\n        gyp.msvs_emulation.CalculateCommonVariables(default_variables, params)\n    else:\n        operating_system = flavor",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    \"\"\"Called by gyp as the final stage. Outputs results.\"\"\"\n    config = Config()\n    try:\n        config.Init(params)\n        if not config.files:\n            raise Exception(\n                \"Must specify files to analyze via config_path generator \" \"flag\"\n            )\n        toplevel_dir = _ToGypPath(os.path.abspath(params[\"options\"].toplevel_dir))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "files = [\"b.cc\", \"d.cc\"] (B depends upon b.cc and D depends upon d.cc), then\nthe following is output:\n|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "|compile_targets|",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "|compile_targets| = [\"B\"] B must built as it depends upon the changed file b.cc\nand the supplied target A depends upon it. A is not output as a build_target\nas it is of type none with no rules and actions.\n|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "|test_targets|",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "|test_targets| = [\"B\"] B directly depends upon the change file b.cc.\nEven though the file d.cc, which D depends upon, has changed D is not output\nas it was not supplied by way of |additional_compile_targets| or |test_targets|.\nIf the generator flag analyzer_output_path is specified, output is written\nthere. Otherwise output is written to stdout.\nIn Gyp the \"all\" target is shorthand for the root targets in the files passed\nto gyp. For example, if file \"a.gyp\" contains targets \"a1\" and\n\"a2\", and file \"b.gyp\" contains targets \"b1\" and \"b2\" and \"a2\" has a dependency\non \"b2\" and gyp is supplied \"a.gyp\" then \"all\" consists of \"a1\" and \"a2\".\nNotice that \"b1\" and \"b2\" are not in the \"all\" target as \"b.gyp\" was not",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "debug",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "debug = False\nfound_dependency_string = \"Found dependency\"\nno_dependency_string = \"No dependencies\"\n# Status when it should be assumed that everything has changed.\nall_changed_string = \"Found dependency (all)\"\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "found_dependency_string",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "found_dependency_string = \"Found dependency\"\nno_dependency_string = \"No dependencies\"\n# Status when it should be assumed that everything has changed.\nall_changed_string = \"Found dependency (all)\"\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "no_dependency_string",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "no_dependency_string = \"No dependencies\"\n# Status when it should be assumed that everything has changed.\nall_changed_string = \"Found dependency (all)\"\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "all_changed_string",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "all_changed_string = \"Found dependency (all)\"\n# MatchStatus is used indicate if and how a target depends upon the supplied\n# sources.\n# The target's sources contain one of the supplied paths.\nMATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "MATCH_STATUS_MATCHES",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_MATCHES = 1\n# The target has a dependency on another target that contains one of the\n# supplied paths.\nMATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "MATCH_STATUS_MATCHES_BY_DEPENDENCY",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_MATCHES_BY_DEPENDENCY = 2\n# The target's sources weren't in the supplied paths and none of the target's\n# dependencies depend upon a target that matched.\nMATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "MATCH_STATUS_DOESNT_MATCH",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_DOESNT_MATCH = 3\n# The target doesn't contain the source, but the dependent targets have not yet\n# been visited to determine a more specific status yet.\nMATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "MATCH_STATUS_TBD",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "MATCH_STATUS_TBD = 4\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:\n    generator_default_variables[dirname] = \"!!!\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "peekOfCode": "generator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:\n    generator_default_variables[dirname] = \"!!!\"\nfor unused in [",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.analyzer",
        "documentation": {}
    },
    {
        "label": "AndroidMkWriter",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "class AndroidMkWriter:\n    \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"\n    def __init__(self, android_top_dir):\n        self.android_top_dir = android_top_dir\n    def Write(\n        self,\n        qualified_target,\n        relative_target,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "IsCPPExtension",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def IsCPPExtension(ext):\n    return make.COMPILABLE_EXTENSIONS.get(ext) == \"cxx\"\ndef Sourceify(path):\n    \"\"\"Convert a path to its source directory form. The Android backend does not\n    support options.generator_output, so this function is a noop.\"\"\"\n    return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "Sourceify",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def Sourceify(path):\n    \"\"\"Convert a path to its source directory form. The Android backend does not\n    support options.generator_output, so this function is a noop.\"\"\"\n    return path\n# Map from qualified target to path to output.\n# For Android, the target of these maps is a tuple ('static', 'modulename'),\n# ('dynamic', 'modulename'), or ('path', 'some/path') instead of a string,\n# since we link by module.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    # The android backend only supports the default configuration.\n    options = params[\"options\"]\n    makefile = os.path.abspath(os.path.join(options.toplevel_dir, \"GypAndroid.mk\"))\n    env = dict(os.environ)\n    env[\"ONE_SHOT_MAKEFILE\"] = makefile\n    arguments = [\"make\", \"-C\", os.environ[\"ANDROID_BUILD_TOP\"], \"gyp_all_modules\"]\n    print(\"Building: %s\" % arguments)\n    subprocess.check_call(arguments, env=env)\ndef GenerateOutput(target_list, target_dicts, data, params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    limit_to_target_all = generator_flags.get(\"limit_to_target_all\", False)\n    write_alias_targets = generator_flags.get(\"write_alias_targets\", True)\n    sdk_version = generator_flags.get(\"aosp_sdk_version\", 0)\n    android_top_dir = os.environ.get(\"ANDROID_BUILD_TOP\")\n    assert android_top_dir, \"$ANDROID_BUILD_TOP not set; you need to run lunch.\"\n    def CalculateMakefilePath(build_file, base_name):\n        \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_default_variables = {\n    \"OS\": \"android\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_SUFFIX\": \".so\",\n    \"INTERMEDIATE_DIR\": \"$(gyp_intermediate_dir)\",\n    \"SHARED_INTERMEDIATE_DIR\": \"$(gyp_shared_intermediate_dir)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# Generator-specific gyp specs.\ngenerator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    \"android_unmangled_name\",\n    # Map of android build system variables to set.\n    \"aosp_build_settings\",\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n    # Boolean to declare that this target does not want its name mangled.\n    \"android_unmangled_name\",\n    # Map of android build system variables to set.\n    \"aosp_build_settings\",\n]\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "generator_extra_sources_for_rules = []\nALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "ALL_MODULES_FOOTER",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "ALL_MODULES_FOOTER = \"\"\"\\\n# \"gyp_all_modules\" is a concatenation of the \"gyp_all_modules\" targets from\n# all the included sub-makefiles. This is just here to clarify.\ngyp_all_modules:\n\"\"\"\nheader = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "header = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Map gyp target types to Android module classes.\nMODULE_CLASSES = {\n    \"static_library\": \"STATIC_LIBRARIES\",\n    \"shared_library\": \"SHARED_LIBRARIES\",\n    \"executable\": \"EXECUTABLES\",\n}\ndef IsCPPExtension(ext):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "MODULE_CLASSES",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "MODULE_CLASSES = {\n    \"static_library\": \"STATIC_LIBRARIES\",\n    \"shared_library\": \"SHARED_LIBRARIES\",\n    \"executable\": \"EXECUTABLES\",\n}\ndef IsCPPExtension(ext):\n    return make.COMPILABLE_EXTENSIONS.get(ext) == \"cxx\"\ndef Sourceify(path):\n    \"\"\"Convert a path to its source directory form. The Android backend does not\n    support options.generator_output, so this function is a noop.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "target_outputs",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "target_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass AndroidMkWriter:\n    \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "target_link_deps",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "peekOfCode": "target_link_deps = {}\nclass AndroidMkWriter:\n    \"\"\"AndroidMkWriter packages up the writing of one target-specific Android.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"\n    def __init__(self, android_top_dir):\n        self.android_top_dir = android_top_dir\n    def Write(\n        self,\n        qualified_target,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.android",
        "documentation": {}
    },
    {
        "label": "CMakeTargetType",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "class CMakeTargetType:\n    def __init__(self, command, modifier, property_modifier):\n        self.command = command\n        self.modifier = modifier\n        self.property_modifier = property_modifier\ncmake_target_type_from_gyp_target_type = {\n    \"executable\": CMakeTargetType(\"add_executable\", None, \"RUNTIME\"),\n    \"static_library\": CMakeTargetType(\"add_library\", \"STATIC\", \"ARCHIVE\"),\n    \"shared_library\": CMakeTargetType(\"add_library\", \"SHARED\", \"LIBRARY\"),\n    \"loadable_module\": CMakeTargetType(\"add_library\", \"MODULE\", \"LIBRARY\"),",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CMakeNamer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "class CMakeNamer:\n    \"\"\"Converts Gyp target names into CMake target names.\n  CMake requires that target names be globally unique. One way to ensure\n  this is to fully qualify the names of the targets. Unfortunately, this\n  ends up with all targets looking like \"chrome_chrome_gyp_chrome\" instead\n  of just \"chrome\". If this generator were only interested in building, it\n  would be possible to fully qualify all target names, then create\n  unqualified target names which depend on all qualified targets which\n  should have had that name. This is more or less what the 'make' generator\n  does with aliases. However, one goal of this generator is to create CMake",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "RemovePrefix",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def RemovePrefix(a, prefix):\n    \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"\n    return a[len(prefix) :] if a.startswith(prefix) else a\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\ndef Compilable(filename):\n    \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n    return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\ndef Compilable(filename):\n    \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n    return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n    \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n    return filename.endswith(\".o\")\ndef NormjoinPathForceCMakeSource(base_path, rel_path):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "Compilable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def Compilable(filename):\n    \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n    return any(filename.endswith(e) for e in COMPILABLE_EXTENSIONS)\ndef Linkable(filename):\n    \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n    return filename.endswith(\".o\")\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n    \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "Linkable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def Linkable(filename):\n    \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n    return filename.endswith(\".o\")\ndef NormjoinPathForceCMakeSource(base_path, rel_path):\n    \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "NormjoinPathForceCMakeSource",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinPathForceCMakeSource(base_path, rel_path):\n    \"\"\"Resolves rel_path against base_path and returns the result.\n  If rel_path is an absolute path it is returned unchanged.\n  Otherwise it is resolved against base_path and normalized.\n  If the result is a relative path, it is forced to be relative to the\n  CMakeLists.txt.\n  \"\"\"\n    if os.path.isabs(rel_path):\n        return rel_path\n    if any([rel_path.startswith(var) for var in FULL_PATH_VARS]):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "NormjoinPath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinPath(base_path, rel_path):\n    \"\"\"Resolves rel_path against base_path and returns the result.\n  TODO: what is this really used for?\n  If rel_path begins with '$' it is returned unchanged.\n  Otherwise it is resolved against base_path if relative, then normalized.\n  \"\"\"\n    if rel_path.startswith(\"$\") and not rel_path.startswith(\"${configuration}\"):\n        return rel_path\n    return os.path.normpath(os.path.join(base_path, rel_path))\ndef CMakeStringEscape(a):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CMakeStringEscape",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CMakeStringEscape(a):\n    \"\"\"Escapes the string 'a' for use inside a CMake string.\n  This means escaping\n  '\\' otherwise it may be seen as modifying the next character\n  '\"' otherwise it will end the string\n  ';' otherwise the string becomes a list\n  The following do not need to be escaped\n  '#' when the lexer is in string state, this does not start a comment\n  The following are yet unknown\n  '$' generator variables (like ${obj}) must not be escaped,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "SetFileProperty",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetFileProperty(output, source_name, property_name, values, sep):\n    \"\"\"Given a set of source file, sets the given property on them.\"\"\"\n    output.write(\"set_source_files_properties(\")\n    output.write(source_name)\n    output.write(\" PROPERTIES \")\n    output.write(property_name)\n    output.write(' \"')\n    for value in values:\n        output.write(CMakeStringEscape(value))\n        output.write(sep)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "SetFilesProperty",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetFilesProperty(output, variable, property_name, values, sep):\n    \"\"\"Given a set of source files, sets the given property on them.\"\"\"\n    output.write(\"set_source_files_properties(\")\n    WriteVariable(output, variable)\n    output.write(\" PROPERTIES \")\n    output.write(property_name)\n    output.write(' \"')\n    for value in values:\n        output.write(CMakeStringEscape(value))\n        output.write(sep)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "SetTargetProperty",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetTargetProperty(output, target_name, property_name, values, sep=\"\"):\n    \"\"\"Given a target, sets the given property.\"\"\"\n    output.write(\"set_target_properties(\")\n    output.write(target_name)\n    output.write(\" PROPERTIES \")\n    output.write(property_name)\n    output.write(' \"')\n    for value in values:\n        output.write(CMakeStringEscape(value))\n        output.write(sep)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "SetVariable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetVariable(output, variable_name, value):\n    \"\"\"Sets a CMake variable.\"\"\"\n    output.write(\"set(\")\n    output.write(variable_name)\n    output.write(' \"')\n    output.write(CMakeStringEscape(value))\n    output.write('\")\\n')\ndef SetVariableList(output, variable_name, values):\n    \"\"\"Sets a CMake variable to a list.\"\"\"\n    if not values:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "SetVariableList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def SetVariableList(output, variable_name, values):\n    \"\"\"Sets a CMake variable to a list.\"\"\"\n    if not values:\n        return SetVariable(output, variable_name, \"\")\n    if len(values) == 1:\n        return SetVariable(output, variable_name, values[0])\n    output.write(\"list(APPEND \")\n    output.write(variable_name)\n    output.write('\\n  \"')\n    output.write('\"\\n  \"'.join([CMakeStringEscape(value) for value in values]))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "UnsetVariable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def UnsetVariable(output, variable_name):\n    \"\"\"Unsets a CMake variable.\"\"\"\n    output.write(\"unset(\")\n    output.write(variable_name)\n    output.write(\")\\n\")\ndef WriteVariable(output, variable_name, prepend=None):\n    if prepend:\n        output.write(prepend)\n    output.write(\"${\")\n    output.write(variable_name)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "WriteVariable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteVariable(output, variable_name, prepend=None):\n    if prepend:\n        output.write(prepend)\n    output.write(\"${\")\n    output.write(variable_name)\n    output.write(\"}\")\nclass CMakeTargetType:\n    def __init__(self, command, modifier, property_modifier):\n        self.command = command\n        self.modifier = modifier",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "StringToCMakeTargetName",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def StringToCMakeTargetName(a):\n    \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.\n  Invalid for cmake: ' ', '/', '(', ')', '\"'\n  Invalid for make: ':'\n  Invalid for unknown reasons but cause failures: '.'\n  \"\"\"\n    return a.translate(_maketrans(' /():.\"', \"_______\"))\ndef WriteActions(target_name, actions, extra_sources, extra_deps, path_to_gyp, output):\n    \"\"\"Write CMake for the 'actions' in the target.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "WriteActions",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteActions(target_name, actions, extra_sources, extra_deps, path_to_gyp, output):\n    \"\"\"Write CMake for the 'actions' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "NormjoinRulePathForceCMakeSource",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def NormjoinRulePathForceCMakeSource(base_path, rel_path, rule_source):\n    if rel_path.startswith((\"${RULE_INPUT_PATH}\", \"${RULE_INPUT_DIRNAME}\")):\n        if any([rule_source.startswith(var) for var in FULL_PATH_VARS]):\n            return rel_path\n    return NormjoinPathForceCMakeSource(base_path, rel_path)\ndef WriteRules(target_name, rules, extra_sources, extra_deps, path_to_gyp, output):\n    \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "WriteRules",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteRules(target_name, rules, extra_sources, extra_deps, path_to_gyp, output):\n    \"\"\"Write CMake for the 'rules' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_sources: [(<cmake_src>, <src>)] to append with generated source files.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "WriteCopies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteCopies(target_name, copies, extra_deps, path_to_gyp, output):\n    \"\"\"Write CMake for the 'copies' in the target.\n  Args:\n    target_name: the name of the CMake target being generated.\n    actions: the Gyp 'actions' dict for this target.\n    extra_deps: [<cmake_taget>] to append with generated targets.\n    path_to_gyp: relative path from CMakeLists.txt being generated to\n        the Gyp file in which the target being generated is defined.\n  \"\"\"\n    copy_name = target_name + \"__copies\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CreateCMakeTargetBaseName",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CreateCMakeTargetBaseName(qualified_target):\n    \"\"\"This is the name we would like the target to have.\"\"\"\n    _, gyp_target_name, gyp_target_toolset = gyp.common.ParseQualifiedTarget(\n        qualified_target\n    )\n    cmake_target_base_name = gyp_target_name\n    if gyp_target_toolset and gyp_target_toolset != \"target\":\n        cmake_target_base_name += \"_\" + gyp_target_toolset\n    return StringToCMakeTargetName(cmake_target_base_name)\ndef CreateCMakeTargetFullName(qualified_target):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CreateCMakeTargetFullName",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CreateCMakeTargetFullName(qualified_target):\n    \"\"\"An unambiguous name for the target.\"\"\"\n    gyp_file, gyp_target_name, gyp_target_toolset = gyp.common.ParseQualifiedTarget(\n        qualified_target\n    )\n    cmake_target_full_name = gyp_file + \":\" + gyp_target_name\n    if gyp_target_toolset and gyp_target_toolset != \"target\":\n        cmake_target_full_name += \"_\" + gyp_target_toolset\n    return StringToCMakeTargetName(cmake_target_full_name)\nclass CMakeNamer:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "WriteTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def WriteTarget(\n    namer,\n    qualified_target,\n    target_dicts,\n    build_dir,\n    config_to_use,\n    options,\n    generator_flags,\n    all_qualified_targets,\n    flavor,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_to_use):\n    options = params[\"options\"]\n    generator_flags = params[\"generator_flags\"]\n    flavor = gyp.common.GetFlavor(params)\n    # generator_dir: relative path from pwd to where make puts build files.\n    # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n    # Each Gyp configuration creates a different CMakeLists.txt file\n    # to avoid incompatibilities between Gyp and CMake configurations.\n    generator_dir = os.path.relpath(options.generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    generator_flags = params[\"generator_flags\"]\n    # generator_dir: relative path from pwd to where make puts build files.\n    # Makes migrating from make to cmake easier, cmake doesn't put anything here.\n    generator_dir = os.path.relpath(options.generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = generator_flags.get(\"output_dir\", \"out\")\n    for config_name in configurations:\n        # build_dir: relative path from source root to our output files.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "CallGenerateOutputForConfig",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def CallGenerateOutputForConfig(arglist):\n    # Ignore the interrupt signal so that the parent process catches it and\n    # kills all multiprocessing children.\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n    target_list, target_dicts, data, params, config_name = arglist\n    GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n        config_names = target_dicts[target_list[0]][\"configurations\"]\n        if params[\"parallel\"]:\n            try:\n                pool = multiprocessing.Pool(len(config_names))\n                arglists = []",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "_maketrans",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "_maketrans = str.maketrans\ngenerator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_SUFFIX\": \".so\",\n    \"SHARED_LIB_DIR\": \"${builddir}/lib.${TOOLSET}\",\n    \"LIB_DIR\": \"${obj}.${TOOLSET}\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_SUFFIX\": \".so\",\n    \"SHARED_LIB_DIR\": \"${builddir}/lib.${TOOLSET}\",\n    \"LIB_DIR\": \"${obj}.${TOOLSET}\",\n    \"INTERMEDIATE_DIR\": \"${obj}.${TOOLSET}/${TARGET}/geni\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "FULL_PATH_VARS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "FULL_PATH_VARS = (\"${CMAKE_CURRENT_LIST_DIR}\", \"${builddir}\", \"${obj}\")\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"s\",  # cc\n    \".S\": \"s\",  # cc",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"s\",  # cc\n    \".S\": \"s\",  # cc\n}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = True\nCOMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"s\",  # cc\n    \".S\": \"s\",  # cc\n}\ndef RemovePrefix(a, prefix):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "COMPILABLE_EXTENSIONS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "COMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"s\",  # cc\n    \".S\": \"s\",  # cc\n}\ndef RemovePrefix(a, prefix):\n    \"\"\"Returns 'a' without 'prefix' if it starts with 'prefix'.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "cmake_target_type_from_gyp_target_type",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "peekOfCode": "cmake_target_type_from_gyp_target_type = {\n    \"executable\": CMakeTargetType(\"add_executable\", None, \"RUNTIME\"),\n    \"static_library\": CMakeTargetType(\"add_library\", \"STATIC\", \"ARCHIVE\"),\n    \"shared_library\": CMakeTargetType(\"add_library\", \"SHARED\", \"LIBRARY\"),\n    \"loadable_module\": CMakeTargetType(\"add_library\", \"MODULE\", \"LIBRARY\"),\n    \"none\": CMakeTargetType(\"add_custom_target\", \"SOURCES\", None),\n}\ndef StringToCMakeTargetName(a):\n    \"\"\"Converts the given string 'a' to a valid CMake target name.\n  All invalid characters are replaced by '_'.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.cmake",
        "documentation": {}
    },
    {
        "label": "IsMac",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def IsMac(params):\n    return \"mac\" == gyp.common.GetFlavor(params)\ndef CalculateVariables(default_variables, params):\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n            cflags = xcode_settings.GetCflags(configuration_name)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\ndef AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n            cflags = xcode_settings.GetCflags(configuration_name)\n            cflags_c = xcode_settings.GetCflagsC(configuration_name)\n            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "AddCommandsForTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def AddCommandsForTarget(cwd, target, params, per_config_commands):\n    output_dir = params[\"generator_flags\"].get(\"output_dir\", \"out\")\n    for configuration_name, configuration in target[\"configurations\"].items():\n        if IsMac(params):\n            xcode_settings = gyp.xcode_emulation.XcodeSettings(target)\n            cflags = xcode_settings.GetCflags(configuration_name)\n            cflags_c = xcode_settings.GetCflagsC(configuration_name)\n            cflags_cc = xcode_settings.GetCflagsCC(configuration_name)\n        else:\n            cflags = configuration.get(\"cflags\", [])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    per_config_commands = {}\n    for qualified_target, target in target_dicts.items():\n        build_file, target_name, toolset = gyp.common.ParseQualifiedTarget(\n            qualified_target\n        )\n        if IsMac(params):\n            settings = data[build_file]\n            gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(settings, target)\n        cwd = os.path.dirname(build_file)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    pass",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_filelist_paths = None\ngenerator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",\n    \"PRODUCT_DIR\": \"$(builddir)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",\n    \"PRODUCT_DIR\": \"$(builddir)\",\n    \"RULE_INPUT_DIRNAME\": \"%(INPUT_DIRNAME)s\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_wants_sorted_dependencies",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_wants_sorted_dependencies = False\n# Lifted from make.py.  The actual values don't matter much.\ngenerator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",\n    \"PRODUCT_DIR\": \"$(builddir)\",\n    \"RULE_INPUT_DIRNAME\": \"%(INPUT_DIRNAME)s\",\n    \"RULE_INPUT_EXT\": \"$(suffix $<)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "peekOfCode": "generator_default_variables = {\n    \"CONFIGURATION_NAME\": \"$(BUILDTYPE)\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",\n    \"PRODUCT_DIR\": \"$(builddir)\",\n    \"RULE_INPUT_DIRNAME\": \"%(INPUT_DIRNAME)s\",\n    \"RULE_INPUT_EXT\": \"$(suffix $<)\",\n    \"RULE_INPUT_NAME\": \"$(notdir $<)\",\n    \"RULE_INPUT_PATH\": \"$(abspath $<)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.compile_commands_json",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    default_variables.setdefault(\"OS\", gyp.common.GetFlavor(params))\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":\n        gyp.msvs_emulation.CalculateCommonVariables(default_variables, params)\ndef CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\n    toplevel = params[\"options\"].toplevel_dir\n    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    # Map of target -> list of targets it depends on.\n    edges = {}\n    # Queue of targets to visit.\n    targets_to_visit = target_list[:]\n    while len(targets_to_visit) > 0:\n        target = targets_to_visit.pop()\n        if target in edges:\n            continue\n        edges[target] = []",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_supports_multiple_toolsets = True\ngenerator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {}\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_filelist_paths = {}\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_filelist_paths = {}\ngenerator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:\n    # Some gyp steps fail if these are empty(!).",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "peekOfCode": "generator_default_variables = {}\nfor dirname in [\n    \"INTERMEDIATE_DIR\",\n    \"SHARED_INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"LIB_DIR\",\n    \"SHARED_LIB_DIR\",\n]:\n    # Some gyp steps fail if these are empty(!).\n    generator_default_variables[dirname] = \"dir\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.dump_dependency_json",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    flavor = gyp.common.GetFlavor(params)\n    default_variables.setdefault(\"OS\", flavor)\n    if flavor == \"win\":\n        gyp.msvs_emulation.CalculateCommonVariables(default_variables, params)\ndef CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n  gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    if generator_flags.get(\"adjust_static_libraries\", False):\n        global generator_wants_static_library_dependencies_adjusted\n        generator_wants_static_library_dependencies_adjusted = True\ndef GetAllIncludeDirectories(\n    target_list,\n    target_dicts,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GetAllIncludeDirectories",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetAllIncludeDirectories(\n    target_list,\n    target_dicts,\n    shared_intermediate_dirs,\n    config_name,\n    params,\n    compiler_path,\n):\n    \"\"\"Calculate the set of include directories to be used.\n  Returns:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GetCompilerPath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetCompilerPath(target_list, data, options):\n    \"\"\"Determine a command that can be used to invoke the compiler.\n  Returns:\n    If this is a gyp project that has explicit make settings, try to determine\n    the compiler from that.  Otherwise, see if a compiler was specified via the\n    CC_target environment variable.\n  \"\"\"\n    # First, see if the compiler is configured in make's settings.\n    build_file, _, _ = gyp.common.ParseQualifiedTarget(target_list[0])\n    make_global_settings_dict = data[build_file].get(\"make_global_settings\", {})",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GetAllDefines",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetAllDefines(target_list, target_dicts, data, config_name, params, compiler_path):\n    \"\"\"Calculate the defines for a project.\n  Returns:\n    A dict that includes explicit defines declared in gyp files along with all\n    of the default defines that the compiler uses.\n  \"\"\"\n    # Get defines declared in the gyp files.\n    all_defines = {}\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"win\":",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "WriteIncludePaths",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def WriteIncludePaths(out, eclipse_langs, include_dirs):\n    \"\"\"Write the includes section of a CDT settings export file.\"\"\"\n    out.write(\n        '  <section name=\"org.eclipse.cdt.internal.ui.wizards.'\n        'settingswizards.IncludePaths\">\\n'\n    )\n    out.write('    <language name=\"holder for library settings\"></language>\\n')\n    for lang in eclipse_langs:\n        out.write('    <language name=\"%s\">\\n' % lang)\n        for include_dir in include_dirs:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "WriteMacros",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def WriteMacros(out, eclipse_langs, defines):\n    \"\"\"Write the macros section of a CDT settings export file.\"\"\"\n    out.write(\n        '  <section name=\"org.eclipse.cdt.internal.ui.wizards.'\n        'settingswizards.Macros\">\\n'\n    )\n    out.write('    <language name=\"holder for library settings\"></language>\\n')\n    for lang in eclipse_langs:\n        out.write('    <language name=\"%s\">\\n' % lang)\n        for key in sorted(defines):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n    build_dir = os.path.join(generator_flags.get(\"output_dir\", \"out\"), config_name)\n    toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n    # Ninja uses out/Debug/gen while make uses out/Debug/obj/gen as the\n    # SHARED_INTERMEDIATE_DIR. Include both possible locations.\n    shared_intermediate_dirs = [",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GenerateCdtSettingsFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateCdtSettingsFile(\n    target_list,\n    target_dicts,\n    data,\n    params,\n    config_name,\n    out_name,\n    options,\n    shared_intermediate_dirs,\n):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GenerateClasspathFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateClasspathFile(\n    target_list, target_dicts, toplevel_dir, toplevel_build, out_name\n):\n    \"\"\"Generates a classpath file suitable for symbol navigation and code\n  completion of Java code (such as in Android projects) by finding all\n  .java and .jar files used as action inputs.\"\"\"\n    gyp.common.EnsureDirExists(out_name)\n    result = ET.Element(\"classpath\")\n    def AddElements(kind, paths):\n        # First, we need to normalize the paths so they are all relative to the",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GetJavaJars",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetJavaJars(target_list, target_dicts, toplevel_dir):\n    \"\"\"Generates a sequence of all .jars used as inputs.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".jar\" and not input_.startswith(\"$\"):\n                    if os.path.isabs(input_):\n                        yield input_\n                    else:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GetJavaSourceDirs",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GetJavaSourceDirs(target_list, target_dicts, toplevel_dir):\n    \"\"\"Generates a sequence of all likely java package root directories.\"\"\"\n    for target_name in target_list:\n        target = target_dicts[target_name]\n        for action in target.get(\"actions\", []):\n            for input_ in action[\"inputs\"]:\n                if os.path.splitext(input_)[1] == \".java\" and not input_.startswith(\n                    \"$\"\n                ):\n                    dir_ = os.path.dirname(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    \"\"\"Generate an XML settings file that can be imported into a CDT project.\"\"\"\n    if params[\"options\"].generator_output:\n        raise NotImplementedError(\"--generator_output not implemented for eclipse\")\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if user_config:\n        GenerateOutputForConfig(target_list, target_dicts, data, params, user_config)\n    else:\n        config_names = target_dicts[target_list[0]][\"configurations\"]\n        for config_name in config_names:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "generator_wants_static_library_dependencies_adjusted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_wants_static_library_dependencies_adjusted = False\ngenerator_default_variables = {}\nfor dirname in [\"INTERMEDIATE_DIR\", \"PRODUCT_DIR\", \"LIB_DIR\", \"SHARED_LIB_DIR\"]:\n    # Some gyp steps fail if these are empty(!), so we convert them to variables\n    generator_default_variables[dirname] = \"$\" + dirname\nfor unused in [\n    \"RULE_INPUT_PATH\",\n    \"RULE_INPUT_ROOT\",\n    \"RULE_INPUT_NAME\",\n    \"RULE_INPUT_DIRNAME\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_default_variables = {}\nfor dirname in [\"INTERMEDIATE_DIR\", \"PRODUCT_DIR\", \"LIB_DIR\", \"SHARED_LIB_DIR\"]:\n    # Some gyp steps fail if these are empty(!), so we convert them to variables\n    generator_default_variables[dirname] = \"$\" + dirname\nfor unused in [\n    \"RULE_INPUT_PATH\",\n    \"RULE_INPUT_ROOT\",\n    \"RULE_INPUT_NAME\",\n    \"RULE_INPUT_DIRNAME\",\n    \"RULE_INPUT_EXT\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "generator_default_variables[\"SHARED_INTERMEDIATE_DIR\"]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "peekOfCode": "generator_default_variables[\"SHARED_INTERMEDIATE_DIR\"] = \"$SHARED_INTERMEDIATE_DIR\"\ndef CalculateVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    for key, val in generator_flags.items():\n        default_variables.setdefault(key, val)\n    flavor = gyp.common.GetFlavor(params)\n    default_variables.setdefault(\"OS\", flavor)\n    if flavor == \"win\":\n        gyp.msvs_emulation.CalculateCommonVariables(default_variables, params)\ndef CalculateGeneratorInputInfo(params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.eclipse",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    output_files = {}\n    for qualified_target in target_list:\n        [input_file, target] = gyp.common.ParseQualifiedTarget(qualified_target)[0:2]\n        if input_file[-4:] != \".gyp\":\n            continue\n        input_file_stem = input_file[:-4]\n        output_file = input_file_stem + params[\"options\"].suffix + \".gypd\"\n        output_files[output_file] = output_files.get(output_file, input_file)\n    for output_file, input_file in output_files.items():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {}
    },
    {
        "label": "_generator_identity_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "_generator_identity_variables = [\n    \"CONFIGURATION_NAME\",\n    \"EXECUTABLE_PREFIX\",\n    \"EXECUTABLE_SUFFIX\",\n    \"INTERMEDIATE_DIR\",\n    \"LIB_DIR\",\n    \"PRODUCT_DIR\",\n    \"RULE_INPUT_ROOT\",\n    \"RULE_INPUT_DIRNAME\",\n    \"RULE_INPUT_EXT\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "generator_default_variables = {}\n# gypd supports multiple toolsets\ngenerator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n    generator_default_variables[v] = \"<(%s)\" % v\ndef GenerateOutput(target_list, target_dicts, data, params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# TODO(mark): This always uses <, which isn't right.  The input module should\n# notify the generator to tell it which phase it is operating in, and this\n# module should use < for the early phase and then switch to > for the late\n# phase.  Bonus points for carrying @ back into the output too.\nfor v in _generator_identity_variables:\n    generator_default_variables[v] = \"<(%s)\" % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n    output_files = {}\n    for qualified_target in target_list:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypd",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    locals = {\n        \"target_list\": target_list,\n        \"target_dicts\": target_dicts,\n        \"data\": data,\n    }\n    # Use a banner that looks like the stock Python one and like what\n    # code.interact uses by default, but tack on something to indicate what\n    # locals are available, and identify gypsh.\n    banner = \"Python {} on {}\\nlocals.keys() = {}\\ngypsh\".format(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {}
    },
    {
        "label": "_generator_identity_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "_generator_identity_variables = [\n    \"EXECUTABLE_PREFIX\",\n    \"EXECUTABLE_SUFFIX\",\n    \"INTERMEDIATE_DIR\",\n    \"PRODUCT_DIR\",\n    \"RULE_INPUT_ROOT\",\n    \"RULE_INPUT_DIRNAME\",\n    \"RULE_INPUT_EXT\",\n    \"RULE_INPUT_NAME\",\n    \"RULE_INPUT_PATH\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "peekOfCode": "generator_default_variables = {}\nfor v in _generator_identity_variables:\n    generator_default_variables[v] = \"<(%s)\" % v\ndef GenerateOutput(target_list, target_dicts, data, params):\n    locals = {\n        \"target_list\": target_list,\n        \"target_dicts\": target_dicts,\n        \"data\": data,\n    }\n    # Use a banner that looks like the stock Python one and like what",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.gypsh",
        "documentation": {}
    },
    {
        "label": "MakefileWriter",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "class MakefileWriter:\n    \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"\n    def __init__(self, generator_flags, flavor):\n        self.generator_flags = generator_flags\n        self.flavor = flavor\n        self.suffix_rules_srcdir = {}\n        self.suffix_rules_objdir1 = {}\n        self.suffix_rules_objdir2 = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")\n        default_variables.setdefault(\n            \"SHARED_LIB_DIR\", generator_default_variables[\"PRODUCT_DIR\"]\n        )\n        default_variables.setdefault(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Calculate the generator specific info that gets fed to input (called by\n    gyp).\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    # Android NDK requires a strict link order.\n    if android_ndk_version:\n        global generator_wants_sorted_dependencies\n        generator_wants_sorted_dependencies = True\n    output_dir = params[\"options\"].generator_output or params[\"options\"].toplevel_dir",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "WriteRootHeaderSuffixRules",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:\n        writer.write(\"$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n\" % ext)\n        writer.write(\"\\t@$(call do_cmd,%s,1)\\n\" % COMPILABLE_EXTENSIONS[ext])\n    writer.write(\"\\n# Try building from generated source, too.\\n\")\n    for ext in extensions:\n        writer.write(\n            \"$(obj).$(TOOLSET)/%%.o: $(obj).$(TOOLSET)/%%%s FORCE_DO_CMD\\n\" % ext",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "Compilable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Compilable(filename):\n    \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"\n    for res in (filename.endswith(e) for e in COMPILABLE_EXTENSIONS):\n        if res:\n            return True\n    return False\ndef Linkable(filename):\n    \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n    return filename.endswith(\".o\")\ndef Target(filename):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "Linkable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Linkable(filename):\n    \"\"\"Return true if the file is linkable (should be on the link line).\"\"\"\n    return filename.endswith(\".o\")\ndef Target(filename):\n    \"\"\"Translate a compilable filename to its .o target.\"\"\"\n    return os.path.splitext(filename)[0] + \".o\"\ndef EscapeShellArgument(s):\n    \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n    shell. Taken from\n    http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "Target",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Target(filename):\n    \"\"\"Translate a compilable filename to its .o target.\"\"\"\n    return os.path.splitext(filename)[0] + \".o\"\ndef EscapeShellArgument(s):\n    \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n    shell. Taken from\n    http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n    \"\"\"\n    return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "EscapeShellArgument",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeShellArgument(s):\n    \"\"\"Quotes an argument so that it will be interpreted literally by a POSIX\n    shell. Taken from\n    http://stackoverflow.com/questions/35817/whats-the-best-way-to-escape-ossystem-calls-in-python\n    \"\"\"\n    return \"'\" + s.replace(\"'\", \"'\\\\''\") + \"'\"\ndef EscapeMakeVariableExpansion(s):\n    \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n    string to be interpreted literally.\"\"\"\n    return s.replace(\"$\", \"$$\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "EscapeMakeVariableExpansion",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeMakeVariableExpansion(s):\n    \"\"\"Make has its own variable expansion syntax using $. We must escape it for\n    string to be interpreted literally.\"\"\"\n    return s.replace(\"$\", \"$$\")\ndef EscapeCppDefine(s):\n    \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n    s = EscapeShellArgument(s)\n    s = EscapeMakeVariableExpansion(s)\n    # '#' characters must be escaped even embedded in a string, else Make will\n    # treat it as the start of a comment.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "EscapeCppDefine",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def EscapeCppDefine(s):\n    \"\"\"Escapes a CPP define so that it will reach the compiler unaltered.\"\"\"\n    s = EscapeShellArgument(s)\n    s = EscapeMakeVariableExpansion(s)\n    # '#' characters must be escaped even embedded in a string, else Make will\n    # treat it as the start of a comment.\n    return s.replace(\"#\", r\"\\#\")\ndef QuoteIfNecessary(string):\n    \"\"\"TODO: Should this ideally be replaced with one or more of the above\n    functions?\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "QuoteIfNecessary",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def QuoteIfNecessary(string):\n    \"\"\"TODO: Should this ideally be replaced with one or more of the above\n    functions?\"\"\"\n    if '\"' in string:\n        string = '\"' + string.replace('\"', '\\\\\"') + '\"'\n    return string\ndef StringToMakefileVariable(string):\n    \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n    return re.sub(\"[^a-zA-Z0-9_]\", \"_\", string)\nsrcdir_prefix = \"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "StringToMakefileVariable",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def StringToMakefileVariable(string):\n    \"\"\"Convert a string to a value that is acceptable as a make variable name.\"\"\"\n    return re.sub(\"[^a-zA-Z0-9_]\", \"_\", string)\nsrcdir_prefix = \"\"\ndef Sourceify(path):\n    \"\"\"Convert a path to its source directory form.\"\"\"\n    if \"$(\" in path:\n        return path\n    if os.path.isabs(path):\n        return path",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "Sourceify",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def Sourceify(path):\n    \"\"\"Convert a path to its source directory form.\"\"\"\n    if \"$(\" in path:\n        return path\n    if os.path.isabs(path):\n        return path\n    return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r\"\\ \"):\n    return s.replace(\" \", quote)\ndef SourceifyAndQuoteSpaces(path):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "QuoteSpaces",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def QuoteSpaces(s, quote=r\"\\ \"):\n    return s.replace(\" \", quote)\ndef SourceifyAndQuoteSpaces(path):\n    \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n    return QuoteSpaces(Sourceify(path))\n# Map from qualified target to path to output.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SourceifyAndQuoteSpaces",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def SourceifyAndQuoteSpaces(path):\n    \"\"\"Convert a path to its source directory form and quote spaces.\"\"\"\n    return QuoteSpaces(Sourceify(path))\n# Map from qualified target to path to output.\ntarget_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "WriteAutoRegenerationRule",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def WriteAutoRegenerationRule(params, root_makefile, makefile_name, build_files):\n    \"\"\"Write the target to regenerate the Makefile.\"\"\"\n    options = params[\"options\"]\n    build_files_args = [\n        gyp.common.RelativePath(filename, options.toplevel_dir)\n        for filename in params[\"build_files_arg\"]\n    ]\n    gyp_binary = gyp.common.FixIfRelativePath(\n        params[\"gyp_binary\"], options.toplevel_dir\n    )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    for config in configurations:\n        arguments = [\"make\"]\n        if options.toplevel_dir and options.toplevel_dir != \".\":\n            arguments += \"-C\", options.toplevel_dir\n        arguments.append(\"BUILDTYPE=\" + config)\n        print(f\"Building [{config}]: {arguments}\")\n        subprocess.check_call(arguments)\ndef GenerateOutput(target_list, target_dicts, data, params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    builddir_name = generator_flags.get(\"output_dir\", \"out\")\n    android_ndk_version = generator_flags.get(\"android_ndk_version\", None)\n    default_target = generator_flags.get(\"default_target\", \"all\")\n    def CalculateMakefilePath(build_file, base_name):\n        \"\"\"Determine where to write a Makefile for a given gyp file.\"\"\"\n        # Paths in gyp files are relative to the .gyp file, but we want",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"INTERMEDIATE_DIR\": \"$(obj).$(TOOLSET)/$(TARGET)/geni\",\n    \"SHARED_INTERMEDIATE_DIR\": \"$(obj)/gen\",\n    \"PRODUCT_DIR\": \"$(builddir)\",\n    \"RULE_INPUT_ROOT\": \"%(INPUT_ROOT)s\",  # This gets expanded by Python.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_supports_multiple_toolsets = True\n# Request sorted dependencies in the order from dependents to dependencies.\ngenerator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_wants_sorted_dependencies",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_wants_sorted_dependencies = False\n# Placates pylint.\ngenerator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")\n        default_variables.setdefault(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")\n        default_variables.setdefault(\n            \"SHARED_LIB_DIR\", generator_default_variables[\"PRODUCT_DIR\"]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "generator_filelist_paths = None\ndef CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")\n        default_variables.setdefault(\n            \"SHARED_LIB_DIR\", generator_default_variables[\"PRODUCT_DIR\"]\n        )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SPACE_REPLACEMENT",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SPACE_REPLACEMENT = \"?\"\nLINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "LINK_COMMANDS_LINUX",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_LINUX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) -o $@ $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,--start-group $(LD_INPUTS) $(LIBS) -Wl,--end-group\n# We support two kinds of shared objects (.so):\n# 1) shared_library, which is just bundling together many dependent libraries\n# into a link line.\n# 2) loadable_module, which is generating a module intended for dlopen().\n#\n# They differ only slightly:\n# In the former case, we want to package all dependent code into the .so.\n# In the latter case, we want to package just the API exposed by the\n# outermost module.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -o $@ -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "LINK_COMMANDS_MAC",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_MAC = \"\"\"\\\nquiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = LIBTOOL-STATIC $@\ncmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && ./gyp-mac-tool filter-libtool libtool $(GYP_LIBTOOLFLAGS) -static -o $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o \"$@\" $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -bundle $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "LINK_COMMANDS_ANDROID",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_ANDROID = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\n# Due to circular dependencies between libraries :(, we wrap the\n# special \"figure out circular dependencies\" flags around the entire\n# input list during linking.\nquiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\nquiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link_host",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link_host = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\ncmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link_host",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link_host = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ -Wl,--start-group $(LD_INPUTS) -Wl,--end-group $(LIBS)\n# Other shared-object link notes:\n# - Set SONAME to the library filename so our binaries don't reference\n# the local, absolute paths used on the link command-line.\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--whole-archive $(LD_INPUTS) -Wl,--no-whole-archive $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ -Wl,--start-group $(filter-out FORCE_DO_CMD, $^) -Wl,--end-group $(LIBS)\nquiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module_host",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module_host = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module_host",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module_host = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -Wl,-soname=$(@F) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "LINK_COMMANDS_AIX",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_AIX = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) -X32_64 crs $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) -shared $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS)\n\"\"\"  # noqa: E501\nLINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "LINK_COMMANDS_OS390",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "LINK_COMMANDS_OS390 = \"\"\"\\\nquiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink = AR($(TOOLSET)) $@\ncmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink = rm -f $@ && $(AR.$(TOOLSET)) crs $@ $(filter %.o,$^)\nquiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_alink_thin = AR($(TOOLSET)) $@\ncmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_alink_thin",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_alink_thin = rm -f $@ && $(AR.$(TOOLSET)) crsT $@ $(filter %.o,$^)\nquiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_link = LINK($(TOOLSET)) $@\ncmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_link = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS)\nquiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\n    \"\"\"\\",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink = SOLINK($(TOOLSET)) $@\ncmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\n    \"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(LD_INPUTS) $(LIBS) -Wl,DLL\nquiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\n    \"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_solink_module = SOLINK_MODULE($(TOOLSET)) $@\ncmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\n    \"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_solink_module",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_solink_module = $(LINK.$(TOOLSET)) $(GYP_LDFLAGS) $(LDFLAGS.$(TOOLSET)) -o $@ $(filter-out FORCE_DO_CMD, $^) $(LIBS) -Wl,DLL\n\"\"\"  # noqa: E501\n# Header of toplevel Makefile.\n# This should go into the build tree, but it's easier to keep it here for now.\nSHARED_HEADER = (\n    \"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SHARED_HEADER",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER = (\n    \"\"\"\\\n# We borrow heavily from the kernel build setup, though we are simpler since\n# we don't have Kconfig tweaking settings on us.\n# The implicit make rules have it looking for RCS files, among other things.\n# We instead explicitly write all the rules we care about.\n# It's even quicker (saves ~200ms) to pass -r on the command line.\nMAKEFLAGS=-r\n# The source directory tree.\nsrcdir := %(srcdir)s",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "replace_spaces",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "replace_spaces = $(subst $(space),\"\"\"\n    + SPACE_REPLACEMENT\n    + \"\"\",$1)\nunreplace_spaces = $(subst \"\"\"\n    + SPACE_REPLACEMENT\n    + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "unreplace_spaces",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "unreplace_spaces = $(subst \"\"\"\n    + SPACE_REPLACEMENT\n    + \"\"\",$(space),$1)\ndirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "dirx",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "dirx = $(call unreplace_spaces,$(dir $(call replace_spaces,$1)))\n# Flags to make gcc output dependency info.  Note that you need to be\n# careful here to use the flags that ccache and distcc can understand.\n# We write to a dep file on the side first and then rename at the end\n# so we can't end up with a broken dep file.\ndepfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "depfile",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "depfile = $(depsdir)/$(call replace_spaces,$@).d\nDEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "DEPFLAGS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "DEPFLAGS = %(makedep_args)s -MF $(depfile).raw\n# We have to fixup the deps output in a few ways.\n# (1) the file output should mention the proper .o file.\n# ccache or distcc lose the path to the target, so we convert a rule of\n# the form:\n#   foobar.o: DEP1 DEP2\n# into\n#   path/to/foobar.o: DEP1 DEP2\n# (2) we want missing files not to cause us to fail to build.\n# We want to rewrite",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_cc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_cc = CC($(TOOLSET)) $@\ncmd_cc = $(CC.$(TOOLSET)) -o $@ $< $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) -o $@ $< $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_cc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_cc = $(CC.$(TOOLSET)) -o $@ $< $(GYP_CFLAGS) $(DEPFLAGS) $(CFLAGS.$(TOOLSET)) -c\nquiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) -o $@ $< $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_cxx",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_cxx = CXX($(TOOLSET)) $@\ncmd_cxx = $(CXX.$(TOOLSET)) -o $@ $< $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_cxx",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_cxx = $(CXX.$(TOOLSET)) -o $@ $< $(GYP_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c\n%(extra_commands)s\nquiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501\n    r\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_touch",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_touch = TOUCH $@\ncmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501\n    r\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_touch",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_touch = touch $@\nquiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501\n    r\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_copy",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_copy = COPY $@\n# send stderr to /dev/null to ignore messages when linking directories.\ncmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501\n    r\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_copy",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_copy = ln -f \"$<\" \"$@\" 2>/dev/null || (rm -rf \"$@\" && cp %(copy_archive_args)s \"$<\" \"$@\")\n%(link_commands)s\n\"\"\"  # noqa: E501\n    r\"\"\"\n# Define an escape_quotes function to escape single quotes.\n# This allows us to handle quotes properly as long as we always use\n# use single quotes and escape_quotes.\nescape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "escape_quotes",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "escape_quotes = $(subst ','\\'',$(1))\n# This comment is here just to include a ' to unconfuse syntax highlighting.\n# Define an escape_vars function to escape '$' variable syntax.\n# This allows us to read/write command lines with shell variables (e.g.\n# $LD_LIBRARY_PATH), without triggering make substitution.\nescape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "escape_vars",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "escape_vars = $(subst $$,$$$$,$(1))\n# Helper that expands to a shell command to echo a string exactly as it is in\n# make. This uses printf instead of echo because printf's behaviour with respect\n# to escape sequences is more portable than echo's across different shells\n# (e.g., dash, bash).\nexact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n    \"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "exact_echo",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "exact_echo = printf '%%s\\n' '$(call escape_quotes,$(1))'\n\"\"\"\n    \"\"\"\n# Helper to compare the command we're about to run against the command\n# we logged the last time we ran the command.  Produces an empty\n# string (false) when the commands match.\n# Tricky point: Make has no string-equality test function.\n# The kernel uses the following, but it seems like it would have false\n# positives, where one string reordered its arguments.\n#   arg_check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \\\\",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "command_changed",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "command_changed = $(or $(subst $(cmd_$(1)),,$(cmd_$(call replace_spaces,$@))),\\\\\n                       $(subst $(cmd_$(call replace_spaces,$@)),,$(cmd_$(1))))\n# Helper that is non-empty when a prerequisite changes.\n# Normally make does this implicitly, but we force rules to always run\n# so we can check their command lines.\n#   $? -- new prerequisites\n#   $| -- order-only dependencies\nprereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "prereq_changed",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "prereq_changed = $(filter-out FORCE_DO_CMD,$(filter-out $|,$?))\n# Helper that executes all postbuilds until one fails.\ndefine do_postbuilds\n  @E=0;\\\\\n  for p in $(POSTBUILDS); do\\\\\n    eval $$p;\\\\\n    E=$$?;\\\\\n    if [ $$E -ne 0 ]; then\\\\\n      break;\\\\\n    fi;\\\\",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SHARED_HEADER_MAC_COMMANDS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_MAC_COMMANDS = \"\"\"\nquiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_objc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_objc = CXX($(TOOLSET)) $@\ncmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_objc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_objc = $(CC.$(TOOLSET)) $(GYP_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_objcxx",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_objcxx = CXX($(TOOLSET)) $@\ncmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_objcxx",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_objcxx = $(CXX.$(TOOLSET)) $(GYP_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# Commands for precompiled header files.\nquiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_pch_c",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_c = CXX($(TOOLSET)) $@\ncmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_pch_c",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_c = $(CC.$(TOOLSET)) $(GYP_PCH_CFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_pch_cc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_cc = CXX($(TOOLSET)) $@\ncmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_pch_cc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_cc = $(CC.$(TOOLSET)) $(GYP_PCH_CXXFLAGS) $(DEPFLAGS) $(CXXFLAGS.$(TOOLSET)) -c -o $@ $<\nquiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_pch_m",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_m = CXX($(TOOLSET)) $@\ncmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_pch_m",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_m = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCFLAGS) $(DEPFLAGS) -c -o $@ $<\nquiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_pch_mm",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_pch_mm = CXX($(TOOLSET)) $@\ncmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_pch_mm",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_pch_mm = $(CC.$(TOOLSET)) $(GYP_PCH_OBJCXXFLAGS) $(DEPFLAGS) -c -o $@ $<\n# gyp-mac-tool is written next to the root Makefile by gyp.\n# Use $(4) for the command, since $(2) and $(3) are used as flag by do_cmd\n# already.\nquiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_mac_tool",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_mac_tool = MACTOOL $(4) $<\ncmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_mac_tool",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_mac_tool = ./gyp-mac-tool $(4) $< \"$@\"\nquiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_mac_package_framework",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_mac_package_framework = PACKAGE FRAMEWORK $@\ncmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:\n        writer.write(\"$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n\" % ext)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_mac_package_framework",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_mac_package_framework = ./gyp-mac-tool package-framework \"$@\" $(4)\nquiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:\n        writer.write(\"$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n\" % ext)\n        writer.write(\"\\t@$(call do_cmd,%s,1)\\n\" % COMPILABLE_EXTENSIONS[ext])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "quiet_cmd_infoplist",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "quiet_cmd_infoplist = INFOPLIST $@\ncmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:\n        writer.write(\"$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n\" % ext)\n        writer.write(\"\\t@$(call do_cmd,%s,1)\\n\" % COMPILABLE_EXTENSIONS[ext])\n    writer.write(\"\\n# Try building from generated source, too.\\n\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "cmd_infoplist",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "cmd_infoplist = $(CC.$(TOOLSET)) -E -P -Wno-trigraphs -x c $(INFOPLIST_DEFINES) \"$<\" -o \"$@\"\n\"\"\"  # noqa: E501\ndef WriteRootHeaderSuffixRules(writer):\n    extensions = sorted(COMPILABLE_EXTENSIONS.keys(), key=str.lower)\n    writer.write(\"# Suffix rules, putting all outputs into $(obj).\\n\")\n    for ext in extensions:\n        writer.write(\"$(obj).$(TOOLSET)/%%.o: $(srcdir)/%%%s FORCE_DO_CMD\\n\" % ext)\n        writer.write(\"\\t@$(call do_cmd,%s,1)\\n\" % COMPILABLE_EXTENSIONS[ext])\n    writer.write(\"\\n# Try building from generated source, too.\\n\")\n    for ext in extensions:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SHARED_HEADER_SUFFIX_RULES_COMMENT1",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_SUFFIX_RULES_COMMENT1 = \"\"\"\\\n# Suffix rules, putting all outputs into $(obj).\n\"\"\"\nSHARED_HEADER_SUFFIX_RULES_COMMENT2 = \"\"\"\\\n# Try building from generated source, too.\n\"\"\"\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SHARED_HEADER_SUFFIX_RULES_COMMENT2",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_HEADER_SUFFIX_RULES_COMMENT2 = \"\"\"\\\n# Try building from generated source, too.\n\"\"\"\nSHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "SHARED_FOOTER",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "SHARED_FOOTER = \"\"\"\\\n# \"all\" is a concatenation of the \"all\" targets from all the included\n# sub-makefiles. This is just here to clarify.\nall:\n# Add in dependency-tracking rules.  $(all_deps) is the list of every single\n# target in our tree. Only consider the ones with .d (dependency) info:\nd_files := $(wildcard $(foreach f,$(all_deps),$(depsdir)/$(f).d))\nifneq ($(d_files),)\n  include $(d_files)\nendif",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "header = \"\"\"\\\n# This file is generated by gyp; do not edit.\n\"\"\"\n# Maps every compilable file extension to the do_cmd that compiles it.\nCOMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"cc\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "COMPILABLE_EXTENSIONS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "COMPILABLE_EXTENSIONS = {\n    \".c\": \"cc\",\n    \".cc\": \"cxx\",\n    \".cpp\": \"cxx\",\n    \".cxx\": \"cxx\",\n    \".s\": \"cc\",\n    \".S\": \"cc\",\n}\ndef Compilable(filename):\n    \"\"\"Return true if the file is compilable (should be in OBJS).\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "srcdir_prefix",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "srcdir_prefix = \"\"\ndef Sourceify(path):\n    \"\"\"Convert a path to its source directory form.\"\"\"\n    if \"$(\" in path:\n        return path\n    if os.path.isabs(path):\n        return path\n    return srcdir_prefix + path\ndef QuoteSpaces(s, quote=r\"\\ \"):\n    return s.replace(\" \", quote)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "target_outputs",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "target_outputs = {}\n# Map from qualified target to any linkable output.  A subset\n# of target_outputs.  E.g. when mybinary depends on liba, we want to\n# include liba in the linker line; when otherbinary depends on\n# mybinary, we just want to build mybinary first.\ntarget_link_deps = {}\nclass MakefileWriter:\n    \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "target_link_deps",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "peekOfCode": "target_link_deps = {}\nclass MakefileWriter:\n    \"\"\"MakefileWriter packages up the writing of one target-specific foobar.mk.\n    Its only real entry point is Write(), and is mostly used for namespacing.\n    \"\"\"\n    def __init__(self, generator_flags, flavor):\n        self.generator_flags = generator_flags\n        self.flavor = flavor\n        self.suffix_rules_srcdir = {}\n        self.suffix_rules_objdir1 = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.make",
        "documentation": {}
    },
    {
        "label": "MSBuildRule",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "class MSBuildRule:\n    \"\"\"Used to store information used to generate an MSBuild rule.\n  Attributes:\n    rule_name: The rule name, sanitized to use in XML.\n    target_name: The name of the target.\n    after_targets: The name of the AfterTargets element.\n    before_targets: The name of the BeforeTargets element.\n    depends_on: The name of the DependsOn element.\n    compute_output: The name of the ComputeOutput element.\n    dirs_to_make: The name of the DirsToMake element.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    \"\"\"Generated variables that require params to be known.\"\"\"\n    generator_flags = params.get(\"generator_flags\", {})\n    # Select project file format version (if unset, default to auto detecting).\n    msvs_version = MSVSVersion.SelectVisualStudioVersion(\n        generator_flags.get(\"msvs_version\", \"auto\")\n    )\n    # Stash msvs_version for later (so we don't have to probe the system twice).\n    params[\"msvs_version\"] = msvs_version\n    # Set a variable so conditions can be based on msvs_version.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    msvs_version = params[\"msvs_version\"]\n    devenv = os.path.join(msvs_version.path, \"Common7\", \"IDE\", \"devenv.com\")\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)\n        if build_file_ext != \".gyp\":\n            continue\n        sln_path = build_file_root + options.suffix + \".sln\"\n        if options.generator_output:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    if params.get(\"flavor\") == \"ninja\":\n        toplevel = params[\"options\"].toplevel_dir\n        qualified_out_dir = os.path.normpath(\n            os.path.join(\n                toplevel,\n                ninja_generator.ComputeOutputDir(params),\n                \"gypfiles-msvs-ninja\",\n            )\n        )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    \"\"\"Generate .sln and .vcproj files.\n  This is the entry point for this generator.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dictionary containing per .gyp data.\n  \"\"\"\n    global fixpath_prefix\n    options = params[\"options\"]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "VALID_MSVS_GUID_CHARS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "VALID_MSVS_GUID_CHARS = re.compile(r\"^[A-F0-9\\-]+$\")\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_default_variables = {\n    \"DRIVER_PREFIX\": \"\",\n    \"DRIVER_SUFFIX\": \".sys\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \".exe\",\n    \"STATIC_LIB_PREFIX\": \"\",\n    \"SHARED_LIB_PREFIX\": \"\",\n    \"STATIC_LIB_SUFFIX\": \".lib\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ngenerator_default_variables = {\n    \"DRIVER_PREFIX\": \"\",\n    \"DRIVER_SUFFIX\": \".sys\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \".exe\",\n    \"STATIC_LIB_PREFIX\": \"\",\n    \"SHARED_LIB_PREFIX\": \"\",\n    \"STATIC_LIB_SUFFIX\": \".lib\",\n    \"SHARED_LIB_SUFFIX\": \".dll\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_default_variables = {\n    \"DRIVER_PREFIX\": \"\",\n    \"DRIVER_SUFFIX\": \".sys\",\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \".exe\",\n    \"STATIC_LIB_PREFIX\": \"\",\n    \"SHARED_LIB_PREFIX\": \"\",\n    \"STATIC_LIB_SUFFIX\": \".lib\",\n    \"SHARED_LIB_SUFFIX\": \".dll\",\n    \"INTERMEDIATE_DIR\": \"$(IntDir)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_additional_path_sections = [\n    \"msvs_cygwin_dirs\",\n    \"msvs_props\",\n]\ngenerator_additional_non_configuration_keys = [\n    \"msvs_cygwin_dirs\",\n    \"msvs_cygwin_shell\",\n    \"msvs_large_pdb\",\n    \"msvs_shard\",\n    \"msvs_external_builder\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n    \"msvs_cygwin_dirs\",\n    \"msvs_cygwin_shell\",\n    \"msvs_large_pdb\",\n    \"msvs_shard\",\n    \"msvs_external_builder\",\n    \"msvs_external_builder_out_dir\",\n    \"msvs_external_builder_build_cmd\",\n    \"msvs_external_builder_clean_cmd\",\n    \"msvs_external_builder_clcompile_cmd\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "generator_filelist_paths = None\n# List of precompiled header related keys.\nprecomp_keys = [\n    \"msvs_precompiled_header\",\n    \"msvs_precompiled_source\",\n]\ncached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "precomp_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "precomp_keys = [\n    \"msvs_precompiled_header\",\n    \"msvs_precompiled_source\",\n]\ncached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "cached_username",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "cached_username = None\ncached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n    if sys.platform not in (\"win32\", \"cygwin\"):\n        return (\"DOMAIN\", \"USERNAME\")\n    global cached_username",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "cached_domain",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "cached_domain = None\n# TODO(gspencer): Switch the os.environ calls to be\n# win32api.GetDomainName() and win32api.GetUserName() once the\n# python version in depot_tools has been updated to work on Vista\n# 64-bit.\ndef _GetDomainAndUserName():\n    if sys.platform not in (\"win32\", \"cygwin\"):\n        return (\"DOMAIN\", \"USERNAME\")\n    global cached_username\n    global cached_domain",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "fixpath_prefix",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "fixpath_prefix = None\ndef _NormalizedSource(source):\n    \"\"\"Normalize the path.\n  But not if that gets rid of a variable, as this may expand to something\n  larger than one directory.\n  Arguments:\n      source: The path to be normalize.d\n  Returns:\n      The normalized path.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "quote_replacer_regex",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "quote_replacer_regex = re.compile(r'(\\\\*)\"')\ndef _EscapeCommandLineArgumentForMSVS(s):\n    \"\"\"Escapes a Windows command-line argument.\n  So that the Win32 CommandLineToArgv function will turn the escaped result back\n  into the original string.\n  See http://msdn.microsoft.com/en-us/library/17w5ykft.aspx\n  (\"Parsing C++ Command-Line Arguments\") to understand why we have to do\n  this.\n  Args:\n      s: the string to be escaped.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "delimiters_replacer_regex",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "delimiters_replacer_regex = re.compile(r\"(\\\\*)([,;]+)\")\ndef _EscapeVCProjCommandLineArgListItem(s):\n    \"\"\"Escapes command line arguments for MSVS.\n  The VCProj format stores string lists in a single string using commas and\n  semi-colons as separators, which must be quoted if they are to be\n  interpreted literally. However, command-line arguments may already have\n  quotes, and the VCProj parser is ignorant of the backslash escaping\n  convention used by CommandLineToArgv, so the command-line quotes and the\n  VCProj quotes may not be the same quotes. So to store a general\n  command-line argument in a VCProj list, we need to parse the existing",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "quote_replacer_regex2",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "quote_replacer_regex2 = re.compile(r'(\\\\+)\"')\ndef _EscapeCommandLineArgumentForMSBuild(s):\n    \"\"\"Escapes a Windows command-line argument for use by MSBuild.\"\"\"\n    def _Replace(match):\n        return (len(match.group(1)) / 2 * 4) * \"\\\\\" + '\\\\\"'\n    # Escape all quotes so that they are interpreted literally.\n    s = quote_replacer_regex2.sub(_Replace, s)\n    return s\ndef _EscapeMSBuildSpecialCharacters(s):\n    escape_dictionary = {",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "MSVS_VARIABLE_REFERENCE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "peekOfCode": "MSVS_VARIABLE_REFERENCE = re.compile(r\"\\$\\(([a-zA-Z_][a-zA-Z0-9_]*)\\)\")\ndef _GetMSBuildPropertyGroup(spec, label, properties):\n    \"\"\"Returns a PropertyGroup definition for the specified properties.\n  Arguments:\n    spec: The target project dict.\n    label: An optional label for the PropertyGroup.\n    properties: The dictionary to be converted.  The key is the name of the\n        property.  The value is itself a dictionary; its key is the value and\n        the value a list of condition for which this value is true.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs",
        "documentation": {}
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.stderr = StringIO()\n    def test_GetLibraries(self):\n        self.assertEqual(msvs._GetLibraries({}), [])\n        self.assertEqual(msvs._GetLibraries({\"libraries\": []}), [])\n        self.assertEqual(\n            msvs._GetLibraries({\"other\": \"foo\", \"libraries\": [\"a.lib\"]}), [\"a.lib\"]\n        )\n        self.assertEqual(msvs._GetLibraries({\"libraries\": [\"-la\"]}), [\"a.lib\"])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.msvs_test",
        "documentation": {}
    },
    {
        "label": "Target",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "class Target:\n    \"\"\"Target represents the paths used within a single gyp target.\n    Conceptually, building a single target A is a series of steps:\n    1) actions/rules/copies  generates source/resources/etc.\n    2) compiles              generates .o files\n    3) link                  generates a binary (library/executable)\n    4) bundle                merges the above in a mac bundle\n    (Any of these steps can be optional.)\n    From a build ordering perspective, a dependent target B could just\n    depend on the last output of this series of steps.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "NinjaWriter",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "class NinjaWriter:\n    def __init__(\n        self,\n        hash_for_rules,\n        target_outputs,\n        base_dir,\n        build_dir,\n        output_file,\n        toplevel_build,\n        output_file_name,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "StripPrefix",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument\n    by the shell.\"\"\"\n    # Rather than attempting to enumerate the bad shell characters, just\n    # allow common OK ones and quote anything else.\n    if re.match(r\"^[a-zA-Z0-9_=.\\\\/-]+$\", arg):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "QuoteShellArgument",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument\n    by the shell.\"\"\"\n    # Rather than attempting to enumerate the bad shell characters, just\n    # allow common OK ones and quote anything else.\n    if re.match(r\"^[a-zA-Z0-9_=.\\\\/-]+$\", arg):\n        return arg  # No quoting necessary.\n    if flavor == \"win\":\n        return gyp.msvs_emulation.QuoteForRspFile(arg)\n    return \"'\" + arg.replace(\"'\", \"'\" + '\"\\'\"' + \"'\") + \"'\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "Define",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def Define(d, flavor):\n    \"\"\"Takes a preprocessor define and returns a -D parameter that's ninja- and\n    shell-escaped.\"\"\"\n    if flavor == \"win\":\n        # cl.exe replaces literal # characters with = in preprocessor definitions for\n        # some reason. Octal-encode to work around that.\n        d = d.replace(\"#\", \"\\\\%03o\" % ord(\"#\"))\n    return QuoteShellArgument(ninja_syntax.escape(\"-D\" + d), flavor)\ndef AddArch(output, arch):\n    \"\"\"Adds an arch string to an output path.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "AddArch",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def AddArch(output, arch):\n    \"\"\"Adds an arch string to an output path.\"\"\"\n    output, extension = os.path.splitext(output)\n    return f\"{output}.{arch}{extension}\"\nclass Target:\n    \"\"\"Target represents the paths used within a single gyp target.\n    Conceptually, building a single target A is a series of steps:\n    1) actions/rules/copies  generates source/resources/etc.\n    2) compiles              generates .o files\n    3) link                  generates a binary (library/executable)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "CalculateVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CalculateVariables(default_variables, params):\n    \"\"\"Calculate additional variables for use in the build (called by gyp).\"\"\"\n    global generator_additional_non_configuration_keys\n    global generator_additional_path_sections\n    flavor = gyp.common.GetFlavor(params)\n    if flavor == \"mac\":\n        default_variables.setdefault(\"OS\", \"mac\")\n        default_variables.setdefault(\"SHARED_LIB_SUFFIX\", \".dylib\")\n        default_variables.setdefault(\n            \"SHARED_LIB_DIR\", generator_default_variables[\"PRODUCT_DIR\"]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "ComputeOutputDir",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def ComputeOutputDir(params):\n    \"\"\"Returns the path from the toplevel_dir to the build output directory.\"\"\"\n    # generator_dir: relative path from pwd to where make puts build files.\n    # Makes migrating from make to ninja easier, ninja doesn't put anything here.\n    generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n    # output_dir: relative path from generator_dir to the build directory.\n    output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n    # Relative path from source root to our output files.  e.g. \"out\"\n    return os.path.normpath(os.path.join(generator_dir, output_dir))\ndef CalculateGeneratorInputInfo(params):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    \"\"\"Called by __init__ to initialize generator values based on params.\"\"\"\n    # E.g. \"out/gypfiles\"\n    toplevel = params[\"options\"].toplevel_dir\n    qualified_out_dir = os.path.normpath(\n        os.path.join(toplevel, ComputeOutputDir(params), \"gypfiles\")\n    )\n    global generator_filelist_paths\n    generator_filelist_paths = {\n        \"toplevel\": toplevel,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "OpenOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def OpenOutput(path, mode=\"w\"):\n    \"\"\"Open |path| for writing, creating directories if necessary.\"\"\"\n    gyp.common.EnsureDirExists(path)\n    return open(path, mode)\ndef CommandWithWrapper(cmd, wrappers, prog):\n    wrapper = wrappers.get(cmd, \"\")\n    if wrapper:\n        return wrapper + \" \" + prog\n    return prog\ndef GetDefaultConcurrentLinks():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "CommandWithWrapper",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CommandWithWrapper(cmd, wrappers, prog):\n    wrapper = wrappers.get(cmd, \"\")\n    if wrapper:\n        return wrapper + \" \" + prog\n    return prog\ndef GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "GetDefaultConcurrentLinks",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GetDefaultConcurrentLinks():\n    \"\"\"Returns a best-guess for a number of concurrent links.\"\"\"\n    pool_size = int(os.environ.get(\"GYP_LINK_CONCURRENCY\", 0))\n    if pool_size:\n        return pool_size\n    if sys.platform in (\"win32\", \"cygwin\"):\n        import ctypes\n        class MEMORYSTATUSEX(ctypes.Structure):\n            _fields_ = [\n                (\"dwLength\", ctypes.c_ulong),",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "GenerateOutputForConfig",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GenerateOutputForConfig(target_list, target_dicts, data, params, config_name):\n    options = params[\"options\"]\n    flavor = gyp.common.GetFlavor(params)\n    generator_flags = params.get(\"generator_flags\", {})\n    # build_dir: relative path from source root to our output files.\n    # e.g. \"out/Debug\"\n    build_dir = os.path.normpath(os.path.join(ComputeOutputDir(params), config_name))\n    toplevel_build = os.path.join(options.toplevel_dir, build_dir)\n    master_ninja_file = OpenOutput(os.path.join(toplevel_build, \"build.ninja\"))\n    master_ninja = ninja_syntax.Writer(master_ninja_file, width=120)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    for config in configurations:\n        builddir = os.path.join(options.toplevel_dir, \"out\", config)\n        arguments = [\"ninja\", \"-C\", builddir]\n        print(f\"Building [{config}]: {arguments}\")\n        subprocess.check_call(arguments)\ndef CallGenerateOutputForConfig(arglist):\n    # Ignore the interrupt signal so that the parent process catches it and\n    # kills all multiprocessing children.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "CallGenerateOutputForConfig",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def CallGenerateOutputForConfig(arglist):\n    # Ignore the interrupt signal so that the parent process catches it and\n    # kills all multiprocessing children.\n    signal.signal(signal.SIGINT, signal.SIG_IGN)\n    (target_list, target_dicts, data, params, config_name) = arglist\n    GenerateOutputForConfig(target_list, target_dicts, data, params, config_name)\ndef GenerateOutput(target_list, target_dicts, data, params):\n    # Update target_dicts for iOS device builds.\n    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n        target_dicts",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    # Update target_dicts for iOS device builds.\n    target_dicts = gyp.xcode_emulation.CloneConfigurationForDeviceAndEmulator(\n        target_dicts\n    )\n    user_config = params.get(\"generator_flags\", {}).get(\"config\", None)\n    if gyp.common.GetFlavor(params) == \"win\":\n        target_list, target_dicts = MSVSUtil.ShardTargets(target_list, target_dicts)\n        target_list, target_dicts = MSVSUtil.InsertLargePdbShims(\n            target_list, target_dicts, generator_default_variables",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    # Gyp expects the following variables to be expandable by the build\n    # system to the appropriate locations.  Ninja prefers paths to be\n    # known at gyp time.  To resolve this, introduce special\n    # variables starting with $! and $| (which begin with a $ so gyp knows it",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_additional_non_configuration_keys = []\ngenerator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_additional_path_sections = []\ngenerator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_extra_sources_for_rules = []\ngenerator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument\n    by the shell.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_filelist_paths = None\ngenerator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument\n    by the shell.\"\"\"\n    # Rather than attempting to enumerate the bad shell characters, just",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "generator_supports_multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "peekOfCode": "generator_supports_multiple_toolsets = gyp.common.CrossCompileRequested()\ndef StripPrefix(arg, prefix):\n    if arg.startswith(prefix):\n        return arg[len(prefix) :]\n    return arg\ndef QuoteShellArgument(arg, flavor):\n    \"\"\"Quote a string such that it will be interpreted as a single argument\n    by the shell.\"\"\"\n    # Rather than attempting to enumerate the bad shell characters, just\n    # allow common OK ones and quote anything else.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja",
        "documentation": {}
    },
    {
        "label": "TestPrefixesAndSuffixes",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "peekOfCode": "class TestPrefixesAndSuffixes(unittest.TestCase):\n    def test_BinaryNamesWindows(self):\n        # These cannot run on non-Windows as they require a VS installation to\n        # correctly handle variable expansion.\n        if sys.platform.startswith(\"win\"):\n            writer = ninja.NinjaWriter(\n                \"foo\", \"wee\", \".\", \".\", \"build.ninja\", \".\", \"build.ninja\", \"win\"\n            )\n            spec = {\"target_name\": \"wee\"}\n            self.assertTrue(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.ninja_test",
        "documentation": {}
    },
    {
        "label": "XcodeProject",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "class XcodeProject:\n    def __init__(self, gyp_path, path, build_file_dict):\n        self.gyp_path = gyp_path\n        self.path = path\n        self.project = gyp.xcodeproj_file.PBXProject(path=path)\n        projectDirPath = gyp.common.RelativePath(\n            os.path.dirname(os.path.abspath(self.gyp_path)),\n            os.path.dirname(path) or \".\",\n        )\n        self.project.SetProperty(\"projectDirPath\", projectDirPath)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "CreateXCConfigurationList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def CreateXCConfigurationList(configuration_names):\n    xccl = gyp.xcodeproj_file.XCConfigurationList({\"buildConfigurations\": []})\n    if len(configuration_names) == 0:\n        configuration_names = [\"Default\"]\n    for configuration_name in configuration_names:\n        xcbc = gyp.xcodeproj_file.XCBuildConfiguration({\"name\": configuration_name})\n        xccl.AppendProperty(\"buildConfigurations\", xcbc)\n    xccl.SetProperty(\"defaultConfigurationName\", configuration_names[0])\n    return xccl\nclass XcodeProject:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "AddSourceToTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddSourceToTarget(source, type, pbxp, xct):\n    # TODO(mark): Perhaps source_extensions and library_extensions can be made a\n    # little bit fancier.\n    source_extensions = [\"c\", \"cc\", \"cpp\", \"cxx\", \"m\", \"mm\", \"s\", \"swift\"]\n    # .o is conceptually more of a \"source\" than a \"library,\" but Xcode thinks\n    # of \"sources\" as things to compile and \"libraries\" (or \"frameworks\") as\n    # things to link with. Adding an object file to an Xcode target's frameworks\n    # phase works properly.\n    library_extensions = [\"a\", \"dylib\", \"framework\", \"o\"]\n    basename = posixpath.basename(source)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "AddResourceToTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddResourceToTarget(resource, pbxp, xct):\n    # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n    # where it's used.\n    xct.ResourcesPhase().AddFile(resource)\ndef AddHeaderToTarget(header, pbxp, xct, is_public):\n    # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n    # where it's used.\n    settings = \"{ATTRIBUTES = (%s, ); }\" % (\"Private\", \"Public\")[is_public]\n    xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r\"(\\$\\((.*?)\\))\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "AddHeaderToTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def AddHeaderToTarget(header, pbxp, xct, is_public):\n    # TODO(mark): Combine with AddSourceToTarget above?  Or just inline this call\n    # where it's used.\n    settings = \"{ATTRIBUTES = (%s, ); }\" % (\"Private\", \"Public\")[is_public]\n    xct.HeadersPhase().AddFile(header, settings)\n_xcode_variable_re = re.compile(r\"(\\$\\((.*?)\\))\")\ndef ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "ExpandXcodeVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n    matches = _xcode_variable_re.findall(string)\n    if matches is None:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "EscapeXcodeDefine",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def EscapeXcodeDefine(s):\n    \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly interpret variables\n     especially $(inherited).\"\"\"\n    return re.sub(_xcode_define_re, r\"\\\\\\1\", s)\ndef PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "PerformBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    for build_file, build_file_dict in data.items():\n        (build_file_root, build_file_ext) = os.path.splitext(build_file)\n        if build_file_ext != \".gyp\":\n            continue\n        xcodeproj_path = build_file_root + options.suffix + \".xcodeproj\"\n        if options.generator_output:\n            xcodeproj_path = os.path.join(options.generator_output, xcodeproj_path)\n    for config in configurations:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "CalculateGeneratorInputInfo",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def CalculateGeneratorInputInfo(params):\n    toplevel = params[\"options\"].toplevel_dir\n    if params.get(\"flavor\") == \"ninja\":\n        generator_dir = os.path.relpath(params[\"options\"].generator_output or \".\")\n        output_dir = params.get(\"generator_flags\", {}).get(\"output_dir\", \"out\")\n        output_dir = os.path.normpath(os.path.join(generator_dir, output_dir))\n        qualified_out_dir = os.path.normpath(\n            os.path.join(toplevel, output_dir, \"gypfiles-xcode-ninja\")\n        )\n    else:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "GenerateOutput",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "def GenerateOutput(target_list, target_dicts, data, params):\n    # Optionally configure each spec to use ninja as the external builder.\n    ninja_wrapper = params.get(\"flavor\") == \"ninja\"\n    if ninja_wrapper:\n        (target_list, target_dicts, data) = gyp.xcode_ninja.CreateWrapper(\n            target_list, target_dicts, data, params\n        )\n    options = params[\"options\"]\n    generator_flags = params.get(\"generator_flags\", {})\n    parallel_builds = generator_flags.get(\"xcode_parallel_builds\", True)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "_intermediate_var",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_intermediate_var = \"INTERMEDIATE_DIR\"\n# SHARED_INTERMEDIATE_DIR is the same, except that it is shared among all\n# targets that share the same BUILT_PRODUCTS_DIR.\n_shared_intermediate_var = \"SHARED_INTERMEDIATE_DIR\"\n_library_search_paths_var = \"LIBRARY_SEARCH_PATHS\"\ngenerator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "_shared_intermediate_var",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_shared_intermediate_var = \"SHARED_INTERMEDIATE_DIR\"\n_library_search_paths_var = \"LIBRARY_SEARCH_PATHS\"\ngenerator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_SUFFIX\": \".dylib\",\n    # INTERMEDIATE_DIR is a place for targets to build up intermediate products.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "_library_search_paths_var",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_library_search_paths_var = \"LIBRARY_SEARCH_PATHS\"\ngenerator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_SUFFIX\": \".dylib\",\n    # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n    # It is specific to each build environment.  It is only guaranteed to exist",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "generator_default_variables",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_default_variables = {\n    \"EXECUTABLE_PREFIX\": \"\",\n    \"EXECUTABLE_SUFFIX\": \"\",\n    \"STATIC_LIB_PREFIX\": \"lib\",\n    \"SHARED_LIB_PREFIX\": \"lib\",\n    \"STATIC_LIB_SUFFIX\": \".a\",\n    \"SHARED_LIB_SUFFIX\": \".dylib\",\n    # INTERMEDIATE_DIR is a place for targets to build up intermediate products.\n    # It is specific to each build environment.  It is only guaranteed to exist\n    # and be constant within the context of a project, corresponding to a single",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "generator_additional_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_additional_path_sections = [\n    \"mac_bundle_resources\",\n    \"mac_framework_headers\",\n    \"mac_framework_private_headers\",\n    # 'mac_framework_dirs', input already handles _dirs endings.\n]\n# The Xcode-specific keys that exist on targets and aren't moved down to\n# configurations.\ngenerator_additional_non_configuration_keys = [\n    \"ios_app_extension\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "generator_additional_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_additional_non_configuration_keys = [\n    \"ios_app_extension\",\n    \"ios_watch_app\",\n    \"ios_watchkit_extension\",\n    \"mac_bundle\",\n    \"mac_bundle_resources\",\n    \"mac_framework_headers\",\n    \"mac_framework_private_headers\",\n    \"mac_xctest_bundle\",\n    \"mac_xcuitest_bundle\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "generator_extra_sources_for_rules",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_extra_sources_for_rules = [\n    \"mac_bundle_resources\",\n    \"mac_framework_headers\",\n    \"mac_framework_private_headers\",\n]\ngenerator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset(\n    [\"$(SDKROOT)/usr/lib\", \"$(SDKROOT)/usr/local/lib\"]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "generator_filelist_paths = None\n# Xcode's standard set of library directories, which don't need to be duplicated\n# in LIBRARY_SEARCH_PATHS. This list is not exhaustive, but that's okay.\nxcode_standard_library_dirs = frozenset(\n    [\"$(SDKROOT)/usr/lib\", \"$(SDKROOT)/usr/local/lib\"]\n)\ndef CreateXCConfigurationList(configuration_names):\n    xccl = gyp.xcodeproj_file.XCConfigurationList({\"buildConfigurations\": []})\n    if len(configuration_names) == 0:\n        configuration_names = [\"Default\"]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "xcode_standard_library_dirs",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "xcode_standard_library_dirs = frozenset(\n    [\"$(SDKROOT)/usr/lib\", \"$(SDKROOT)/usr/local/lib\"]\n)\ndef CreateXCConfigurationList(configuration_names):\n    xccl = gyp.xcodeproj_file.XCConfigurationList({\"buildConfigurations\": []})\n    if len(configuration_names) == 0:\n        configuration_names = [\"Default\"]\n    for configuration_name in configuration_names:\n        xcbc = gyp.xcodeproj_file.XCBuildConfiguration({\"name\": configuration_name})\n        xccl.AppendProperty(\"buildConfigurations\", xcbc)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "file",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "file = open('$TMPDIR/GYP_serialize_test_runs', 'a')\nfcntl.flock(file.fileno(), fcntl.LOCK_EX)\nsys.exit(subprocess.call(sys.argv[1:]))\" \"\"\"\n                # If we were unable to exec for some reason, we want to exit\n                # with an error, and fixup variable references to be shell\n                # syntax instead of xcode syntax.\n                script = (\n                    script\n                    + \"exec \"\n                    + command_prefix",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "_xcode_variable_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_xcode_variable_re = re.compile(r\"(\\$\\((.*?)\\))\")\ndef ExpandXcodeVariables(string, expansions):\n    \"\"\"Expands Xcode-style $(VARIABLES) in string per the expansions dict.\n  In some rare cases, it is appropriate to expand Xcode variables when a\n  project file is generated.  For any substring $(VAR) in string, if VAR is a\n  key in the expansions dict, $(VAR) will be replaced with expansions[VAR].\n  Any $(VAR) substring in string for which VAR is not a key in the expansions\n  dict will remain in the returned string.\n  \"\"\"\n    matches = _xcode_variable_re.findall(string)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "_xcode_define_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "peekOfCode": "_xcode_define_re = re.compile(r\"([\\\\\\\"\\' ])\")\ndef EscapeXcodeDefine(s):\n    \"\"\"We must escape the defines that we give to XCode so that it knows not to\n     split on spaces and to respect backslash and quote literals. However, we\n     must not quote the define, or Xcode will incorrectly interpret variables\n     especially $(inherited).\"\"\"\n    return re.sub(_xcode_define_re, r\"\\\\\\1\", s)\ndef PerformBuild(data, configurations, params):\n    options = params[\"options\"]\n    for build_file, build_file_dict in data.items():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode",
        "documentation": {}
    },
    {
        "label": "TestEscapeXcodeDefine",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "peekOfCode": "class TestEscapeXcodeDefine(unittest.TestCase):\n    if sys.platform == \"darwin\":\n        def test_InheritedRemainsUnescaped(self):\n            self.assertEqual(xcode.EscapeXcodeDefine(\"$(inherited)\"), \"$(inherited)\")\n        def test_Escaping(self):\n            self.assertEqual(xcode.EscapeXcodeDefine('a b\"c\\\\'), 'a\\\\ b\\\\\"c\\\\\\\\')\nif __name__ == \"__main__\":\n    unittest.main()",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.generator.xcode_test",
        "documentation": {}
    },
    {
        "label": "MSVSSolutionEntry",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSSolutionEntry:\n    def __cmp__(self, other):\n        # Sort by name then guid (so things are in order on vs2008).\n        return cmp((self.name, self.get_guid()), (other.name, other.get_guid()))\nclass MSVSFolder(MSVSSolutionEntry):\n    \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n    def __init__(self, path, name=None, entries=None, guid=None, items=None):\n        \"\"\"Initializes the folder.\n    Args:\n      path: Full path to the folder.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "MSVSFolder",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSFolder(MSVSSolutionEntry):\n    \"\"\"Folder in a Visual Studio project or solution.\"\"\"\n    def __init__(self, path, name=None, entries=None, guid=None, items=None):\n        \"\"\"Initializes the folder.\n    Args:\n      path: Full path to the folder.\n      name: Name of the folder.\n      entries: List of folder entries to nest inside this folder.  May contain\n          Folder or Project objects.  May be None, if the folder is empty.\n      guid: GUID to use for folder, if not None.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "MSVSProject",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSProject(MSVSSolutionEntry):\n    \"\"\"Visual Studio project.\"\"\"\n    def __init__(\n        self,\n        path,\n        name=None,\n        dependencies=None,\n        guid=None,\n        spec=None,\n        build_file=None,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "MSVSSolution",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "class MSVSSolution:\n    \"\"\"Visual Studio solution.\"\"\"\n    def __init__(\n        self, path, version, entries=None, variants=None, websiteProperties=True\n    ):\n        \"\"\"Initializes the solution.\n    Args:\n      path: Path to solution file.\n      version: Format version to emit.\n      entries: List of entries in solution.  May contain Folder or Project",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "cmp",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "def cmp(x, y):\n    return (x > y) - (x < y)\n# Initialize random number generator\nrandom.seed()\n# GUIDs for project types\nENTRY_TYPE_GUIDS = {\n    \"project\": \"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\",\n    \"folder\": \"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\",\n}\n# ------------------------------------------------------------------------------",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "MakeGuid",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "def MakeGuid(name, seed=\"msvs_new\"):\n    \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.\n    seed: Seed for MD5 hash.\n  Returns:\n    A GUID-line string calculated from the name and seed.\n  This generates something which looks like a GUID, but depends only on the\n  name and seed.  This means the same name/seed will always generate the same\n  GUID, so that projects and solutions which refer to each other can explicitly",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "ENTRY_TYPE_GUIDS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "peekOfCode": "ENTRY_TYPE_GUIDS = {\n    \"project\": \"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\",\n    \"folder\": \"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\",\n}\n# ------------------------------------------------------------------------------\n# Helper functions\ndef MakeGuid(name, seed=\"msvs_new\"):\n    \"\"\"Returns a GUID for the specified target name.\n  Args:\n    name: Target name.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSNew",
        "documentation": {}
    },
    {
        "label": "Tool",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Tool:\n    \"\"\"Visual Studio tool.\"\"\"\n    def __init__(self, name, attrs=None):\n        \"\"\"Initializes the tool.\n    Args:\n      name: Tool name.\n      attrs: Dict of tool attributes; may be None.\n    \"\"\"\n        self._attrs = attrs or {}\n        self._attrs[\"Name\"] = name",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Filter:\n    \"\"\"Visual Studio filter - that is, a virtual folder.\"\"\"\n    def __init__(self, name, contents=None):\n        \"\"\"Initializes the folder.\n    Args:\n      name: Filter (folder) name.\n      contents: List of filenames and/or Filter objects contained.\n    \"\"\"\n        self.name = name\n        self.contents = list(contents or [])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "peekOfCode": "class Writer:\n    \"\"\"Visual Studio XML project writer.\"\"\"\n    def __init__(self, project_path, version, name, guid=None, platforms=None):\n        \"\"\"Initializes the project.\n    Args:\n      project_path: Path to the project file.\n      version: Format version to emit.\n      name: Name of the project.\n      guid: GUID to use for project, if not None.\n      platforms: Array of string, the supported platforms.  If null, ['Win32']",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSProject",
        "documentation": {}
    },
    {
        "label": "_Tool",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Tool:\n    \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n    def __init__(self, msvs_name, msbuild_name):\n        self.msvs_name = msvs_name\n        self.msbuild_name = msbuild_name\ndef _AddTool(tool):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_Type",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Type:\n    \"\"\"Type of settings (Base class).\"\"\"\n    def ValidateMSVS(self, value):\n        \"\"\"Verifies that the value is legal for MSVS.\n    Args:\n      value: the value to check for this type.\n    Raises:\n      ValueError if value is not valid for MSVS.\n    \"\"\"\n    def ValidateMSBuild(self, value):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_String",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _String(_Type):\n    \"\"\"A setting that's just a string.\"\"\"\n    def ValidateMSVS(self, value):\n        if not isinstance(value, str):\n            raise ValueError(\"expected string; got %r\" % value)\n    def ValidateMSBuild(self, value):\n        if not isinstance(value, str):\n            raise ValueError(\"expected string; got %r\" % value)\n    def ConvertToMSBuild(self, value):\n        # Convert the macros",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_StringList",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _StringList(_Type):\n    \"\"\"A settings that's a list of strings.\"\"\"\n    def ValidateMSVS(self, value):\n        if not isinstance(value, (list, str)):\n            raise ValueError(\"expected string list; got %r\" % value)\n    def ValidateMSBuild(self, value):\n        if not isinstance(value, (list, str)):\n            raise ValueError(\"expected string list; got %r\" % value)\n    def ConvertToMSBuild(self, value):\n        # Convert the macros",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_Boolean",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Boolean(_Type):\n    \"\"\"Boolean settings, can have the values 'false' or 'true'.\"\"\"\n    def _Validate(self, value):\n        if value != \"true\" and value != \"false\":\n            raise ValueError(\"expected bool; got %r\" % value)\n    def ValidateMSVS(self, value):\n        self._Validate(value)\n    def ValidateMSBuild(self, value):\n        self._Validate(value)\n    def ConvertToMSBuild(self, value):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_Integer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Integer(_Type):\n    \"\"\"Integer settings.\"\"\"\n    def __init__(self, msbuild_base=10):\n        _Type.__init__(self)\n        self._msbuild_base = msbuild_base\n    def ValidateMSVS(self, value):\n        # Try to convert, this will raise ValueError if invalid.\n        self.ConvertToMSBuild(value)\n    def ValidateMSBuild(self, value):\n        # Try to convert, this will raise ValueError if invalid.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_Enumeration",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "class _Enumeration(_Type):\n    \"\"\"Type of settings that is an enumeration.\n  In MSVS, the values are indexes like '0', '1', and '2'.\n  MSBuild uses text labels that are more representative, like 'Win32'.\n  Constructor args:\n    label_list: an array of MSBuild labels that correspond to the MSVS index.\n        In the rare cases where MSVS has skipped an index value, None is\n        used in the array to indicate the unused spot.\n    new: an array of labels that are new to MSBuild.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "FixVCMacroSlashes",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def FixVCMacroSlashes(s):\n    \"\"\"Replace macros which have excessive following slashes.\n  These macros are known to have a built-in trailing slash. Furthermore, many\n  scripts hiccup on processing paths with extra slashes in the middle.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n    if \"$\" in s:\n        s = fix_vc_macro_slashes_regex.sub(r\"\\1\", s)\n    return s\ndef ConvertVCMacrosToMSBuild(s):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "ConvertVCMacrosToMSBuild",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ConvertVCMacrosToMSBuild(s):\n    \"\"\"Convert the MSVS macros found in the string to the MSBuild equivalent.\n  This list is probably not exhaustive.  Add as needed.\n  \"\"\"\n    if \"$\" in s:\n        replace_map = {\n            \"$(ConfigurationName)\": \"$(Configuration)\",\n            \"$(InputDir)\": \"%(RelativeDir)\",\n            \"$(InputExt)\": \"%(Extension)\",\n            \"$(InputFileName)\": \"%(Filename)%(Extension)\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "ConvertToMSBuildSettings",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ConvertToMSBuildSettings(msvs_settings, stderr=sys.stderr):\n    \"\"\"Converts MSVS settings (VS2008 and earlier) to MSBuild settings (VS2010+).\n  Args:\n      msvs_settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  Returns:\n      A dictionary of MSBuild settings.  The key is either the MSBuild tool name\n      or the empty string (for the global settings).  The values are themselves\n      dictionaries of settings and their values.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "ValidateMSVSSettings",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ValidateMSVSSettings(settings, stderr=sys.stderr):\n    \"\"\"Validates that the names of the settings are valid for MSVS.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n    _ValidateSettings(_msvs_validators, settings, stderr)\ndef ValidateMSBuildSettings(settings, stderr=sys.stderr):\n    \"\"\"Validates that the names of the settings are valid for MSBuild.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "ValidateMSBuildSettings",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "def ValidateMSBuildSettings(settings, stderr=sys.stderr):\n    \"\"\"Validates that the names of the settings are valid for MSBuild.\n  Args:\n      settings: A dictionary.  The key is the tool name.  The values are\n          themselves dictionaries of settings and their values.\n      stderr: The stream receiving the error messages.\n  \"\"\"\n    _ValidateSettings(_msbuild_validators, settings, stderr)\ndef _ValidateSettings(validators, settings, stderr):\n    \"\"\"Validates that the settings are valid for MSBuild or MSVS.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msvs_validators",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msvs_validators = {}\n_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool:\n    \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msbuild_validators",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators = {}\n# A dictionary of settings converters. The key is the tool name, the value is\n# a dictionary mapping setting names to conversion functions.\n_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool:\n    \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msvs_to_msbuild_converters",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msvs_to_msbuild_converters = {}\n# Tool name mapping from MSVS to MSBuild.\n_msbuild_name_of_tool = {}\nclass _Tool:\n    \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n    def __init__(self, msvs_name, msbuild_name):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msbuild_name_of_tool",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_name_of_tool = {}\nclass _Tool:\n    \"\"\"Represents a tool used by MSVS or MSBuild.\n  Attributes:\n      msvs_name: The name of the tool in MSVS.\n      msbuild_name: The name of the tool in MSBuild.\n  \"\"\"\n    def __init__(self, msvs_name, msbuild_name):\n        self.msvs_name = msvs_name\n        self.msbuild_name = msbuild_name",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_boolean",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_boolean = _Boolean()\n_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_integer",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_integer = _Integer()\n# For now, we don't do any special validation on these types:\n_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_string",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_string = _String()\n_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_file_name",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_file_name = _String()\n_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_folder_name",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_folder_name = _String()\n_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_file_list",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_file_list = _StringList()\n_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_folder_list",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_folder_list = _StringList()\n_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_string_list",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_string_list = _StringList()\n# Some boolean settings went from numerical values to boolean.  The\n# mapping is 0: default, 1: false, 2: true.\n_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_newly_boolean",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_newly_boolean = _Enumeration([\"\", \"false\", \"true\"])\ndef _Same(tool, name, setting_type):\n    \"\"\"Defines a setting that has the same name in MSVS and MSBuild.\n  Args:\n    tool: a dictionary that gives the names of the tool for MSVS and MSBuild.\n    name: the name of the setting.\n    setting_type: the type of this setting.\n  \"\"\"\n    _Renamed(tool, name, name, setting_type)\ndef _Renamed(tool, msvs_name, msbuild_name, setting_type):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "fix_vc_macro_slashes_regex_list",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "fix_vc_macro_slashes_regex_list = (\"IntDir\", \"OutDir\")\nfix_vc_macro_slashes_regex = re.compile(\n    r\"(\\$\\((?:%s)\\))(?:[\\\\/]+)\" % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile(\"^(.*)_excluded$\")\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n    \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "fix_vc_macro_slashes_regex",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "fix_vc_macro_slashes_regex = re.compile(\n    r\"(\\$\\((?:%s)\\))(?:[\\\\/]+)\" % \"|\".join(fix_vc_macro_slashes_regex_list)\n)\n# Regular expression to detect keys that were generated by exclusion lists\n_EXCLUDED_SUFFIX_RE = re.compile(\"^(.*)_excluded$\")\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n    \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_EXCLUDED_SUFFIX_RE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_EXCLUDED_SUFFIX_RE = re.compile(\"^(.*)_excluded$\")\ndef _ValidateExclusionSetting(setting, settings, error_msg, stderr=sys.stderr):\n    \"\"\"Verify that 'setting' is valid if it is generated from an exclusion list.\n  If the setting appears to be generated from an exclusion list, the root name\n  is checked.\n  Args:\n      setting:   A string that is the setting name to validate\n      settings:  A dictionary where the keys are valid settings\n      error_msg: The message to emit in the event of error\n      stderr:    The stream receiving the error messages.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_compile",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_compile = _Tool(\"VCCLCompilerTool\", \"ClCompile\")\n_link = _Tool(\"VCLinkerTool\", \"Link\")\n_midl = _Tool(\"VCMIDLTool\", \"Midl\")\n_rc = _Tool(\"VCResourceCompilerTool\", \"ResourceCompile\")\n_lib = _Tool(\"VCLibrarianTool\", \"Lib\")\n_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_link",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_link = _Tool(\"VCLinkerTool\", \"Link\")\n_midl = _Tool(\"VCMIDLTool\", \"Midl\")\n_rc = _Tool(\"VCResourceCompilerTool\", \"ResourceCompile\")\n_lib = _Tool(\"VCLibrarianTool\", \"Lib\")\n_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_midl",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_midl = _Tool(\"VCMIDLTool\", \"Midl\")\n_rc = _Tool(\"VCResourceCompilerTool\", \"ResourceCompile\")\n_lib = _Tool(\"VCLibrarianTool\", \"Lib\")\n_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_rc",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_rc = _Tool(\"VCResourceCompilerTool\", \"ResourceCompile\")\n_lib = _Tool(\"VCLibrarianTool\", \"Lib\")\n_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_lib",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_lib = _Tool(\"VCLibrarianTool\", \"Lib\")\n_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_manifest",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_manifest = _Tool(\"VCManifestTool\", \"Manifest\")\n_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_masm",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_masm = _Tool(\"MASM\", \"MASM\")\n_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n_AddTool(_armasm)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_armasm",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_armasm = _Tool(\"ARMASM\", \"ARMASM\")\n_AddTool(_compile)\n_AddTool(_link)\n_AddTool(_midl)\n_AddTool(_rc)\n_AddTool(_lib)\n_AddTool(_manifest)\n_AddTool(_masm)\n_AddTool(_armasm)\n# Add sections only found in the MSBuild settings.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msbuild_validators[\"\"]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators[\"\"] = {}\n_msbuild_validators[\"ProjectReference\"] = {}\n_msbuild_validators[\"ManifestResourceCompile\"] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msbuild_validators[\"ProjectReference\"]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators[\"ProjectReference\"] = {}\n_msbuild_validators[\"ManifestResourceCompile\"] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)\n_Same(_compile, \"AdditionalUsingDirectories\", _folder_list)  # /AI",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_msbuild_validators[\"ManifestResourceCompile\"]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_msbuild_validators[\"ManifestResourceCompile\"] = {}\n# Descriptions of the compiler options, i.e. VCCLCompilerTool in MSVS and\n# ClCompile in MSBuild.\n# See \"c:\\Program Files (x86)\\MSBuild\\Microsoft.Cpp\\v4.0\\1033\\cl.xml\" for\n# the schema of the MSBuild ClCompile settings.\n# Options that have the same name in MSVS and MSBuild\n_Same(_compile, \"AdditionalIncludeDirectories\", _folder_list)  # /I\n_Same(_compile, \"AdditionalOptions\", _string_list)\n_Same(_compile, \"AdditionalUsingDirectories\", _folder_list)  # /AI\n_Same(_compile, \"AssemblerListingLocation\", _file_name)  # /Fa",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_subsystem_enumeration",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_subsystem_enumeration = _Enumeration(\n    [\n        \"NotSet\",\n        \"Console\",  # /SUBSYSTEM:CONSOLE\n        \"Windows\",  # /SUBSYSTEM:WINDOWS\n        \"Native\",  # /SUBSYSTEM:NATIVE\n        \"EFI Application\",  # /SUBSYSTEM:EFI_APPLICATION\n        \"EFI Boot Service Driver\",  # /SUBSYSTEM:EFI_BOOT_SERVICE_DRIVER\n        \"EFI ROM\",  # /SUBSYSTEM:EFI_ROM\n        \"EFI Runtime\",  # /SUBSYSTEM:EFI_RUNTIME_DRIVER",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "_target_machine_enumeration",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "peekOfCode": "_target_machine_enumeration = _Enumeration(\n    [\n        \"NotSet\",\n        \"MachineX86\",  # /MACHINE:X86\n        None,\n        \"MachineARM\",  # /MACHINE:ARM\n        \"MachineEBC\",  # /MACHINE:EBC\n        \"MachineIA64\",  # /MACHINE:IA64\n        None,\n        \"MachineMIPS\",  # /MACHINE:MIPS",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings",
        "documentation": {}
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.stderr = StringIO()\n    def _ExpectedWarnings(self, expected):\n        \"\"\"Compares recorded lines to expected warnings.\"\"\"\n        self.stderr.seek(0)\n        actual = self.stderr.read().split(\"\\n\")\n        actual = [line for line in actual if line]\n        self.assertEqual(sorted(expected), sorted(actual))\n    def testValidateMSVSSettings_tool_names(self):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSSettings_test",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "peekOfCode": "class Writer:\n    \"\"\"Visual Studio XML tool file writer.\"\"\"\n    def __init__(self, tool_file_path, name):\n        \"\"\"Initializes the tool file.\n    Args:\n      tool_file_path: Path to the tool file.\n      name: Name of the tool file.\n    \"\"\"\n        self.tool_file_path = tool_file_path\n        self.name = name",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSToolFile",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "peekOfCode": "class Writer:\n    \"\"\"Visual Studio XML user user file writer.\"\"\"\n    def __init__(self, user_file_path, version, name):\n        \"\"\"Initializes the user file.\n    Args:\n      user_file_path: Path to the user file.\n      version: Version info.\n      name: Name of the user file.\n    \"\"\"\n        self.user_file_path = user_file_path",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUserFile",
        "documentation": {}
    },
    {
        "label": "ShardTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "def ShardTargets(target_list, target_dicts):\n    \"\"\"Shard some targets apart to work around the linkers limits.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n  Returns:\n    Tuple of the new sharded versions of the inputs.\n  \"\"\"\n    # Gather the targets to shard, and how many pieces.\n    targets_to_shard = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {}
    },
    {
        "label": "InsertLargePdbShims",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "def InsertLargePdbShims(target_list, target_dicts, vars):\n    \"\"\"Insert a shim target that forces the linker to use 4KB pagesize PDBs.\n  This is a workaround for targets with PDBs greater than 1GB in size, the\n  limit for the 1KB pagesize PDBs created by the linker by default.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    vars: A dictionary of common GYP variables with generator-specific values.\n  Returns:\n    Tuple of the shimmed version of the inputs.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {}
    },
    {
        "label": "TARGET_TYPE_EXT",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "peekOfCode": "TARGET_TYPE_EXT = {\n    \"executable\": \"exe\",\n    \"loadable_module\": \"dll\",\n    \"shared_library\": \"dll\",\n    \"static_library\": \"lib\",\n    \"windows_driver\": \"sys\",\n}\ndef _GetLargePdbShimCcPath():\n    \"\"\"Returns the path of the large_pdb_shim.cc file.\"\"\"\n    this_dir = os.path.abspath(os.path.dirname(__file__))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSUtil",
        "documentation": {}
    },
    {
        "label": "VisualStudioVersion",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "peekOfCode": "class VisualStudioVersion:\n    \"\"\"Information regarding a version of Visual Studio.\"\"\"\n    def __init__(\n        self,\n        short_name,\n        description,\n        solution_version,\n        project_version,\n        flat_sln,\n        uses_vcxproj,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "documentation": {}
    },
    {
        "label": "JoinPath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "peekOfCode": "def JoinPath(*args):\n    return os.path.normpath(os.path.join(*args))\nclass VisualStudioVersion:\n    \"\"\"Information regarding a version of Visual Studio.\"\"\"\n    def __init__(\n        self,\n        short_name,\n        description,\n        solution_version,\n        project_version,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "documentation": {}
    },
    {
        "label": "SelectVisualStudioVersion",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "peekOfCode": "def SelectVisualStudioVersion(version=\"auto\", allow_fallback=True):\n    \"\"\"Select which version of Visual Studio projects to generate.\n  Arguments:\n    version: Hook to allow caller to force a particular version (vs auto).\n  Returns:\n    An object representing a visual studio project format version.\n  \"\"\"\n    # In auto mode, check environment variable for override.\n    if version == \"auto\":\n        version = os.environ.get(\"GYP_MSVS_VERSION\", \"auto\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.MSVSVersion",
        "documentation": {}
    },
    {
        "label": "memoize",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class memoize:\n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n    def __call__(self, *args):\n        try:\n            return self.cache[args]\n        except KeyError:\n            result = self.func(*args)\n            self.cache[args] = result",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "GypError",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class GypError(Exception):\n    \"\"\"Error class representing an error, which is to be presented\n  to the user.  The main entry point will catch and display this.\n  \"\"\"\n    pass\ndef ExceptionAppend(e, msg):\n    \"\"\"Append a message to the given exception's message.\"\"\"\n    if not e.args:\n        e.args = (msg,)\n    elif len(e.args) == 1:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "OrderedSet",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class OrderedSet(MutableSet):\n    def __init__(self, iterable=None):\n        self.end = end = []\n        end += [None, end, end]  # sentinel node for doubly linked list\n        self.map = {}  # key --> [key, prev, next]\n        if iterable is not None:\n            self |= iterable\n    def __len__(self):\n        return len(self.map)\n    def __contains__(self, key):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "CycleError",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "class CycleError(Exception):\n    \"\"\"An exception raised when an unexpected cycle is detected.\"\"\"\n    def __init__(self, nodes):\n        self.nodes = nodes\n    def __str__(self):\n        return \"CycleError: cycle involving: \" + str(self.nodes)\ndef TopologicallySorted(graph, get_edges):\n    r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "ExceptionAppend",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ExceptionAppend(e, msg):\n    \"\"\"Append a message to the given exception's message.\"\"\"\n    if not e.args:\n        e.args = (msg,)\n    elif len(e.args) == 1:\n        e.args = (str(e.args[0]) + \" \" + msg,)\n    else:\n        e.args = (str(e.args[0]) + \" \" + msg,) + e.args[1:]\ndef FindQualifiedTargets(target, qualified_list):\n    \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "FindQualifiedTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def FindQualifiedTargets(target, qualified_list):\n    \"\"\"\n  Given a list of qualified targets, return the qualified targets for the\n  specified |target|.\n  \"\"\"\n    return [t for t in qualified_list if ParseQualifiedTarget(t)[1] == target]\ndef ParseQualifiedTarget(target):\n    # Splits a qualified target into a build file, target name and toolset.\n    # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n    target_split = target.rsplit(\":\", 1)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "ParseQualifiedTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ParseQualifiedTarget(target):\n    # Splits a qualified target into a build file, target name and toolset.\n    # NOTE: rsplit is used to disambiguate the Windows drive letter separator.\n    target_split = target.rsplit(\":\", 1)\n    if len(target_split) == 2:\n        [build_file, target] = target_split\n    else:\n        build_file = None\n    target_split = target.rsplit(\"#\", 1)\n    if len(target_split) == 2:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "ResolveTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def ResolveTarget(build_file, target, toolset):\n    # This function resolves a target into a canonical form:\n    # - a fully defined build file, either absolute or relative to the current\n    # directory\n    # - a target name\n    # - a toolset\n    #\n    # build_file is the file relative to which 'target' is defined.\n    # target is the qualified target.\n    # toolset is the default toolset for that target.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "BuildFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def BuildFile(fully_qualified_target):\n    # Extracts the build file from the fully qualified target.\n    return ParseQualifiedTarget(fully_qualified_target)[0]\ndef GetEnvironFallback(var_list, default):\n    \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n    for var in var_list:\n        if var in os.environ:\n            return os.environ[var]\n    return default",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "GetEnvironFallback",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def GetEnvironFallback(var_list, default):\n    \"\"\"Look up a key in the environment, with fallback to secondary keys\n  and finally falling back to a default value.\"\"\"\n    for var in var_list:\n        if var in os.environ:\n            return os.environ[var]\n    return default\ndef QualifiedTarget(build_file, target, toolset):\n    # \"Qualified\" means the file that a target was defined in and the target\n    # name, separated by a colon, suffixed by a # and the toolset name:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "QualifiedTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def QualifiedTarget(build_file, target, toolset):\n    # \"Qualified\" means the file that a target was defined in and the target\n    # name, separated by a colon, suffixed by a # and the toolset name:\n    # /path/to/file.gyp:target_name#toolset\n    fully_qualified = build_file + \":\" + target\n    if toolset:\n        fully_qualified = fully_qualified + \"#\" + toolset\n    return fully_qualified\n@memoize\ndef RelativePath(path, relative_to, follow_path_symlink=True):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "RelativePath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def RelativePath(path, relative_to, follow_path_symlink=True):\n    # Assuming both |path| and |relative_to| are relative to the current\n    # directory, returns a relative path that identifies path relative to\n    # relative_to.\n    # If |follow_symlink_path| is true (default) and |path| is a symlink, then\n    # this method returns a path to the real file represented by |path|. If it is\n    # false, this method returns a path to the symlink. If |path| is not a\n    # symlink, this option has no effect.\n    # Convert to normalized (and therefore absolute paths).\n    if follow_path_symlink:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "InvertRelativePath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def InvertRelativePath(path, toplevel_dir=None):\n    \"\"\"Given a path like foo/bar that is relative to toplevel_dir, return\n  the inverse relative path back to the toplevel_dir.\n  E.g. os.path.normpath(os.path.join(path, InvertRelativePath(path)))\n  should always produce the empty string, unless the path contains symlinks.\n  \"\"\"\n    if not path:\n        return path\n    toplevel_dir = \".\" if toplevel_dir is None else toplevel_dir\n    return RelativePath(toplevel_dir, os.path.join(toplevel_dir, path))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "FixIfRelativePath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def FixIfRelativePath(path, relative_to):\n    # Like RelativePath but returns |path| unchanged if it is absolute.\n    if os.path.isabs(path):\n        return path\n    return RelativePath(path, relative_to)\ndef UnrelativePath(path, relative_to):\n    # Assuming that |relative_to| is relative to the current directory, and |path|\n    # is a path relative to the dirname of |relative_to|, returns a path that\n    # identifies |path| relative to the current directory.\n    rel_dir = os.path.dirname(relative_to)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "UnrelativePath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def UnrelativePath(path, relative_to):\n    # Assuming that |relative_to| is relative to the current directory, and |path|\n    # is a path relative to the dirname of |relative_to|, returns a path that\n    # identifies |path| relative to the current directory.\n    rel_dir = os.path.dirname(relative_to)\n    return os.path.normpath(os.path.join(rel_dir, path))\n# re objects used by EncodePOSIXShellArgument.  See IEEE 1003.1 XCU.2.2 at\n# http://www.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_02\n# and the documentation for various shells.\n# _quote is a pattern that should match any argument that needs to be quoted",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "EncodePOSIXShellArgument",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EncodePOSIXShellArgument(argument):\n    \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n    if not isinstance(argument, str):\n        argument = str(argument)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "EncodePOSIXShellList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EncodePOSIXShellList(list):\n    \"\"\"Encodes |list| suitably for consumption by POSIX shells.\n  Returns EncodePOSIXShellArgument for each item in list, and joins them\n  together using the space character as an argument separator.\n  \"\"\"\n    encoded_arguments = []\n    for argument in list:\n        encoded_arguments.append(EncodePOSIXShellArgument(argument))\n    return \" \".join(encoded_arguments)\ndef DeepDependencyTargets(target_dicts, roots):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "DeepDependencyTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def DeepDependencyTargets(target_dicts, roots):\n    \"\"\"Returns the recursive list of target dependencies.\"\"\"\n    dependencies = set()\n    pending = set(roots)\n    while pending:\n        # Pluck out one.\n        r = pending.pop()\n        # Skip if visited already.\n        if r in dependencies:\n            continue",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "BuildFileTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def BuildFileTargets(target_list, build_file):\n    \"\"\"From a target_list, returns the subset from the specified build_file.\n  \"\"\"\n    return [p for p in target_list if BuildFile(p) == build_file]\ndef AllTargets(target_list, target_dicts, build_file):\n    \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n    bftargets = BuildFileTargets(target_list, build_file)\n    deptargets = DeepDependencyTargets(target_dicts, bftargets)\n    return bftargets + deptargets",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "AllTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def AllTargets(target_list, target_dicts, build_file):\n    \"\"\"Returns all targets (direct and dependencies) for the specified build_file.\n  \"\"\"\n    bftargets = BuildFileTargets(target_list, build_file)\n    deptargets = DeepDependencyTargets(target_dicts, bftargets)\n    return bftargets + deptargets\ndef WriteOnDiff(filename):\n    \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "WriteOnDiff",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def WriteOnDiff(filename):\n    \"\"\"Write to a file only if the new contents differ.\n  Arguments:\n    filename: name of the file to potentially write to.\n  Returns:\n    A file like object which will write to temporary file and only overwrite\n    the target if it differs (on close).\n  \"\"\"\n    class Writer:\n        \"\"\"Wrapper around file which only covers the target if it differs.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "EnsureDirExists",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def EnsureDirExists(path):\n    \"\"\"Make sure the directory for |path| exists.\"\"\"\n    try:\n        os.makedirs(os.path.dirname(path))\n    except OSError:\n        pass\ndef GetFlavor(params):\n    \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n    flavors = {\n        \"cygwin\": \"win\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "GetFlavor",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def GetFlavor(params):\n    \"\"\"Returns |params.flavor| if it's set, the system's default flavor else.\"\"\"\n    flavors = {\n        \"cygwin\": \"win\",\n        \"win32\": \"win\",\n        \"darwin\": \"mac\",\n    }\n    if \"flavor\" in params:\n        return params[\"flavor\"]\n    if sys.platform in flavors:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "CopyTool",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def CopyTool(flavor, out_path, generator_flags={}):\n    \"\"\"Finds (flock|mac|win)_tool.gyp in the gyp directory and copies it\n  to |out_path|.\"\"\"\n    # aix and solaris just need flock emulation. mac and win use more complicated\n    # support scripts.\n    prefix = {\"aix\": \"flock\", \"solaris\": \"flock\", \"mac\": \"mac\", \"win\": \"win\"}.get(\n        flavor, None\n    )\n    if not prefix:\n        return",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "uniquer",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def uniquer(seq, idfun=lambda x: x):\n    seen = {}\n    result = []\n    for item in seq:\n        marker = idfun(item)\n        if marker in seen:\n            continue\n        seen[marker] = 1\n        result.append(item)\n    return result",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "TopologicallySorted",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def TopologicallySorted(graph, get_edges):\n    r\"\"\"Topologically sort based on a user provided edge definition.\n  Args:\n    graph: A list of node names.\n    get_edges: A function mapping from node name to a hashable collection\n               of node names which this node has outgoing edges to.\n  Returns:\n    A list containing all of the node in graph in topological order.\n    It is assumed that calling get_edges once for each node and caching is\n    cheaper than repeatedly calling get_edges.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "CrossCompileRequested",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def CrossCompileRequested():\n    # TODO: figure out how to not build extra host objects in the\n    # non-cross-compile case when this is enabled, and enable unconditionally.\n    return (\n        os.environ.get(\"GYP_CROSSCOMPILE\")\n        or os.environ.get(\"AR_host\")\n        or os.environ.get(\"CC_host\")\n        or os.environ.get(\"CXX_host\")\n        or os.environ.get(\"AR_target\")\n        or os.environ.get(\"CC_target\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "IsCygwin",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "def IsCygwin():\n    try:\n        out = subprocess.Popen(\n            \"uname\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n        stdout = out.communicate()[0].decode(\"utf-8\")\n        return \"CYGWIN\" in str(stdout)\n    except Exception:\n        return False",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "_quote",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "_quote = re.compile(\"[\\t\\n #$%&'()*;<=>?[{|}~]|^$\")\n# _escape is a pattern that should match any character that needs to be\n# escaped with a backslash, whether or not the argument matched the _quote\n# pattern.  _escape is used with re.sub to backslash anything in _escape's\n# first match group, hence the (parentheses) in the regular expression.\n#\n# _escape matches the following characters appearing anywhere in an argument:\n#   \"  to prevent POSIX shells from interpreting this character for quoting\n#   \\  to prevent POSIX shells from interpreting this character for escaping\n#   `  to prevent POSIX shells from interpreting this character for command",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "_escape",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "peekOfCode": "_escape = re.compile(r'([\"\\\\`])')\ndef EncodePOSIXShellArgument(argument):\n    \"\"\"Encodes |argument| suitably for consumption by POSIX shells.\n  argument may be quoted and escaped as necessary to ensure that POSIX shells\n  treat the returned value as a literal representing the argument passed to\n  this function.  Parameter (variable) expansions beginning with $ are allowed\n  to remain intact without escaping the $, to allow the argument to contain\n  references to variables to be expanded by the shell.\n  \"\"\"\n    if not isinstance(argument, str):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common",
        "documentation": {}
    },
    {
        "label": "TestTopologicallySorted",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "peekOfCode": "class TestTopologicallySorted(unittest.TestCase):\n    def test_Valid(self):\n        \"\"\"Test that sorting works on a valid graph with one possible order.\"\"\"\n        graph = {\n            \"a\": [\"b\", \"c\"],\n            \"b\": [],\n            \"c\": [\"d\"],\n            \"d\": [\"b\"],\n        }\n        def GetEdge(node):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "documentation": {}
    },
    {
        "label": "TestGetFlavor",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "peekOfCode": "class TestGetFlavor(unittest.TestCase):\n    \"\"\"Test that gyp.common.GetFlavor works as intended\"\"\"\n    original_platform = \"\"\n    def setUp(self):\n        self.original_platform = sys.platform\n    def tearDown(self):\n        sys.platform = self.original_platform\n    def assertFlavor(self, expected, argument, param):\n        sys.platform = argument\n        self.assertEqual(expected, gyp.common.GetFlavor(param))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.common_test",
        "documentation": {}
    },
    {
        "label": "XmlToString",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "def XmlToString(content, encoding=\"utf-8\", pretty=False):\n    \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Visual Studio files have a lot of pre-defined structures.  This function makes\n  it easy to represent these structures as Python data structures, instead of\n  having to create a lot of function calls.\n  Each XML element of the content is represented as a list composed of:\n  1. The name of the element, a string,\n  2. The attributes of the element, a dictionary (optional), and\n  3+. The content of the element, if any.  Strings are simple text nodes and\n      lists are child elements.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {}
    },
    {
        "label": "WriteXmlIfChanged",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "def WriteXmlIfChanged(content, path, encoding=\"utf-8\", pretty=False,\n                      win32=(sys.platform == \"win32\")):\n    \"\"\" Writes the XML content to disk, touching the file only if it has changed.\n  Args:\n    content:  The structured content to be written.\n    path: Location of the file.\n    encoding: The encoding to report on the first line of the XML file.\n    pretty: True if we want pretty printing with indents and new lines.\n  \"\"\"\n    xml_string = XmlToString(content, encoding, pretty)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {}
    },
    {
        "label": "_xml_escape_map",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "_xml_escape_map = {\n    '\"': \"&quot;\",\n    \"'\": \"&apos;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"&\": \"&amp;\",\n    \"\\n\": \"&#xA;\",\n    \"\\r\": \"&#xD;\",\n}\n_xml_escape_re = re.compile(\"(%s)\" % \"|\".join(map(re.escape, _xml_escape_map.keys())))",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {}
    },
    {
        "label": "_xml_escape_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "peekOfCode": "_xml_escape_re = re.compile(\"(%s)\" % \"|\".join(map(re.escape, _xml_escape_map.keys())))\ndef _XmlEscape(value, attr=False):\n    \"\"\" Escape a string for inclusion in XML.\"\"\"\n    def replace(match):\n        m = match.string[match.start() : match.end()]\n        # don't replace single quotes in attrs\n        if attr and m == \"'\":\n            return m\n        return _xml_escape_map[m]\n    return _xml_escape_re.sub(replace, value)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml",
        "documentation": {}
    },
    {
        "label": "TestSequenceFunctions",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "peekOfCode": "class TestSequenceFunctions(unittest.TestCase):\n    def setUp(self):\n        self.stderr = StringIO()\n    def test_EasyXml_simple(self):\n        self.assertEqual(\n            easy_xml.XmlToString([\"test\"]),\n            '<?xml version=\"1.0\" encoding=\"utf-8\"?><test/>',\n        )\n        self.assertEqual(\n            easy_xml.XmlToString([\"test\"], encoding=\"Windows-1252\"),",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.easy_xml_test",
        "documentation": {}
    },
    {
        "label": "FlockTool",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "peekOfCode": "class FlockTool:\n    \"\"\"This class emulates the 'flock' command.\"\"\"\n    def Dispatch(self, args):\n        \"\"\"Dispatches a string command to a method.\"\"\"\n        if len(args) < 1:\n            raise Exception(\"Not enough arguments\")\n        method = \"Exec%s\" % self._CommandifyName(args[0])\n        getattr(self, method)(*args[1:])\n    def _CommandifyName(self, name_string):\n        \"\"\"Transforms a tool name like copy-info-plist to CopyInfoPlist\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "peekOfCode": "def main(args):\n    executor = FlockTool()\n    executor.Dispatch(args)\nclass FlockTool:\n    \"\"\"This class emulates the 'flock' command.\"\"\"\n    def Dispatch(self, args):\n        \"\"\"Dispatches a string command to a method.\"\"\"\n        if len(args) < 1:\n            raise Exception(\"Not enough arguments\")\n        method = \"Exec%s\" % self._CommandifyName(args[0])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.flock_tool",
        "documentation": {}
    },
    {
        "label": "ParallelProcessingError",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class ParallelProcessingError(Exception):\n    pass\nclass ParallelState:\n    \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n    def __init__(self):\n        # The multiprocessing pool.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ParallelState",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class ParallelState:\n    \"\"\"Class to keep track of state when processing input files in parallel.\n  If build files are loaded in parallel, use this to keep track of\n  state during farming out and processing parallel jobs. It's stored\n  in a global so that the callback function can have access to it.\n  \"\"\"\n    def __init__(self):\n        # The multiprocessing pool.\n        self.pool = None\n        # The condition variable used to protect this object and notify",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "DependencyGraphNode",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "class DependencyGraphNode:\n    \"\"\"\n  Attributes:\n    ref: A reference to an object that this DependencyGraphNode represents.\n    dependencies: List of DependencyGraphNodes on which this one depends.\n    dependents: List of DependencyGraphNodes that depend on this one.\n  \"\"\"\n    class CircularException(GypError):\n        pass\n    def __init__(self, ref):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "IsPathSection",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def IsPathSection(section):\n    # If section ends in one of the '=+?!' characters, it's applied to a section\n    # without the trailing characters.  '/' is notably absent from this list,\n    # because there's no way for a regular expression to be treated as a path.\n    while section and section[-1:] in \"=+?!\":\n        section = section[:-1]\n    if section in path_sections:\n        return True\n    # Sections matching the regexp '_(dir|file|path)s?$' are also\n    # considered PathSections. Using manual string matching since that",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "GetIncludedBuildFiles",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n    \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.\n  included should be left at its default None value by external callers.  It",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "CheckedEval",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CheckedEval(file_contents):\n    \"\"\"Return the eval of a gyp file.\n  The gyp file is restricted to dictionaries and lists only, and\n  repeated keys are not allowed.\n  Note that this is slower than eval() is.\n  \"\"\"\n    syntax_tree = ast.parse(file_contents)\n    assert isinstance(syntax_tree, ast.Module)\n    c1 = syntax_tree.body\n    assert len(c1) == 1",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "CheckNode",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CheckNode(node, keypath):\n    if isinstance(node, ast.Dict):\n        dict = {}\n        for key, value in zip(node.keys, node.values):\n            assert isinstance(key, ast.Str)\n            key = key.s\n            if key in dict:\n                raise GypError(\n                    \"Key '\"\n                    + key",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadOneBuildFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadOneBuildFile(build_file_path, data, aux_data, includes, is_target, check):\n    if build_file_path in data:\n        return data[build_file_path]\n    if os.path.exists(build_file_path):\n        build_file_contents = open(build_file_path, encoding='utf-8').read()\n    else:\n        raise GypError(f\"{build_file_path} not found (cwd: {os.getcwd()})\")\n    build_file_data = None\n    try:\n        if check:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadBuildFileIncludesIntoDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadBuildFileIncludesIntoDict(\n    subdict, subdict_path, data, aux_data, includes, check\n):\n    includes_list = []\n    if includes is not None:\n        includes_list.extend(includes)\n    if \"includes\" in subdict:\n        for include in subdict[\"includes\"]:\n            # \"include\" is specified relative to subdict_path, so compute the real\n            # path to include by appending the provided \"include\" to the directory",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadBuildFileIncludesIntoList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadBuildFileIncludesIntoList(sublist, sublist_path, data, aux_data, check):\n    for item in sublist:\n        if type(item) is dict:\n            LoadBuildFileIncludesIntoDict(\n                item, sublist_path, data, aux_data, None, check\n            )\n        elif type(item) is list:\n            LoadBuildFileIncludesIntoList(item, sublist_path, data, aux_data, check)\n# Processes toolsets in all the targets. This recurses into condition entries\n# since they can contain toolsets as well.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessToolsetsInDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessToolsetsInDict(data):\n    if \"targets\" in data:\n        target_list = data[\"targets\"]\n        new_target_list = []\n        for target in target_list:\n            # If this target already has an explicit 'toolset', and no 'toolsets'\n            # list, don't modify it further.\n            if \"toolset\" in target and \"toolsets\" not in target:\n                new_target_list.append(target)\n                continue",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadTargetBuildFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadTargetBuildFile(\n    build_file_path,\n    data,\n    aux_data,\n    variables,\n    includes,\n    depth,\n    check,\n    load_dependencies,\n):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "CallLoadTargetBuildFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def CallLoadTargetBuildFile(\n    global_flags,\n    build_file_path,\n    variables,\n    includes,\n    depth,\n    check,\n    generator_input_info,\n):\n    \"\"\"Wrapper around LoadTargetBuildFile for parallel processing.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadTargetBuildFilesParallel",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadTargetBuildFilesParallel(\n    build_files, data, variables, includes, depth, check, generator_input_info\n):\n    parallel_state = ParallelState()\n    parallel_state.condition = threading.Condition()\n    # Make copies of the build_files argument that we can modify while working.\n    parallel_state.dependencies = list(build_files)\n    parallel_state.scheduled = set(build_files)\n    parallel_state.pending = 0\n    parallel_state.data = data",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "FindEnclosingBracketGroup",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def FindEnclosingBracketGroup(input_str):\n    stack = []\n    start = -1\n    for index, char in enumerate(input_str):\n        if char in LBRACKETS:\n            stack.append(char)\n            if start == -1:\n                start = index\n        elif char in BRACKETS:\n            if not stack:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "IsStrCanonicalInt",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def IsStrCanonicalInt(string):\n    \"\"\"Returns True if |string| is in its canonical integer form.\n  The canonical form is such that str(int(string)) == string.\n  \"\"\"\n    if type(string) is str:\n        # This function is called a lot so for maximum performance, avoid\n        # involving regexps which would otherwise make the code much\n        # shorter. Regexps would need twice the time of this function.\n        if string:\n            if string == \"0\":",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "FixupPlatformCommand",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def FixupPlatformCommand(cmd):\n    if sys.platform == \"win32\":\n        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ExpandVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ExpandVariables(input, phase, variables, build_file):\n    # Look for the pattern that gets expanded into variables\n    if phase == PHASE_EARLY:\n        variable_re = early_variable_re\n        expansion_symbol = \"<\"\n    elif phase == PHASE_LATE:\n        variable_re = late_variable_re\n        expansion_symbol = \">\"\n    elif phase == PHASE_LATELATE:\n        variable_re = latelate_variable_re",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "EvalCondition",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def EvalCondition(condition, conditions_key, phase, variables, build_file):\n    \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n    if type(condition) is not list:\n        raise GypError(conditions_key + \" must be a list\")\n    if len(condition) < 2:\n        # It's possible that condition[0] won't work in which case this\n        # attempt will raise its own IndexError.  That's probably fine.\n        raise GypError(\n            conditions_key",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "EvalSingleCondition",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def EvalSingleCondition(cond_expr, true_dict, false_dict, phase, variables, build_file):\n    \"\"\"Returns true_dict if cond_expr evaluates to true, and false_dict\n  otherwise.\"\"\"\n    # Do expansions on the condition itself.  Since the condition can naturally\n    # contain variable references without needing to resort to GYP expansion\n    # syntax, this is of dubious value for variables, but someone might want to\n    # use a command expansion directly inside a condition.\n    cond_expr_expanded = ExpandVariables(cond_expr, phase, variables, build_file)\n    if type(cond_expr_expanded) not in (str, int):\n        raise ValueError(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessConditionsInDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessConditionsInDict(the_dict, phase, variables, build_file):\n    # Process a 'conditions' or 'target_conditions' section in the_dict,\n    # depending on phase.\n    # early -> conditions\n    # late -> target_conditions\n    # latelate -> no conditions\n    #\n    # Each item in a conditions list consists of cond_expr, a string expression\n    # evaluated as the condition, and true_dict, a dict that will be merged into\n    # the_dict if cond_expr evaluates to true.  Optionally, a third item,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadAutomaticVariablesFromDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadAutomaticVariablesFromDict(variables, the_dict):\n    # Any keys with plain string values in the_dict become automatic variables.\n    # The variable name is the key name with a \"_\" character prepended.\n    for key, value in the_dict.items():\n        if type(value) in (str, int, list):\n            variables[\"_\" + key] = value\ndef LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n    # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n    # variable.  The variable name is the key name in the \"variables\" dict.\n    # Variables that end with the % character are set only if they are unset in",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LoadVariablesFromVariablesDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def LoadVariablesFromVariablesDict(variables, the_dict, the_dict_key):\n    # Any keys in the_dict's \"variables\" dict, if it has one, becomes a\n    # variable.  The variable name is the key name in the \"variables\" dict.\n    # Variables that end with the % character are set only if they are unset in\n    # the variables dict.  the_dict_key is the name of the key that accesses\n    # the_dict in the_dict's parent dict.  If the_dict's parent is not a dict\n    # (it could be a list or it could be parentless because it is a root dict),\n    # the_dict_key will be None.\n    for key, value in the_dict.get(\"variables\", {}).items():\n        if type(value) not in (str, int, list):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessVariablesAndConditionsInDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessVariablesAndConditionsInDict(\n    the_dict, phase, variables_in, build_file, the_dict_key=None\n):\n    \"\"\"Handle all variable and command expansion and conditional evaluation.\n  This function is the public entry point for all variable expansions and\n  conditional evaluations.  The variables_in dictionary will not be modified\n  by this function.\n  \"\"\"\n    # Make a copy of the variables_in dict that can be modified during the\n    # loading of automatics and the loading of the variables dict.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessVariablesAndConditionsInList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessVariablesAndConditionsInList(the_list, phase, variables, build_file):\n    # Iterate using an index so that new values can be assigned into the_list.\n    index = 0\n    while index < len(the_list):\n        item = the_list[index]\n        if type(item) is dict:\n            # Make a copy of the variables dict so that it won't influence anything\n            # outside of its own scope.\n            ProcessVariablesAndConditionsInDict(item, phase, variables, build_file)\n        elif type(item) is list:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "BuildTargetsDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def BuildTargetsDict(data):\n    \"\"\"Builds a dict mapping fully-qualified target names to their target dicts.\n  |data| is a dict mapping loaded build files by pathname relative to the\n  current directory.  Values in |data| are build file contents.  For each\n  |data| value with a \"targets\" key, the value of the \"targets\" key is taken\n  as a list containing target dicts.  Each target's fully-qualified name is\n  constructed from the pathname of the build file (|data| key) and its\n  \"target_name\" property.  These fully-qualified names are used as the keys\n  in the returned dict.  These keys provide access to the target dicts,\n  the dicts in the \"targets\" lists.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "QualifyDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def QualifyDependencies(targets):\n    \"\"\"Make dependency links fully-qualified relative to the current directory.\n  |targets| is a dict mapping fully-qualified target names to their target\n  dicts.  For each target in this dict, keys known to contain dependency\n  links are examined, and any dependencies referenced will be rewritten\n  so that they are fully-qualified and relative to the current directory.\n  All rewritten dependencies are suitable for use as keys to |targets| or a\n  similar dict.\n  \"\"\"\n    all_dependency_sections = [",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ExpandWildcardDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ExpandWildcardDependencies(targets, data):\n    \"\"\"Expands dependencies specified as build_file:*.\n  For each target in |targets|, examines sections containing links to other\n  targets.  If any such section contains a link of the form build_file:*, it\n  is taken as a wildcard link, and is expanded to list each target in\n  build_file.  The |data| dict provides access to build file dicts.\n  Any target that does not wish to be included by wildcard can provide an\n  optional \"suppress_wildcard\" key in its target dict.  When present and\n  true, a wildcard dependency link will not include such targets.\n  All dependency names, including the keys to |targets| and the values in each",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "Unify",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Unify(items):\n    \"\"\"Removes duplicate elements from items, keeping the first element.\"\"\"\n    seen = {}\n    return [seen.setdefault(e, e) for e in items if e not in seen]\ndef RemoveDuplicateDependencies(targets):\n    \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "RemoveDuplicateDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveDuplicateDependencies(targets):\n    \"\"\"Makes sure every dependency appears only once in all targets's dependency\n  lists.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                target_dict[dependency_key] = Unify(dependencies)\ndef Filter(items, item):\n    \"\"\"Removes item from items.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "Filter",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Filter(items, item):\n    \"\"\"Removes item from items.\"\"\"\n    res = {}\n    return [res.setdefault(e, e) for e in items if e != item]\ndef RemoveSelfDependencies(targets):\n    \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "RemoveSelfDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveSelfDependencies(targets):\n    \"\"\"Remove self dependencies from targets that have the prune_self_dependency\n  variable set.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if t == target_name:\n                        if (",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "RemoveLinkDependenciesFromNoneTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def RemoveLinkDependenciesFromNoneTargets(targets):\n    \"\"\"Remove dependencies having the 'link_dependency' attribute from the 'none'\n  targets.\"\"\"\n    for target_name, target_dict in targets.items():\n        for dependency_key in dependency_sections:\n            dependencies = target_dict.get(dependency_key, [])\n            if dependencies:\n                for t in dependencies:\n                    if target_dict.get(\"type\", None) == \"none\":\n                        if targets[t].get(\"variables\", {}).get(\"link_dependency\", 0):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "BuildDependencyList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def BuildDependencyList(targets):\n    # Create a DependencyGraphNode for each target.  Put it into a dict for easy\n    # access.\n    dependency_nodes = {}\n    for target, spec in targets.items():\n        if target not in dependency_nodes:\n            dependency_nodes[target] = DependencyGraphNode(target)\n    # Set up the dependency links.  Targets that have no dependencies are treated\n    # as dependent on root_node.\n    root_node = DependencyGraphNode(None)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "VerifyNoGYPFileCircularDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def VerifyNoGYPFileCircularDependencies(targets):\n    # Create a DependencyGraphNode for each gyp file containing a target.  Put\n    # it into a dict for easy access.\n    dependency_nodes = {}\n    for target in targets:\n        build_file = gyp.common.BuildFile(target)\n        if build_file not in dependency_nodes:\n            dependency_nodes[build_file] = DependencyGraphNode(build_file)\n    # Set up the dependency links.\n    for target, spec in targets.items():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "DoDependentSettings",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def DoDependentSettings(key, flat_list, targets, dependency_nodes):\n    # key should be one of all_dependent_settings, direct_dependent_settings,\n    # or link_settings.\n    for target in flat_list:\n        target_dict = targets[target]\n        build_file = gyp.common.BuildFile(target)\n        if key == \"all_dependent_settings\":\n            dependencies = dependency_nodes[target].DeepDependencies()\n        elif key == \"direct_dependent_settings\":\n            dependencies = dependency_nodes[target].DirectAndImportedDependencies(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "AdjustStaticLibraryDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def AdjustStaticLibraryDependencies(\n    flat_list, targets, dependency_nodes, sort_dependencies\n):\n    # Recompute target \"dependencies\" properties.  For each static library\n    # target, remove \"dependencies\" entries referring to other static libraries,\n    # unless the dependency has the \"hard_dependency\" attribute set.  For each\n    # linkable target, add a \"dependencies\" entry referring to all of the\n    # target's computed list of link dependencies (including static libraries\n    # if no such entry is already present.\n    for target in flat_list:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "MakePathRelative",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MakePathRelative(to_file, fro_file, item):\n    # If item is a relative path, it's relative to the build file dict that it's\n    # coming from.  Fix it up to make it relative to the build file dict that\n    # it's going into.\n    # Exception: any |item| that begins with these special characters is\n    # returned without modification.\n    #   /   Used when a path is already absolute (shortcut optimization;\n    #       such paths would be returned as absolute anyway)\n    #   $   Used for build environment variables\n    #   -   Used for some build environment flags (such as -lapr-1 in a",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "MergeLists",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeLists(to, fro, to_file, fro_file, is_paths=False, append=True):\n    # Python documentation recommends objects which do not support hash\n    # set this value to None. Python library objects follow this rule.\n    def is_hashable(val):\n        return val.__hash__\n    # If x is hashable, returns whether x is in s. Else returns whether x is in items.\n    def is_in_set_or_list(x, s, items):\n        if is_hashable(x):\n            return x in s\n        return x in items",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "MergeDicts",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeDicts(to, fro, to_file, fro_file):\n    # I wanted to name the parameter \"from\" but it's a Python keyword...\n    for k, v in fro.items():\n        # It would be nice to do \"if not k in to: to[k] = v\" but that wouldn't give\n        # copy semantics.  Something else may want to merge from the |fro| dict\n        # later, and having the same dict ref pointed to twice in the tree isn't\n        # what anyone wants considering that the dicts may subsequently be\n        # modified.\n        if k in to:\n            bad_merge = False",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "MergeConfigWithInheritance",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def MergeConfigWithInheritance(\n    new_configuration_dict, build_file, target_dict, configuration, visited\n):\n    # Skip if previously visited.\n    if configuration in visited:\n        return\n    # Look at this configuration.\n    configuration_dict = target_dict[\"configurations\"][configuration]\n    # Merge in parents.\n    for parent in configuration_dict.get(\"inherit_from\", []):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "SetUpConfigurations",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def SetUpConfigurations(target, target_dict):\n    # key_suffixes is a list of key suffixes that might appear on key names.\n    # These suffixes are handled in conditional evaluations (for =, +, and ?)\n    # and rules/exclude processing (for ! and /).  Keys with these suffixes\n    # should be treated the same as keys without.\n    key_suffixes = [\"=\", \"+\", \"?\", \"!\", \"/\"]\n    build_file = gyp.common.BuildFile(target)\n    # Provide a single configuration by default if none exists.\n    # TODO(mark): Signal an error if default_configurations exists but\n    # configurations does not.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessListFiltersInDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessListFiltersInDict(name, the_dict):\n    \"\"\"Process regular expression and exclusion-based filters on lists.\n  An exclusion list is in a dict key named with a trailing \"!\", like\n  \"sources!\".  Every item in such a list is removed from the associated\n  main list, which in this example, would be \"sources\".  Removed items are\n  placed into a \"sources_excluded\" list in the dict.\n  Regular expression (regex) filters are contained in dict keys named with a\n  trailing \"/\", such as \"sources/\" to operate on the \"sources\" list.  Regex\n  filters in a dict take the form:\n    'sources/': [ ['exclude', '_(linux|mac|win)\\\\.cc$'],",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ProcessListFiltersInList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ProcessListFiltersInList(name, the_list):\n    for item in the_list:\n        if type(item) is dict:\n            ProcessListFiltersInDict(name, item)\n        elif type(item) is list:\n            ProcessListFiltersInList(name, item)\ndef ValidateTargetType(target, target_dict):\n    \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ValidateTargetType",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateTargetType(target, target_dict):\n    \"\"\"Ensures the 'type' field on the target is one of the known types.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec.\n  Raises an exception on error.\n  \"\"\"\n    VALID_TARGET_TYPES = (\n        \"executable\",\n        \"loadable_module\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ValidateRulesInTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateRulesInTarget(target, target_dict, extra_sources_for_rules):\n    \"\"\"Ensures that the rules sections in target_dict are valid and consistent,\n  and determines which sources they apply to.\n  Arguments:\n    target: string, name of target.\n    target_dict: dict, target spec containing \"rules\" and \"sources\" lists.\n    extra_sources_for_rules: a list of keys to scan for rule matches in\n        addition to 'sources'.\n  \"\"\"\n    # Dicts to map between values found in rules' 'rule_name' and 'extension'",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ValidateRunAsInTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateRunAsInTarget(target, target_dict, build_file):\n    target_name = target_dict.get(\"target_name\")\n    run_as = target_dict.get(\"run_as\")\n    if not run_as:\n        return\n    if type(run_as) is not dict:\n        raise GypError(\n            \"The 'run_as' in target %s from file %s should be a \"\n            \"dictionary.\" % (target_name, build_file)\n        )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "ValidateActionsInTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def ValidateActionsInTarget(target, target_dict, build_file):\n    \"\"\"Validates the inputs to the actions in a target.\"\"\"\n    target_name = target_dict.get(\"target_name\")\n    actions = target_dict.get(\"actions\", [])\n    for action in actions:\n        action_name = action.get(\"action_name\")\n        if not action_name:\n            raise GypError(\n                \"Anonymous action in target %s.  \"\n                \"An action must have an 'action_name' field.\" % target_name",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "TurnIntIntoStrInDict",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def TurnIntIntoStrInDict(the_dict):\n    \"\"\"Given dict the_dict, recursively converts all integers into strings.\n  \"\"\"\n    # Use items instead of iteritems because there's no need to try to look at\n    # reinserted keys and their associated values.\n    for k, v in the_dict.items():\n        if type(v) is int:\n            v = str(v)\n            the_dict[k] = v\n        elif type(v) is dict:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "TurnIntIntoStrInList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def TurnIntIntoStrInList(the_list):\n    \"\"\"Given list the_list, recursively converts all integers into strings.\n  \"\"\"\n    for index, item in enumerate(the_list):\n        if type(item) is int:\n            the_list[index] = str(item)\n        elif type(item) is dict:\n            TurnIntIntoStrInDict(item)\n        elif type(item) is list:\n            TurnIntIntoStrInList(item)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "PruneUnwantedTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def PruneUnwantedTargets(targets, flat_list, dependency_nodes, root_targets, data):\n    \"\"\"Return only the targets that are deep dependencies of |root_targets|.\"\"\"\n    qualified_root_targets = []\n    for target in root_targets:\n        target = target.strip()\n        qualified_targets = gyp.common.FindQualifiedTargets(target, flat_list)\n        if not qualified_targets:\n            raise GypError(\"Could not find target %s\" % target)\n        qualified_root_targets.extend(qualified_targets)\n    wanted_targets = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "VerifyNoCollidingTargets",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def VerifyNoCollidingTargets(targets):\n    \"\"\"Verify that no two targets in the same directory share the same name.\n  Arguments:\n    targets: A list of targets in the form 'path/to/file.gyp:target_name'.\n  \"\"\"\n    # Keep a dict going from 'subdirectory:target_name' to 'foo.gyp'.\n    used = {}\n    for target in targets:\n        # Separate out 'path/to/file.gyp, 'target_name' from\n        # 'path/to/file.gyp:target_name'.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "SetGeneratorGlobals",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def SetGeneratorGlobals(generator_input_info):\n    # Set up path_sections and non_configuration_keys with the default data plus\n    # the generator-specific data.\n    global path_sections\n    path_sections = set(base_path_sections)\n    path_sections.update(generator_input_info[\"path_sections\"])\n    global non_configuration_keys\n    non_configuration_keys = base_non_configuration_keys[:]\n    non_configuration_keys.extend(generator_input_info[\"non_configuration_keys\"])\n    global multiple_toolsets",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "Load",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "def Load(\n    build_files,\n    variables,\n    includes,\n    depth,\n    generator_input_info,\n    check,\n    circular_check,\n    parallel,\n    root_targets,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "linkable_types",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "linkable_types = [\n    \"executable\",\n    \"shared_library\",\n    \"loadable_module\",\n    \"mac_kernel_extension\",\n    \"windows_driver\",\n]\n# A list of sections that contain links to other targets.\ndependency_sections = [\"dependencies\", \"export_dependent_settings\"]\n# base_path_sections is a list of sections defined by GYP that contain",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "dependency_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "dependency_sections = [\"dependencies\", \"export_dependent_settings\"]\n# base_path_sections is a list of sections defined by GYP that contain\n# pathnames.  The generators can provide more keys, the two lists are merged\n# into path_sections, but you should call IsPathSection instead of using either\n# list directly.\nbase_path_sections = [\n    \"destination\",\n    \"files\",\n    \"include_dirs\",\n    \"inputs\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "base_path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "base_path_sections = [\n    \"destination\",\n    \"files\",\n    \"include_dirs\",\n    \"inputs\",\n    \"libraries\",\n    \"outputs\",\n    \"sources\",\n]\npath_sections = set()",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "path_sections",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "path_sections = set()\n# These per-process dictionaries are used to cache build file data when loading\n# in parallel mode.\nper_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n    # If section ends in one of the '=+?!' characters, it's applied to a section\n    # without the trailing characters.  '/' is notably absent from this list,\n    # because there's no way for a regular expression to be treated as a path.\n    while section and section[-1:] in \"=+?!\":",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "per_process_data",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "per_process_data = {}\nper_process_aux_data = {}\ndef IsPathSection(section):\n    # If section ends in one of the '=+?!' characters, it's applied to a section\n    # without the trailing characters.  '/' is notably absent from this list,\n    # because there's no way for a regular expression to be treated as a path.\n    while section and section[-1:] in \"=+?!\":\n        section = section[:-1]\n    if section in path_sections:\n        return True",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "per_process_aux_data",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "per_process_aux_data = {}\ndef IsPathSection(section):\n    # If section ends in one of the '=+?!' characters, it's applied to a section\n    # without the trailing characters.  '/' is notably absent from this list,\n    # because there's no way for a regular expression to be treated as a path.\n    while section and section[-1:] in \"=+?!\":\n        section = section[:-1]\n    if section in path_sections:\n        return True\n    # Sections matching the regexp '_(dir|file|path)s?$' are also",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "base_non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "base_non_configuration_keys = [\n    # Sections that must exist inside targets and not configurations.\n    \"actions\",\n    \"configurations\",\n    \"copies\",\n    \"default_configuration\",\n    \"dependencies\",\n    \"dependencies_original\",\n    \"libraries\",\n    \"postbuilds\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "non_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "non_configuration_keys = []\n# Keys that do not belong inside a configuration dictionary.\ninvalid_configuration_keys = [\n    \"actions\",\n    \"all_dependent_settings\",\n    \"configurations\",\n    \"dependencies\",\n    \"direct_dependent_settings\",\n    \"libraries\",\n    \"link_settings\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "invalid_configuration_keys",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "invalid_configuration_keys = [\n    \"actions\",\n    \"all_dependent_settings\",\n    \"configurations\",\n    \"dependencies\",\n    \"direct_dependent_settings\",\n    \"libraries\",\n    \"link_settings\",\n    \"sources\",\n    \"standalone_static_library\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "multiple_toolsets",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "multiple_toolsets = False\n# Paths for converting filelist paths to output paths: {\n#   toplevel,\n#   qualified_output_dir,\n# }\ngenerator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n    \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "generator_filelist_paths",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "generator_filelist_paths = None\ndef GetIncludedBuildFiles(build_file_path, aux_data, included=None):\n    \"\"\"Return a list of all build files included into build_file_path.\n  The returned list will contain build_file_path as well as all other files\n  that it included, either directly or indirectly.  Note that the list may\n  contain files that were included into a conditional section that evaluated\n  to false and was not merged into build_file_path's dict.\n  aux_data is a dict containing a key for each build file or included build\n  file.  Those keys provide access to dicts whose \"included\" keys contain\n  lists of all other files included by the build file.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "LBRACKETS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "LBRACKETS = set(\"{[(\")\nBRACKETS = {\"}\": \"{\", \"]\": \"[\", \")\": \"(\"}\ndef FindEnclosingBracketGroup(input_str):\n    stack = []\n    start = -1\n    for index, char in enumerate(input_str):\n        if char in LBRACKETS:\n            stack.append(char)\n            if start == -1:\n                start = index",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "BRACKETS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "BRACKETS = {\"}\": \"{\", \"]\": \"[\", \")\": \"(\"}\ndef FindEnclosingBracketGroup(input_str):\n    stack = []\n    start = -1\n    for index, char in enumerate(input_str):\n        if char in LBRACKETS:\n            stack.append(char)\n            if start == -1:\n                start = index\n        elif char in BRACKETS:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "early_variable_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "early_variable_re = re.compile(\n    r\"(?P<replace>(?P<type><(?:(?:!?@?)|\\|)?)\"\n    r\"(?P<command_string>[-a-zA-Z0-9_.]+)?\"\n    r\"\\((?P<is_array>\\s*\\[?)\"\n    r\"(?P<content>.*?)(\\]?)\\))\"\n)\n# This matches the same as early_variable_re, but with '>' instead of '<'.\nlate_variable_re = re.compile(\n    r\"(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)\"\n    r\"(?P<command_string>[-a-zA-Z0-9_.]+)?\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "late_variable_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "late_variable_re = re.compile(\n    r\"(?P<replace>(?P<type>>(?:(?:!?@?)|\\|)?)\"\n    r\"(?P<command_string>[-a-zA-Z0-9_.]+)?\"\n    r\"\\((?P<is_array>\\s*\\[?)\"\n    r\"(?P<content>.*?)(\\]?)\\))\"\n)\n# This matches the same as early_variable_re, but with '^' instead of '<'.\nlatelate_variable_re = re.compile(\n    r\"(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)\"\n    r\"(?P<command_string>[-a-zA-Z0-9_.]+)?\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "latelate_variable_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "latelate_variable_re = re.compile(\n    r\"(?P<replace>(?P<type>[\\^](?:(?:!?@?)|\\|)?)\"\n    r\"(?P<command_string>[-a-zA-Z0-9_.]+)?\"\n    r\"\\((?P<is_array>\\s*\\[?)\"\n    r\"(?P<content>.*?)(\\]?)\\))\"\n)\n# Global cache of results from running commands so they don't have to be run\n# more then once.\ncached_command_results = {}\ndef FixupPlatformCommand(cmd):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "cached_command_results",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "cached_command_results = {}\ndef FixupPlatformCommand(cmd):\n    if sys.platform == \"win32\":\n        if type(cmd) is list:\n            cmd = [re.sub(\"^cat \", \"type \", cmd[0])] + cmd[1:]\n        else:\n            cmd = re.sub(\"^cat \", \"type \", cmd)\n    return cmd\nPHASE_EARLY = 0\nPHASE_LATE = 1",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "PHASE_EARLY",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_EARLY = 0\nPHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n    # Look for the pattern that gets expanded into variables\n    if phase == PHASE_EARLY:\n        variable_re = early_variable_re\n        expansion_symbol = \"<\"\n    elif phase == PHASE_LATE:\n        variable_re = late_variable_re",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "PHASE_LATE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_LATE = 1\nPHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n    # Look for the pattern that gets expanded into variables\n    if phase == PHASE_EARLY:\n        variable_re = early_variable_re\n        expansion_symbol = \"<\"\n    elif phase == PHASE_LATE:\n        variable_re = late_variable_re\n        expansion_symbol = \">\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "PHASE_LATELATE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "PHASE_LATELATE = 2\ndef ExpandVariables(input, phase, variables, build_file):\n    # Look for the pattern that gets expanded into variables\n    if phase == PHASE_EARLY:\n        variable_re = early_variable_re\n        expansion_symbol = \"<\"\n    elif phase == PHASE_LATE:\n        variable_re = late_variable_re\n        expansion_symbol = \">\"\n    elif phase == PHASE_LATELATE:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "cached_conditions_asts",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "cached_conditions_asts = {}\ndef EvalCondition(condition, conditions_key, phase, variables, build_file):\n    \"\"\"Returns the dict that should be used or None if the result was\n  that nothing should be used.\"\"\"\n    if type(condition) is not list:\n        raise GypError(conditions_key + \" must be a list\")\n    if len(condition) < 2:\n        # It's possible that condition[0] won't work in which case this\n        # attempt will raise its own IndexError.  That's probably fine.\n        raise GypError(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "exception_re",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "peekOfCode": "exception_re = re.compile(r\"\"\"[\"']?[-/$<>^]\"\"\")\ndef MakePathRelative(to_file, fro_file, item):\n    # If item is a relative path, it's relative to the build file dict that it's\n    # coming from.  Fix it up to make it relative to the build file dict that\n    # it's going into.\n    # Exception: any |item| that begins with these special characters is\n    # returned without modification.\n    #   /   Used when a path is already absolute (shortcut optimization;\n    #       such paths would be returned as absolute anyway)\n    #   $   Used for build environment variables",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input",
        "documentation": {}
    },
    {
        "label": "TestFindCycles",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "peekOfCode": "class TestFindCycles(unittest.TestCase):\n    def setUp(self):\n        self.nodes = {}\n        for x in (\"a\", \"b\", \"c\", \"d\", \"e\"):\n            self.nodes[x] = gyp.input.DependencyGraphNode(x)\n    def _create_dependency(self, dependent, dependency):\n        dependent.dependencies.append(dependency)\n        dependency.dependents.append(dependent)\n    def test_no_cycle_empty_graph(self):\n        for label, node in self.nodes.items():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.input_test",
        "documentation": {}
    },
    {
        "label": "MacTool",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "class MacTool:\n    \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n    def Dispatch(self, args):\n        \"\"\"Dispatches a string command to a method.\"\"\"\n        if len(args) < 1:\n            raise Exception(\"Not enough arguments\")\n        method = \"Exec%s\" % self._CommandifyName(args[0])\n        return getattr(self, method)(*args[1:])\n    def _CommandifyName(self, name_string):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "def main(args):\n    executor = MacTool()\n    exit_code = executor.Dispatch(args)\n    if exit_code is not None:\n        sys.exit(exit_code)\nclass MacTool:\n    \"\"\"This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list.\"\"\"\n    def Dispatch(self, args):\n        \"\"\"Dispatches a string command to a method.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {}
    },
    {
        "label": "NextGreaterPowerOf2",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "def NextGreaterPowerOf2(x):\n    return 2 ** (x).bit_length()\ndef WriteHmap(output_name, filelist):\n    \"\"\"Generates a header map based on |filelist|.\n  Per Mark Mentovai:\n    A header map is structured essentially as a hash table, keyed by names used\n    in #includes, and providing pathnames to the actual files.\n  The implementation below and the comment above comes from inspecting:\n    http://www.opensource.apple.com/source/distcc/distcc-2503/distcc_dist/include_server/headermap.py?txt\n  while also looking at the implementation in clang in:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {}
    },
    {
        "label": "WriteHmap",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "peekOfCode": "def WriteHmap(output_name, filelist):\n    \"\"\"Generates a header map based on |filelist|.\n  Per Mark Mentovai:\n    A header map is structured essentially as a hash table, keyed by names used\n    in #includes, and providing pathnames to the actual files.\n  The implementation below and the comment above comes from inspecting:\n    http://www.opensource.apple.com/source/distcc/distcc-2503/distcc_dist/include_server/headermap.py?txt\n  while also looking at the implementation in clang in:\n    https://llvm.org/svn/llvm-project/cfe/trunk/lib/Lex/HeaderMap.cpp\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.mac_tool",
        "documentation": {}
    },
    {
        "label": "MsvsSettings",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "class MsvsSettings:\n    \"\"\"A class that understands the gyp 'msvs_...' values (especially the\n    msvs_settings field). They largely correpond to the VS2008 IDE DOM. This\n    class helps map those settings to command line options.\"\"\"\n    def __init__(self, spec, generator_flags):\n        self.spec = spec\n        self.vs_version = GetVSVersion(generator_flags)\n        supported_fields = [\n            (\"msvs_configuration_attributes\", dict),\n            (\"msvs_settings\", dict),",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "PrecompiledHeader",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "class PrecompiledHeader:\n    \"\"\"Helper to generate dependencies and build rules to handle generation of\n    precompiled headers. Interface matches the GCH handler in xcode_emulation.py.\n    \"\"\"\n    def __init__(\n        self, settings, config, gyp_to_build_path, gyp_to_unique_output, obj_ext\n    ):\n        self.settings = settings\n        self.config = config\n        pch_source = self.settings.msvs_precompiled_source[self.config]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "QuoteForRspFile",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def QuoteForRspFile(arg, quote_cmd=True):\n    \"\"\"Quote a command line argument so that it appears as one argument when\n    processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n    Windows programs).\"\"\"\n    # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n    # threads. This is actually the quoting rules for CommandLineToArgvW, not\n    # for the shell, because the shell doesn't do anything in Windows. This\n    # works more or less because most programs (including the compiler, etc.)\n    # use that function to handle command line arguments.\n    # Use a heuristic to try to find args that are paths, and normalize them",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "EncodeRspFileList",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def EncodeRspFileList(args, quote_cmd):\n    \"\"\"Process a list of arguments using QuoteCmdExeArgument.\"\"\"\n    # Note that the first argument is assumed to be the command. Don't add\n    # quotes around it because then built-ins like 'echo', etc. won't work.\n    # Take care to normpath only the path in the case of 'call ../x.bat' because\n    # otherwise the whole thing is incorrectly interpreted as a path and not\n    # normalized correctly.\n    if not args:\n        return \"\"\n    if args[0].startswith(\"call \"):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "GetGlobalVSMacroEnv",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GetGlobalVSMacroEnv(vs_version):\n    \"\"\"Get a dict of variables mapping internal VS macro names to their gyp\n    equivalents. Returns all variables that are independent of the target.\"\"\"\n    env = {}\n    # '$(VSInstallDir)' and '$(VCInstallDir)' are available when and only when\n    # Visual Studio is actually installed.\n    if vs_version.Path():\n        env[\"$(VSInstallDir)\"] = vs_version.Path()\n        env[\"$(VCInstallDir)\"] = os.path.join(vs_version.Path(), \"VC\") + \"\\\\\"\n    # Chromium uses DXSDK_DIR in include/lib paths, but it may or may not be",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "ExtractSharedMSVSSystemIncludes",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def ExtractSharedMSVSSystemIncludes(configs, generator_flags):\n    \"\"\"Finds msvs_system_include_dirs that are common to all targets, removes\n    them from all targets, and returns an OrderedSet containing them.\"\"\"\n    all_system_includes = OrderedSet(configs[0].get(\"msvs_system_include_dirs\", []))\n    for config in configs[1:]:\n        system_includes = config.get(\"msvs_system_include_dirs\", [])\n        all_system_includes = all_system_includes & OrderedSet(system_includes)\n    if not all_system_includes:\n        return None\n    # Expand macros in all_system_includes.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "GetVSVersion",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GetVSVersion(generator_flags):\n    global vs_version\n    if not vs_version:\n        vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n            generator_flags.get(\"msvs_version\", \"auto\"), allow_fallback=False\n        )\n    return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n    vs = GetVSVersion(generator_flags)\n    return vs.SetupScript()",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "ExpandMacros",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def ExpandMacros(string, expansions):\n    \"\"\"Expand $(Variable) per expansions dict. See MsvsSettings.GetVSMacroEnv\n    for the canonical way to retrieve a suitable dict.\"\"\"\n    if \"$\" in string:\n        for old, new in expansions.items():\n            assert \"$(\" not in new, new\n            string = string.replace(old, new)\n    return string\ndef _ExtractImportantEnvironment(output_of_set):\n    \"\"\"Extracts environment variables required for the toolchain to run from",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "GenerateEnvironmentFiles",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def GenerateEnvironmentFiles(\n    toplevel_build_dir, generator_flags, system_includes, open_out\n):\n    \"\"\"It's not sufficient to have the absolute path to the compiler, linker,\n    etc. on Windows, as those tools rely on .dlls being in the PATH. We also\n    need to support both x86 and x64 compilers within the same build (to support\n    msvs_target_platform hackery). Different architectures require a different\n    compiler binary, and different supporting environment variables (INCLUDE,\n    LIB, LIBPATH). So, we extract the environment here, wrap all invocations\n    of compiler tools (cl, link, lib, rc, midl, etc.) via win_tool.py which",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "VerifyMissingSources",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def VerifyMissingSources(sources, build_dir, generator_flags, gyp_to_ninja):\n    \"\"\"Emulate behavior of msvs_error_on_missing_sources present in the msvs\n    generator: Check that all regular source files, i.e. not created at run time,\n    exist on disk. Missing files cause needless recompilation when building via\n    VS, and we want this check to match for people/bots that build using ninja,\n    so they're not surprised when the VS build fails.\"\"\"\n    if int(generator_flags.get(\"msvs_error_on_missing_sources\", 0)):\n        no_specials = filter(lambda x: \"$\" not in x, sources)\n        relative = [os.path.join(build_dir, gyp_to_ninja(s)) for s in no_specials]\n        missing = [x for x in relative if not os.path.exists(x)]",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "CalculateCommonVariables",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "def CalculateCommonVariables(default_variables, params):\n    generator_flags = params.get(\"generator_flags\", {})\n    # Set a variable so conditions can be based on msvs_version.\n    msvs_version = gyp.msvs_emulation.GetVSVersion(generator_flags)\n    default_variables[\"MSVS_VERSION\"] = msvs_version.ShortName()\n    # To determine processor word size on Windows, in addition to checking\n    # PROCESSOR_ARCHITECTURE (which reflects the word size of the current\n    # process), it is also necessary to check PROCESSOR_ARCHITEW6432 (which\n    # contains the actual word size of the system when running thru WOW64).\n    if \"64\" in os.environ.get(\"PROCESSOR_ARCHITECTURE\", \"\") or \"64\" in os.environ.get(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "windows_quoter_regex",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "windows_quoter_regex = re.compile(r'(\\\\*)\"')\ndef QuoteForRspFile(arg, quote_cmd=True):\n    \"\"\"Quote a command line argument so that it appears as one argument when\n    processed via cmd.exe and parsed by CommandLineToArgvW (as is typical for\n    Windows programs).\"\"\"\n    # See http://goo.gl/cuFbX and http://goo.gl/dhPnp including the comment\n    # threads. This is actually the quoting rules for CommandLineToArgvW, not\n    # for the shell, because the shell doesn't do anything in Windows. This\n    # works more or less because most programs (including the compiler, etc.)\n    # use that function to handle command line arguments.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "vs_version",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "peekOfCode": "vs_version = None\ndef GetVSVersion(generator_flags):\n    global vs_version\n    if not vs_version:\n        vs_version = gyp.MSVSVersion.SelectVisualStudioVersion(\n            generator_flags.get(\"msvs_version\", \"auto\"), allow_fallback=False\n        )\n    return vs_version\ndef _GetVsvarsSetupArgs(generator_flags, arch):\n    vs = GetVSVersion(generator_flags)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.msvs_emulation",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "class Writer:\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write(\"\\n\")\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):\n            self.output.write(\"# \" + line + \"\\n\")\n    def variable(self, key, value, indent=0):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {}
    },
    {
        "label": "escape_path",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "def escape_path(word):\n    return word.replace(\"$ \", \"$$ \").replace(\" \", \"$ \").replace(\":\", \"$:\")\nclass Writer:\n    def __init__(self, output, width=78):\n        self.output = output\n        self.width = width\n    def newline(self):\n        self.output.write(\"\\n\")\n    def comment(self, text):\n        for line in textwrap.wrap(text, self.width - 2):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {}
    },
    {
        "label": "escape",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "peekOfCode": "def escape(string):\n    \"\"\"Escape a string such that it can be embedded into a Ninja file without\n    further interpretation.\"\"\"\n    assert \"\\n\" not in string, \"Ninja syntax does not allow newlines\"\n    # We only have one special metacharacter: '$'.\n    return string.replace(\"$\", \"$$\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.ninja_syntax",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "class Error(Exception):\n    pass\n__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n    \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n    try:\n        return _deepcopy_dispatch[type(x)](x)\n    except KeyError:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "deepcopy",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "def deepcopy(x):\n    \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n    try:\n        return _deepcopy_dispatch[type(x)](x)\n    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"\n            + \"or expand simple_copy support.\" % type(x)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "__all__ = [\"Error\", \"deepcopy\"]\ndef deepcopy(x):\n    \"\"\"Deep copy operation on gyp objects such as strings, ints, dicts\n  and lists. More than twice as fast as copy.deepcopy but much less\n  generic.\"\"\"\n    try:\n        return _deepcopy_dispatch[type(x)](x)\n    except KeyError:\n        raise Error(\n            \"Unsupported type %s for deepcopy. Use copy.deepcopy \"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "_deepcopy_dispatch",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "_deepcopy_dispatch = d = {}\ndef _deepcopy_atomic(x):\n    return x\ntypes = bool, float, int, str, type, type(None)\nfor x in types:\n    d[x] = _deepcopy_atomic\ndef _deepcopy_list(x):\n    return [deepcopy(a) for a in x]\nd[list] = _deepcopy_list",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "types",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "types = bool, float, int, str, type, type(None)\nfor x in types:\n    d[x] = _deepcopy_atomic\ndef _deepcopy_list(x):\n    return [deepcopy(a) for a in x]\nd[list] = _deepcopy_list\ndef _deepcopy_dict(x):\n    y = {}\n    for key, value in x.items():\n        y[deepcopy(key)] = deepcopy(value)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "d[list]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "d[list] = _deepcopy_list\ndef _deepcopy_dict(x):\n    y = {}\n    for key, value in x.items():\n        y[deepcopy(key)] = deepcopy(value)\n    return y\nd[dict] = _deepcopy_dict\ndel d",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "d[dict]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "peekOfCode": "d[dict] = _deepcopy_dict\ndel d",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.simple_copy",
        "documentation": {}
    },
    {
        "label": "WinTool",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "class WinTool:\n    \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n    def _UseSeparateMspdbsrv(self, env, args):\n        \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a\n    shared one.\"\"\"\n        if len(args) < 1:\n            raise Exception(\"Not enough arguments\")\n        if args[0] != \"link.exe\":\n            return",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "def main(args):\n    executor = WinTool()\n    exit_code = executor.Dispatch(args)\n    if exit_code is not None:\n        sys.exit(exit_code)\nclass WinTool:\n    \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n    def _UseSeparateMspdbsrv(self, env, args):\n        \"\"\"Allows to use a unique instance of mspdbsrv.exe per linker instead of a",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.abspath(__file__))\n# A regex matching an argument corresponding to the output filename passed to\n# link.exe.\n_LINK_EXE_OUT_ARG = re.compile(\"/OUT:(?P<out>.+)$\", re.IGNORECASE)\ndef main(args):\n    executor = WinTool()\n    exit_code = executor.Dispatch(args)\n    if exit_code is not None:\n        sys.exit(exit_code)\nclass WinTool:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {}
    },
    {
        "label": "_LINK_EXE_OUT_ARG",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "peekOfCode": "_LINK_EXE_OUT_ARG = re.compile(\"/OUT:(?P<out>.+)$\", re.IGNORECASE)\ndef main(args):\n    executor = WinTool()\n    exit_code = executor.Dispatch(args)\n    if exit_code is not None:\n        sys.exit(exit_code)\nclass WinTool:\n    \"\"\"This class performs all the Windows tooling steps. The methods can either\n  be executed directly, or dispatched from an argument list.\"\"\"\n    def _UseSeparateMspdbsrv(self, env, args):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.win_tool",
        "documentation": {}
    },
    {
        "label": "XcodeArchsDefault",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class XcodeArchsDefault:\n    \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros\n  depends on the SDKROOT used (\"macosx\", \"iphoneos\", \"iphonesimulator\") and\n  on the version of Xcode.\n  \"\"\"\n    # Match variable like $(ARCHS_STANDARD).\n    variable_pattern = re.compile(r\"\\$\\([a-zA-Z_][a-zA-Z0-9_]*\\)$\")\n    def __init__(self, default, mac, iphonesimulator, iphoneos):\n        self._default = (default,)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "XcodeSettings",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class XcodeSettings:\n    \"\"\"A class that understands the gyp 'xcode_settings' object.\"\"\"\n    # Populated lazily by _SdkPath(). Shared by all XcodeSettings, so cached\n    # at class-level for efficiency.\n    _sdk_path_cache = {}\n    _platform_path_cache = {}\n    _sdk_root_cache = {}\n    # Populated lazily by GetExtraPlistItems(). Shared by all XcodeSettings, so\n    # cached at class-level for efficiency.\n    _plist_cache = {}",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "MacPrefixHeader",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "class MacPrefixHeader:\n    \"\"\"A class that helps with emulating Xcode's GCC_PREFIX_HEADER feature.\n  This feature consists of several pieces:\n  * If GCC_PREFIX_HEADER is present, all compilations in that project get an\n    additional |-include path_to_prefix_header| cflag.\n  * If GCC_PRECOMPILE_PREFIX_HEADER is present too, then the prefix header is\n    instead compiled, and all other compilations in the project get an\n    additional |-include path_to_compiled_header| instead.\n    + Compiled prefix headers have the extension gch. There is one gch file for\n      every language used in the project (c, cc, m, mm), since gch files for",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "XcodeArchsVariableMapping",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n    \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n    mapping = {\"$(ARCHS_STANDARD)\": archs}\n    if archs_including_64_bit:\n        mapping[\"$(ARCHS_STANDARD_INCLUDING_64_BIT)\"] = archs_including_64_bit\n    return mapping\nclass XcodeArchsDefault:\n    \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode\n  macros and implementing filtering by VALID_ARCHS. The expansion of macros",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetXcodeArchsDefault",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetXcodeArchsDefault():\n    \"\"\"Returns the |XcodeArchsDefault| object to use to expand ARCHS for the\n  installed version of Xcode. The default values used by Xcode for ARCHS\n  and the expansion of the variables depends on the version of Xcode used.\n  For all version anterior to Xcode 5.0 or posterior to Xcode 5.1 included\n  uses $(ARCHS_STANDARD) if ARCHS is unset, while Xcode 5.0 to 5.0.2 uses\n  $(ARCHS_STANDARD_INCLUDING_64_BIT). This variable was added to Xcode 5.0\n  and deprecated with Xcode 5.1.\n  For \"macosx\" SDKROOT, all version starting with Xcode 5.0 includes 64-bit\n  architecture as part of $(ARCHS_STANDARD) and default to only building it.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "XcodeVersion",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def XcodeVersion():\n    \"\"\"Returns a tuple of version and build version of installed Xcode.\"\"\"\n    # `xcodebuild -version` output looks like\n    #    Xcode 4.6.3\n    #    Build version 4H1503\n    # or like\n    #    Xcode 3.2.6\n    #    Component versions: DevToolsCore-1809.0; DevToolsSupport-1806.0\n    #    BuildVersion: 10M2518\n    # Convert that to ('0463', '4H1503') or ('0326', '10M2518').",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "CLTVersion",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def CLTVersion():\n    \"\"\"Returns the version of command-line tools from pkgutil.\"\"\"\n    # pkgutil output looks like\n    #   package-id: com.apple.pkg.CLTools_Executables\n    #   version: 5.0.1.0.1.1382131676\n    #   volume: /\n    #   location: /\n    #   install-time: 1382544035\n    #   groups: com.apple.FindSystemFiles.pkg-group\n    #           com.apple.DevToolsBoth.pkg-group",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetStdoutQuiet",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetStdoutQuiet(cmdlist):\n    \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Ignores the stderr.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n    job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n    out = job.communicate()[0].decode(\"utf-8\")\n    if job.returncode != 0:\n        raise GypError(\"Error %d running %s\" % (job.returncode, cmdlist[0]))\n    return out.rstrip(\"\\n\")\ndef GetStdout(cmdlist):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetStdout",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetStdout(cmdlist):\n    \"\"\"Returns the content of standard output returned by invoking |cmdlist|.\n  Raises |GypError| if the command return with a non-zero return code.\"\"\"\n    job = subprocess.Popen(cmdlist, stdout=subprocess.PIPE)\n    out = job.communicate()[0].decode(\"utf-8\")\n    if job.returncode != 0:\n        sys.stderr.write(out + \"\\n\")\n        raise GypError(\"Error %d running %s\" % (job.returncode, cmdlist[0]))\n    return out.rstrip(\"\\n\")\ndef MergeGlobalXcodeSettingsToSpec(global_dict, spec):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "MergeGlobalXcodeSettingsToSpec",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def MergeGlobalXcodeSettingsToSpec(global_dict, spec):\n    \"\"\"Merges the global xcode_settings dictionary into each configuration of the\n  target represented by spec. For keys that are both in the global and the local\n  xcode_settings dict, the local key gets precedence.\n  \"\"\"\n    # The xcode generator special-cases global xcode_settings and does something\n    # that amounts to merging in the global xcode_settings into each local\n    # xcode_settings dict.\n    global_xcode_settings = global_dict.get(\"xcode_settings\", {})\n    for config in spec[\"configurations\"].values():",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "IsMacBundle",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def IsMacBundle(flavor, spec):\n    \"\"\"Returns if |spec| should be treated as a bundle.\n  Bundles are directories with a certain subdirectory structure, instead of\n  just a single file. Bundle rules do not produce a binary but also package\n  resources into that directory.\"\"\"\n    is_mac_bundle = (\n        int(spec.get(\"mac_xctest_bundle\", 0)) != 0\n        or int(spec.get(\"mac_xcuitest_bundle\", 0)) != 0\n        or (int(spec.get(\"mac_bundle\", 0)) != 0 and flavor == \"mac\")\n    )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetMacBundleResources",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetMacBundleResources(product_dir, xcode_settings, resources):\n    \"\"\"Yields (output, resource) pairs for every resource in |resources|.\n  Only call this for mac bundle targets.\n  Args:\n      product_dir: Path to the directory containing the output bundle,\n          relative to the build directory.\n      xcode_settings: The XcodeSettings of the current target.\n      resources: A list of bundle resources, relative to the build directory.\n  \"\"\"\n    dest = os.path.join(product_dir, xcode_settings.GetBundleResourceFolder())",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetMacInfoPlist",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetMacInfoPlist(product_dir, xcode_settings, gyp_path_to_build_path):\n    \"\"\"Returns (info_plist, dest_plist, defines, extra_env), where:\n  * |info_plist| is the source plist path, relative to the\n    build directory,\n  * |dest_plist| is the destination plist path, relative to the\n    build directory,\n  * |defines| is a list of preprocessor defines (empty if the plist\n    shouldn't be preprocessed,\n  * |extra_env| is a dict of env variables that should be exported when\n    invoking |mac_tool copy-info-plist|.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "ExpandEnvVars",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def ExpandEnvVars(string, expansions):\n    \"\"\"Expands ${VARIABLES}, $(VARIABLES), and $VARIABLES in string per the\n  expansions list. If the variable expands to something that references\n  another variable, this variable is expanded as well if it's in env --\n  until no variables present in env are left.\"\"\"\n    for k, v in reversed(expansions):\n        string = string.replace(\"${\" + k + \"}\", v)\n        string = string.replace(\"$(\" + k + \")\", v)\n        string = string.replace(\"$\" + k, v)\n    return string",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetSortedXcodeEnv",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetSortedXcodeEnv(\n    xcode_settings, built_products_dir, srcroot, configuration, additional_settings=None\n):\n    env = _GetXcodeEnv(\n        xcode_settings, built_products_dir, srcroot, configuration, additional_settings\n    )\n    return [(key, env[key]) for key in _TopologicallySortedEnvVarKeys(env)]\ndef GetSpecPostbuildCommands(spec, quiet=False):\n    \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "GetSpecPostbuildCommands",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def GetSpecPostbuildCommands(spec, quiet=False):\n    \"\"\"Returns the list of postbuilds explicitly defined on |spec|, in a form\n  executable by a shell.\"\"\"\n    postbuilds = []\n    for postbuild in spec.get(\"postbuilds\", []):\n        if not quiet:\n            postbuilds.append(\n                \"echo POSTBUILD\\\\(%s\\\\) %s\"\n                % (spec[\"target_name\"], postbuild[\"postbuild_name\"])\n            )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "CloneConfigurationForDeviceAndEmulator",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "def CloneConfigurationForDeviceAndEmulator(target_dicts):\n    \"\"\"If |target_dicts| contains any iOS targets, automatically create -iphoneos\n  targets for iOS device builds.\"\"\"\n    if _HasIOSTarget(target_dicts):\n        return _AddIOSDeviceConfigurations(target_dicts)\n    return target_dicts",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "XCODE_VERSION_CACHE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "XCODE_VERSION_CACHE = None\n# Populated lazily by GetXcodeArchsDefault, to an |XcodeArchsDefault| instance\n# corresponding to the installed version of Xcode.\nXCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n    \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n    mapping = {\"$(ARCHS_STANDARD)\": archs}\n    if archs_including_64_bit:\n        mapping[\"$(ARCHS_STANDARD_INCLUDING_64_BIT)\"] = archs_including_64_bit",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "XCODE_ARCHS_DEFAULT_CACHE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "peekOfCode": "XCODE_ARCHS_DEFAULT_CACHE = None\ndef XcodeArchsVariableMapping(archs, archs_including_64_bit=None):\n    \"\"\"Constructs a dictionary with expansion for $(ARCHS_STANDARD) variable,\n  and optionally for $(ARCHS_STANDARD_INCLUDING_64_BIT).\"\"\"\n    mapping = {\"$(ARCHS_STANDARD)\": archs}\n    if archs_including_64_bit:\n        mapping[\"$(ARCHS_STANDARD_INCLUDING_64_BIT)\"] = archs_including_64_bit\n    return mapping\nclass XcodeArchsDefault:\n    \"\"\"A class to resolve ARCHS variable from xcode_settings, resolving Xcode",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_emulation",
        "documentation": {}
    },
    {
        "label": "IsValidTargetForWrapper",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "peekOfCode": "def IsValidTargetForWrapper(target_extras, executable_target_pattern, spec):\n    \"\"\"Limit targets for Xcode wrapper.\n  Xcode sometimes performs poorly with too many targets, so only include\n  proper executable targets, with filters to customize.\n  Arguments:\n    target_extras: Regular expression to always add, matching any target.\n    executable_target_pattern: Regular expression limiting executable targets.\n    spec: Specifications for target.\n  \"\"\"\n    target_name = spec.get(\"target_name\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "documentation": {}
    },
    {
        "label": "CreateWrapper",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "peekOfCode": "def CreateWrapper(target_list, target_dicts, data, params):\n    \"\"\"Initialize targets for the ninja wrapper.\n  This sets up the necessary variables in the targets to generate Xcode projects\n  that use ninja as an external builder.\n  Arguments:\n    target_list: List of target pairs: 'base/base.gyp:base'.\n    target_dicts: Dict of target properties keyed on target pair.\n    data: Dict of flattened build files keyed on gyp path.\n    params: Dict of global options for gyp.\n  \"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcode_ninja",
        "documentation": {}
    },
    {
        "label": "XCObject",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCObject:\n    \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed\n                      to a single element.\n             property_type: The type to use as the value of the property,",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCHierarchicalElement",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCHierarchicalElement(XCObject):\n    \"\"\"Abstract base for PBXGroup and PBXFileReference.  Not represented in a\n  project file.\"\"\"\n    # TODO(mark): Do name and path belong here?  Probably so.\n    # If path is set and name is not, name may have a default value.  Name will\n    # be set to the basename of path, if the basename of path is different from\n    # the full value of path.  If path is already just a leaf name, name will\n    # not be set.\n    _schema = XCObject._schema.copy()\n    _schema.update(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXGroup",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXGroup(XCHierarchicalElement):\n    \"\"\"\n  Attributes:\n    _children_by_path: Maps pathnames of children of this PBXGroup to the\n      actual child XCHierarchicalElement objects.\n    _variant_children_by_name_and_path: Maps (name, path) tuples of\n      PBXVariantGroup children to the actual child PBXVariantGroup objects.\n  \"\"\"\n    _schema = XCHierarchicalElement._schema.copy()\n    _schema.update(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCFileLikeElement",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCFileLikeElement(XCHierarchicalElement):\n    # Abstract base for objects that can be used as the fileRef property of\n    # PBXBuildFile.\n    def PathHashables(self):\n        # A PBXBuildFile that refers to this object will call this method to\n        # obtain additional hashables specific to this XCFileLikeElement.  Don't\n        # just use this object's hashables, they're not specific and unique enough\n        # on their own (without access to the parent hashables.)  Instead, provide\n        # hashables that identify this object by path by getting its hashables as\n        # well as the hashables of ancestor XCHierarchicalElement objects.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCContainerPortal",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCContainerPortal(XCObject):\n    # Abstract base for objects that can be used as the containerPortal property\n    # of PBXContainerItemProxy.\n    pass\nclass XCRemoteObject(XCObject):\n    # Abstract base for objects that can be used as the remoteGlobalIDString\n    # property of PBXContainerItemProxy.\n    pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n    _schema = XCFileLikeElement._schema.copy()",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCRemoteObject",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCRemoteObject(XCObject):\n    # Abstract base for objects that can be used as the remoteGlobalIDString\n    # property of PBXContainerItemProxy.\n    pass\nclass PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n    _schema = XCFileLikeElement._schema.copy()\n    _schema.update(\n        {\n            \"explicitFileType\": [0, str, 0, 0],\n            \"lastKnownFileType\": [0, str, 0, 0],",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXFileReference",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXFileReference(XCFileLikeElement, XCContainerPortal, XCRemoteObject):\n    _schema = XCFileLikeElement._schema.copy()\n    _schema.update(\n        {\n            \"explicitFileType\": [0, str, 0, 0],\n            \"lastKnownFileType\": [0, str, 0, 0],\n            \"name\": [0, str, 0, 0],\n            \"path\": [0, str, 0, 1],\n        }\n    )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXVariantGroup",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXVariantGroup(PBXGroup, XCFileLikeElement):\n    \"\"\"PBXVariantGroup is used by Xcode to represent localizations.\"\"\"\n    # No additions to the schema relative to PBXGroup.\n    pass\n# PBXReferenceProxy is also an XCFileLikeElement subclass.  It is defined below\n# because it uses PBXContainerItemProxy, defined below.\nclass XCBuildConfiguration(XCObject):\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCBuildConfiguration",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCBuildConfiguration(XCObject):\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n            \"baseConfigurationReference\": [0, PBXFileReference, 0, 0],\n            \"buildSettings\": [0, dict, 0, 1, {}],\n            \"name\": [0, str, 0, 1],\n        }\n    )\n    def HasBuildSetting(self, key):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCConfigurationList",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCConfigurationList(XCObject):\n    # _configs is the default list of configurations.\n    _configs = [\n        XCBuildConfiguration({\"name\": \"Debug\"}),\n        XCBuildConfiguration({\"name\": \"Release\"}),\n    ]\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n            \"buildConfigurations\": [1, XCBuildConfiguration, 1, 1, _configs],",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXBuildFile",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXBuildFile(XCObject):\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n            \"fileRef\": [0, XCFileLikeElement, 0, 1],\n            \"settings\": [0, str, 0, 0],  # hack, it's a dict\n        }\n    )\n    # Weird output rules for PBXBuildFile.\n    _should_print_single_line = True",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCBuildPhase(XCObject):\n    \"\"\"Abstract base for build phase classes.  Not represented in a project\n  file.\n  Attributes:\n    _files_by_path: A dict mapping each path of a child in the files list by\n      path (keys) to the corresponding PBXBuildFile children (values).\n    _files_by_xcfilelikeelement: A dict mapping each XCFileLikeElement (keys)\n      to the corresponding PBXBuildFile children (values).\n  \"\"\"\n    # TODO(mark): Some build phase types, like PBXShellScriptBuildPhase, don't",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXHeadersBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXHeadersBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Headers\"\n    def FileGroup(self, path):\n        return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXResourcesBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Resources\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXResourcesBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXResourcesBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Resources\"\n    def FileGroup(self, path):\n        return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXSourcesBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Sources\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXSourcesBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXSourcesBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Sources\"\n    def FileGroup(self, path):\n        return self.PBXProjectAncestor().RootGroupForPath(path)\nclass PBXFrameworksBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Frameworks\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXFrameworksBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXFrameworksBuildPhase(XCBuildPhase):\n    # No additions to the schema relative to XCBuildPhase.\n    def Name(self):\n        return \"Frameworks\"\n    def FileGroup(self, path):\n        (root, ext) = posixpath.splitext(path)\n        if ext != \"\":\n            ext = ext[1:].lower()\n        if ext == \"o\":\n            # .o files are added to Xcode Frameworks phases, but conceptually aren't",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXShellScriptBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXShellScriptBuildPhase(XCBuildPhase):\n    _schema = XCBuildPhase._schema.copy()\n    _schema.update(\n        {\n            \"inputPaths\": [1, str, 0, 1, []],\n            \"name\": [0, str, 0, 0],\n            \"outputPaths\": [1, str, 0, 1, []],\n            \"shellPath\": [0, str, 0, 1, \"/bin/sh\"],\n            \"shellScript\": [0, str, 0, 1],\n            \"showEnvVarsInLog\": [0, int, 0, 0],",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXCopyFilesBuildPhase",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXCopyFilesBuildPhase(XCBuildPhase):\n    _schema = XCBuildPhase._schema.copy()\n    _schema.update(\n        {\n            \"dstPath\": [0, str, 0, 1],\n            \"dstSubfolderSpec\": [0, int, 0, 1],\n            \"name\": [0, str, 0, 0],\n        }\n    )\n    # path_tree_re matches \"$(DIR)/path\", \"$(DIR)/$(DIR2)/path\" or just \"$(DIR)\".",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXBuildRule",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXBuildRule(XCObject):\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n            \"compilerSpec\": [0, str, 0, 1],\n            \"filePatterns\": [0, str, 0, 0],\n            \"fileType\": [0, str, 0, 1],\n            \"isEditable\": [0, int, 0, 1, 1],\n            \"outputFiles\": [1, str, 0, 1, []],\n            \"script\": [0, str, 0, 0],",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXContainerItemProxy",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXContainerItemProxy(XCObject):\n    # When referencing an item in this project file, containerPortal is the\n    # PBXProject root object of this project file.  When referencing an item in\n    # another project file, containerPortal is a PBXFileReference identifying\n    # the other project file.\n    #\n    # When serving as a proxy to an XCTarget (in this project file or another),\n    # proxyType is 1.  When serving as a proxy to a PBXFileReference (in another\n    # project file), proxyType is 2.  Type 2 is used for references to the\n    # producs of the other project file's targets.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXTargetDependency",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXTargetDependency(XCObject):\n    # The \"target\" property accepts an XCTarget object, and obviously not\n    # NoneType.  But XCTarget is defined below, so it can't be put into the\n    # schema yet.  The definition of PBXTargetDependency can't be moved below\n    # XCTarget because XCTarget's own schema references PBXTargetDependency.\n    # Python doesn't deal well with this circular relationship, and doesn't have\n    # a real way to do forward declarations.  To work around, the type of\n    # the \"target\" property is reset below, after XCTarget is defined.\n    #\n    # At least one of \"name\" and \"target\" is required.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXReferenceProxy",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXReferenceProxy(XCFileLikeElement):\n    _schema = XCFileLikeElement._schema.copy()\n    _schema.update(\n        {\n            \"fileType\": [0, str, 0, 1],\n            \"path\": [0, str, 0, 1],\n            \"remoteRef\": [0, PBXContainerItemProxy, 1, 1],\n        }\n    )\nclass XCTarget(XCRemoteObject):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCTarget",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCTarget(XCRemoteObject):\n    # An XCTarget is really just an XCObject, the XCRemoteObject thing is just\n    # to allow PBXProject to be used in the remoteGlobalIDString property of\n    # PBXContainerItemProxy.\n    #\n    # Setting a \"name\" property at instantiation may also affect \"productName\",\n    # which may in turn affect the \"PRODUCT_NAME\" build setting in children of\n    # \"buildConfigurationList\".  See __init__ below.\n    _schema = XCRemoteObject._schema.copy()\n    _schema.update(",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXNativeTarget",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXNativeTarget(XCTarget):\n    # buildPhases is overridden in the schema to be able to set defaults.\n    #\n    # NOTE: Contrary to most objects, it is advisable to set parent when\n    # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n    # object.  A parent reference is required for a PBXNativeTarget during\n    # construction to be able to set up the target defaults for productReference,\n    # because a PBXBuildFile object must be created for the target and it must\n    # be added to the PBXProject's mainGroup hierarchy.\n    _schema = XCTarget._schema.copy()",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXAggregateTarget",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXAggregateTarget(XCTarget):\n    pass\nclass PBXProject(XCContainerPortal):\n    # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n    # just to allow PBXProject to be used in the containerPortal property of\n    # PBXContainerItemProxy.\n    \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXProject",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class PBXProject(XCContainerPortal):\n    # A PBXProject is really just an XCObject, the XCContainerPortal thing is\n    # just to allow PBXProject to be used in the containerPortal property of\n    # PBXContainerItemProxy.\n    \"\"\"\n  Attributes:\n    path: \"sample.xcodeproj\".  TODO(mark) Document me!\n    _other_pbxprojects: A dictionary, keyed by other PBXProject objects.  Each\n                        value is a reference to the dict in the\n                        projectReferences list associated with the keyed",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XCProjectFile",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "class XCProjectFile(XCObject):\n    _schema = XCObject._schema.copy()\n    _schema.update(\n        {\n            \"archiveVersion\": [0, int, 0, 1, 1],\n            \"classes\": [0, dict, 0, 1, {}],\n            \"objectVersion\": [0, int, 0, 1, 46],\n            \"rootObject\": [0, PBXProject, 1, 1],\n        }\n    )",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "cmp",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "def cmp(x, y):\n    return (x > y) - (x < y)\n# See XCObject._EncodeString.  This pattern is used to determine when a string\n# can be printed unquoted.  Strings that match this pattern may be printed\n# unquoted.  Strings that do not match must be quoted and may be further\n# transformed to be properly encoded.  Note that this expression matches the\n# characters listed with \"+\", for 1 or more occurrences: if a string is empty,\n# it must not match this pattern, because it needs to be encoded as \"\".\n_unquoted = re.compile(\"^[A-Za-z0-9$./_]+$\")\n# Strings that match this pattern are quoted regardless of what _unquoted says.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "SourceTreeAndPathFromPath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "def SourceTreeAndPathFromPath(input_path):\n    \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n    source_group_match = _path_leading_variable.match(input_path)\n    if source_group_match:",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "ConvertVariablesToShellSyntax",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "def ConvertVariablesToShellSyntax(input_string):\n    return re.sub(r\"\\$\\((.*?)\\)\", \"${\\\\1}\", input_string)\nclass XCObject:\n    \"\"\"The abstract base of all class types used in Xcode project files.\n  Class variables:\n    _schema: A dictionary defining the properties of this class.  The keys to\n             _schema are string property keys as used in project files.  Values\n             are a list of four or five elements:\n             [ is_list, property_type, is_strong, is_required, default ]\n             is_list: True if the property described is a list, as opposed",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "_unquoted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_unquoted = re.compile(\"^[A-Za-z0-9$./_]+$\")\n# Strings that match this pattern are quoted regardless of what _unquoted says.\n# Oddly, Xcode will quote any string with a run of three or more underscores.\n_quoted = re.compile(\"___\")\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r\"^\\$\\((.*?)\\)(/(.*))?$\")\ndef SourceTreeAndPathFromPath(input_path):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "_quoted",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_quoted = re.compile(\"___\")\n# This pattern should match any character that needs to be escaped by\n# XCObject._EncodeString.  See that function.\n_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r\"^\\$\\((.*?)\\)(/(.*))?$\")\ndef SourceTreeAndPathFromPath(input_path):\n    \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "_escaped",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_escaped = re.compile('[\\\\\\\\\"]|[\\x00-\\x1f]')\n# Used by SourceTreeAndPathFromPath\n_path_leading_variable = re.compile(r\"^\\$\\((.*?)\\)(/(.*))?$\")\ndef SourceTreeAndPathFromPath(input_path):\n    \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "_path_leading_variable",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "_path_leading_variable = re.compile(r\"^\\$\\((.*?)\\)(/(.*))?$\")\ndef SourceTreeAndPathFromPath(input_path):\n    \"\"\"Given input_path, returns a tuple with sourceTree and path values.\n  Examples:\n    input_path     (source_tree, output_path)\n    '$(VAR)/path'  ('VAR', 'path')\n    '$(VAR)'       ('VAR', None)\n    'path'         (None, 'path')\n  \"\"\"\n    source_group_match = _path_leading_variable.match(input_path)",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "PBXTargetDependency._schema[\"target\"][1]",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "peekOfCode": "PBXTargetDependency._schema[\"target\"][1] = XCTarget\nclass PBXNativeTarget(XCTarget):\n    # buildPhases is overridden in the schema to be able to set defaults.\n    #\n    # NOTE: Contrary to most objects, it is advisable to set parent when\n    # constructing PBXNativeTarget.  A parent of an XCTarget must be a PBXProject\n    # object.  A parent reference is required for a PBXNativeTarget during\n    # construction to be able to set up the target defaults for productReference,\n    # because a PBXBuildFile object must be created for the target and it must\n    # be added to the PBXProject's mainGroup hierarchy.",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xcodeproj_file",
        "documentation": {}
    },
    {
        "label": "XmlFix",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "description": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "peekOfCode": "class XmlFix:\n    \"\"\"Object to manage temporary patching of xml.dom.minidom.\"\"\"\n    def __init__(self):\n        # Preserve current xml.dom.minidom functions.\n        self.write_data = xml.dom.minidom._write_data\n        self.writexml = xml.dom.minidom.Element.writexml\n        # Inject replacement versions of a function and a method.\n        xml.dom.minidom._write_data = _Replacement_write_data\n        xml.dom.minidom.Element.writexml = _Replacement_writexml\n    def Cleanup(self):",
        "detail": "dashboard.node_modules.node-gyp.gyp.pylib.gyp.xml_fix",
        "documentation": {}
    },
    {
        "label": "ParseTarget",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def ParseTarget(target):\n    target, _, suffix = target.partition(\"#\")\n    filename, _, target = target.partition(\":\")\n    return filename, target, suffix\ndef LoadEdges(filename, targets):\n    \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n    file = open(\"dump.json\")\n    edges = json.load(file)\n    file.close()",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {}
    },
    {
        "label": "LoadEdges",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def LoadEdges(filename, targets):\n    \"\"\"Load the edges map from the dump file, and filter it to only\n  show targets in |targets| and their depedendents.\"\"\"\n    file = open(\"dump.json\")\n    edges = json.load(file)\n    file.close()\n    # Copy out only the edges we're interested in from the full edge list.\n    target_edges = {}\n    to_visit = targets[:]\n    while to_visit:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {}
    },
    {
        "label": "WriteGraph",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def WriteGraph(edges):\n    \"\"\"Print a graphviz graph to stdout.\n  |edges| is a map of target to a list of other targets it depends on.\"\"\"\n    # Bucket targets by file.\n    files = collections.defaultdict(list)\n    for src, dst in edges.items():\n        build_file, target_name, toolset = ParseTarget(src)\n        files[build_file].append(src)\n    print(\"digraph D {\")\n    print(\"  fontsize=8\")  # Used by subgraphs.",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "peekOfCode": "def main():\n    if len(sys.argv) < 2:\n        print(__doc__, file=sys.stderr)\n        print(file=sys.stderr)\n        print(\"usage: %s target1 target2...\" % (sys.argv[0]), file=sys.stderr)\n        return 1\n    edges = LoadEdges(\"dump.json\", sys.argv[1:])\n    WriteGraph(edges)\n    return 0\nif __name__ == \"__main__\":",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.graphviz",
        "documentation": {}
    },
    {
        "label": "comment_replace",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def comment_replace(matchobj):\n    return matchobj.group(1) + matchobj.group(2) + \"#\" * len(matchobj.group(3))\ndef mask_comments(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)(#)(.*)\")\n    return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n    return \"{}{}{}{}\".format(\n        matchobj.group(1),\n        matchobj.group(2),",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "mask_comments",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def mask_comments(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)(#)(.*)\")\n    return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n    return \"{}{}{}{}\".format(\n        matchobj.group(1),\n        matchobj.group(2),\n        \"x\" * len(matchobj.group(3)),\n        matchobj.group(2),",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "quote_replace",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def quote_replace(matchobj):\n    return \"{}{}{}{}\".format(\n        matchobj.group(1),\n        matchobj.group(2),\n        \"x\" * len(matchobj.group(3)),\n        matchobj.group(2),\n    )\ndef mask_quotes(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)\" + QUOTE_RE_STR)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "mask_quotes",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def mask_quotes(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)\" + QUOTE_RE_STR)\n    return [search_re.sub(quote_replace, line) for line in input]\ndef do_split(input, masked_input, search_re):\n    output = []\n    mask_output = []\n    for (line, masked_line) in zip(input, masked_input):\n        m = search_re.match(masked_line)\n        while m:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "do_split",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def do_split(input, masked_input, search_re):\n    output = []\n    mask_output = []\n    for (line, masked_line) in zip(input, masked_input):\n        m = search_re.match(masked_line)\n        while m:\n            split = len(m.group(1))\n            line = line[:split] + r\"\\n\" + line[split:]\n            masked_line = masked_line[:split] + r\"\\n\" + masked_line[split:]\n            m = search_re.match(masked_line)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "split_double_braces",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def split_double_braces(input):\n    \"\"\"Masks out the quotes and comments, and then splits appropriate\n  lines (lines that matche the double_*_brace re's above) before\n  indenting them below.\n  These are used to split lines which have multiple braces on them, so\n  that the indentation looks prettier when all laid out (e.g. closing\n  braces make a nice diagonal line).\n  \"\"\"\n    double_open_brace_re = re.compile(r\"(.*?[\\[\\{\\(,])(\\s*)([\\[\\{\\(])\")\n    double_close_brace_re = re.compile(r\"(.*?[\\]\\}\\)],?)(\\s*)([\\]\\}\\)])\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "count_braces",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def count_braces(line):\n    \"\"\"keeps track of the number of braces on a given line and returns the result.\n  It starts at zero and subtracts for closed braces, and adds for open braces.\n  \"\"\"\n    open_braces = [\"[\", \"(\", \"{\"]\n    close_braces = [\"]\", \")\", \"}\"]\n    closing_prefix_re = re.compile(r\"(.*?[^\\s\\]\\}\\)]+.*?)([\\]\\}\\)],?)\\s*$\")\n    cnt = 0\n    stripline = COMMENT_RE.sub(r\"\", line)\n    stripline = QUOTE_RE.sub(r\"''\", stripline)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "prettyprint_input",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def prettyprint_input(lines):\n    \"\"\"Does the main work of indenting the input based on the brace counts.\"\"\"\n    indent = 0\n    basic_offset = 2\n    for line in lines:\n        if COMMENT_RE.match(line):\n            print(line)\n        else:\n            line = line.strip(\"\\r\\n\\t \")  # Otherwise doesn't strip \\r on Unix.\n            if len(line) > 0:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "def main():\n    if len(sys.argv) > 1:\n        data = open(sys.argv[1]).read().splitlines()\n    else:\n        data = sys.stdin.read().splitlines()\n    # Split up the double braces.\n    lines = split_double_braces(data)\n    # Indent and print the output.\n    prettyprint_input(lines)\n    return 0",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "COMMENT_RE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "COMMENT_RE = re.compile(r\"\\s*#.*\")\n# Regex to remove quoted strings when we're counting braces.\n# It takes into account quoted quotes, and makes sure that the quotes match.\n# NOTE: It does not handle quotes that span more than one line, or\n# cases where an escaped quote is preceded by an escaped backslash.\nQUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n    return matchobj.group(1) + matchobj.group(2) + \"#\" * len(matchobj.group(3))\ndef mask_comments(input):",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "QUOTE_RE_STR",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "QUOTE_RE_STR = r'(?P<q>[\\'\"])(.*?)(?<![^\\\\][\\\\])(?P=q)'\nQUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n    return matchobj.group(1) + matchobj.group(2) + \"#\" * len(matchobj.group(3))\ndef mask_comments(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)(#)(.*)\")\n    return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n    return \"{}{}{}{}\".format(",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "QUOTE_RE",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "peekOfCode": "QUOTE_RE = re.compile(QUOTE_RE_STR)\ndef comment_replace(matchobj):\n    return matchobj.group(1) + matchobj.group(2) + \"#\" * len(matchobj.group(3))\ndef mask_comments(input):\n    \"\"\"Mask the quoted strings so we skip braces inside quoted strings.\"\"\"\n    search_re = re.compile(r\"(.*?)(#)(.*)\")\n    return [search_re.sub(comment_replace, line) for line in input]\ndef quote_replace(matchobj):\n    return \"{}{}{}{}\".format(\n        matchobj.group(1),",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_gyp",
        "documentation": {}
    },
    {
        "label": "BuildProject",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def BuildProject(project, built, projects, deps):\n    # if all dependencies are done, we can build it, otherwise we try to build the\n    # dependency.\n    # This is not infinite-recursion proof.\n    for dep in deps[project]:\n        if dep not in built:\n            BuildProject(dep, built, projects, deps)\n    print(project)\n    built.append(project)\ndef ParseSolution(solution_file):",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "ParseSolution",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def ParseSolution(solution_file):\n    # All projects, their clsid and paths.\n    projects = dict()\n    # A list of dependencies associated with a project.\n    dependencies = dict()\n    # Regular expressions that matches the SLN format.\n    # The first line of a project definition.\n    begin_project = re.compile(\n        r'^Project\\(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942'\n        r'}\"\\) = \"(.*)\", \"(.*)\", \"(.*)\"$'",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "PrintDependencies",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintDependencies(projects, deps):\n    print(\"---------------------------------------\")\n    print(\"Dependencies for all projects\")\n    print(\"---------------------------------------\")\n    print(\"--                                   --\")\n    for (project, dep_list) in sorted(deps.items()):\n        print(\"Project : %s\" % project)\n        print(\"Path : %s\" % projects[project][0])\n        if dep_list:\n            for dep in dep_list:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "PrintBuildOrder",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintBuildOrder(projects, deps):\n    print(\"---------------------------------------\")\n    print(\"Build order                            \")\n    print(\"---------------------------------------\")\n    print(\"--                                   --\")\n    built = []\n    for (project, _) in sorted(deps.items()):\n        if project not in built:\n            BuildProject(project, built, projects, deps)\n    print(\"--                                   --\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "PrintVCProj",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def PrintVCProj(projects):\n    for project in projects:\n        print(\"-------------------------------------\")\n        print(\"-------------------------------------\")\n        print(project)\n        print(project)\n        print(project)\n        print(\"-------------------------------------\")\n        print(\"-------------------------------------\")\n        project_path = os.path.abspath(",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "def main():\n    # check if we have exactly 1 parameter.\n    if len(sys.argv) < 2:\n        print('Usage: %s \"c:\\\\path\\\\to\\\\project.sln\"' % sys.argv[0])\n        return 1\n    (projects, deps) = ParseSolution(sys.argv[1])\n    PrintDependencies(projects, deps)\n    PrintBuildOrder(projects, deps)\n    if \"--recursive\" in sys.argv:\n        PrintVCProj(projects)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "peekOfCode": "__author__ = \"nsylvain (Nicolas Sylvain)\"\ndef BuildProject(project, built, projects, deps):\n    # if all dependencies are done, we can build it, otherwise we try to build the\n    # dependency.\n    # This is not infinite-recursion proof.\n    for dep in deps[project]:\n        if dep not in built:\n            BuildProject(dep, built, projects, deps)\n    print(project)\n    built.append(project)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_sln",
        "documentation": {}
    },
    {
        "label": "CmpTuple",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "class CmpTuple:\n    \"\"\"Compare function between 2 tuple.\"\"\"\n    def __call__(self, x, y):\n        return cmp(x[0], y[0])\nclass CmpNode:\n    \"\"\"Compare function between 2 xml nodes.\"\"\"\n    def __call__(self, x, y):\n        def get_string(node):\n            node_string = \"node\"\n            node_string += node.nodeName",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "CmpNode",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "class CmpNode:\n    \"\"\"Compare function between 2 xml nodes.\"\"\"\n    def __call__(self, x, y):\n        def get_string(node):\n            node_string = \"node\"\n            node_string += node.nodeName\n            if node.nodeValue:\n                node_string += node.nodeValue\n            if node.attributes:\n                # We first sort by name, if present.",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "cmp",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def cmp(x, y):\n    return (x > y) - (x < y)\nclass CmpTuple:\n    \"\"\"Compare function between 2 tuple.\"\"\"\n    def __call__(self, x, y):\n        return cmp(x[0], y[0])\nclass CmpNode:\n    \"\"\"Compare function between 2 xml nodes.\"\"\"\n    def __call__(self, x, y):\n        def get_string(node):",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "PrettyPrintNode",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def PrettyPrintNode(node, indent=0):\n    if node.nodeType == Node.TEXT_NODE:\n        if node.data.strip():\n            print(\"{}{}\".format(\" \" * indent, node.data.strip()))\n        return\n    if node.childNodes:\n        node.normalize()\n    # Get the number of attributes\n    attr_count = 0\n    if node.attributes:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "FlattenFilter",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def FlattenFilter(node):\n    \"\"\"Returns a list of all the node and sub nodes.\"\"\"\n    node_list = []\n    if node.attributes and node.getAttribute(\"Name\") == \"_excluded_files\":\n        # We don't add the \"_excluded_files\" filter.\n        return []\n    for current in node.childNodes:\n        if current.nodeName == \"Filter\":\n            node_list.extend(FlattenFilter(current))\n        else:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "FixFilenames",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def FixFilenames(filenames, current_directory):\n    new_list = []\n    for filename in filenames:\n        if filename:\n            for key in REPLACEMENTS:\n                filename = filename.replace(key, REPLACEMENTS[key])\n            os.chdir(current_directory)\n            filename = filename.strip(\"\\\"' \")\n            if filename.startswith(\"$\"):\n                new_list.append(filename)",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "AbsoluteNode",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def AbsoluteNode(node):\n    \"\"\"Makes all the properties we know about in this node absolute.\"\"\"\n    if node.attributes:\n        for (name, value) in node.attributes.items():\n            if name in [\n                \"InheritedPropertySheets\",\n                \"RelativePath\",\n                \"AdditionalIncludeDirectories\",\n                \"IntermediateDirectory\",\n                \"OutputDirectory\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "CleanupVcproj",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def CleanupVcproj(node):\n    \"\"\"For each sub node, we call recursively this function.\"\"\"\n    for sub_node in node.childNodes:\n        AbsoluteNode(sub_node)\n        CleanupVcproj(sub_node)\n    # Normalize the node, and remove all extraneous whitespaces.\n    for sub_node in node.childNodes:\n        if sub_node.nodeType == Node.TEXT_NODE:\n            sub_node.data = sub_node.data.replace(\"\\r\", \"\")\n            sub_node.data = sub_node.data.replace(\"\\n\", \"\")",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "GetConfiguationNodes",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def GetConfiguationNodes(vcproj):\n    # TODO(nsylvain): Find a better way to navigate the xml.\n    nodes = []\n    for node in vcproj.childNodes:\n        if node.nodeName == \"Configurations\":\n            for sub_node in node.childNodes:\n                if sub_node.nodeName == \"Configuration\":\n                    nodes.append(sub_node)\n    return nodes\ndef GetChildrenVsprops(filename):",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "GetChildrenVsprops",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def GetChildrenVsprops(filename):\n    dom = parse(filename)\n    if dom.documentElement.attributes:\n        vsprops = dom.documentElement.getAttribute(\"InheritedPropertySheets\")\n        return FixFilenames(vsprops.split(\";\"), os.path.dirname(filename))\n    return []\ndef SeekToNode(node1, child2):\n    # A text node does not have properties.\n    if child2.nodeType == Node.TEXT_NODE:\n        return None",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "SeekToNode",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def SeekToNode(node1, child2):\n    # A text node does not have properties.\n    if child2.nodeType == Node.TEXT_NODE:\n        return None\n    # Get the name of the current node.\n    current_name = child2.getAttribute(\"Name\")\n    if not current_name:\n        # There is no name. We don't know how to merge.\n        return None\n    # Look through all the nodes to find a match.",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "MergeAttributes",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def MergeAttributes(node1, node2):\n    # No attributes to merge?\n    if not node2.attributes:\n        return\n    for (name, value2) in node2.attributes.items():\n        # Don't merge the 'Name' attribute.\n        if name == \"Name\":\n            continue\n        value1 = node1.getAttribute(name)\n        if value1:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "MergeProperties",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def MergeProperties(node1, node2):\n    MergeAttributes(node1, node2)\n    for child2 in node2.childNodes:\n        child1 = SeekToNode(node1, child2)\n        if child1:\n            MergeProperties(child1, child2)\n        else:\n            node1.appendChild(child2.cloneNode(True))\ndef main(argv):\n    \"\"\"Main function of this vcproj prettifier.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "def main(argv):\n    \"\"\"Main function of this vcproj prettifier.\"\"\"\n    global ARGUMENTS\n    ARGUMENTS = argv\n    # check if we have exactly 1 parameter.\n    if len(argv) < 2:\n        print(\n            'Usage: %s \"c:\\\\path\\\\to\\\\vcproj.vcproj\" [key1=value1] '\n            \"[key2=value2]\" % argv[0]\n        )",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "__author__ = \"nsylvain (Nicolas Sylvain)\"\nARGUMENTS = None\nREPLACEMENTS = dict()\ndef cmp(x, y):\n    return (x > y) - (x < y)\nclass CmpTuple:\n    \"\"\"Compare function between 2 tuple.\"\"\"\n    def __call__(self, x, y):\n        return cmp(x[0], y[0])\nclass CmpNode:",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "ARGUMENTS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "ARGUMENTS = None\nREPLACEMENTS = dict()\ndef cmp(x, y):\n    return (x > y) - (x < y)\nclass CmpTuple:\n    \"\"\"Compare function between 2 tuple.\"\"\"\n    def __call__(self, x, y):\n        return cmp(x[0], y[0])\nclass CmpNode:\n    \"\"\"Compare function between 2 xml nodes.\"\"\"",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "REPLACEMENTS",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "description": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "peekOfCode": "REPLACEMENTS = dict()\ndef cmp(x, y):\n    return (x > y) - (x < y)\nclass CmpTuple:\n    \"\"\"Compare function between 2 tuple.\"\"\"\n    def __call__(self, x, y):\n        return cmp(x[0], y[0])\nclass CmpNode:\n    \"\"\"Compare function between 2 xml nodes.\"\"\"\n    def __call__(self, x, y):",
        "detail": "dashboard.node_modules.node-gyp.gyp.tools.pretty_vcproj",
        "documentation": {}
    },
    {
        "label": "IsCygwin",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "description": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "peekOfCode": "def IsCygwin():\n    # Function copied from pylib/gyp/common.py\n    try:\n        out = subprocess.Popen(\n            \"uname\", stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n        stdout, _ = out.communicate()\n        return \"CYGWIN\" in stdout.decode(\"utf-8\")\n    except Exception:\n        return False",
        "detail": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "documentation": {}
    },
    {
        "label": "UnixifyPath",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "description": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "peekOfCode": "def UnixifyPath(path):\n    try:\n        if not IsCygwin():\n            return path\n        out = subprocess.Popen(\n            [\"cygpath\", \"-u\", path], stdout=subprocess.PIPE, stderr=subprocess.STDOUT\n        )\n        stdout, _ = out.communicate()\n        return stdout.decode(\"utf-8\")\n    except Exception:",
        "detail": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "description": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "peekOfCode": "path = UnixifyPath(sys.argv[0])\nsys.path.insert(0, os.path.join(os.path.dirname(path), \"pylib\"))\nimport gyp  # noqa: E402\nif __name__ == \"__main__\":\n    sys.exit(gyp.script_main())",
        "detail": "dashboard.node_modules.node-gyp.gyp.gyp_main",
        "documentation": {}
    },
    {
        "label": "here",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.gyp.setup",
        "description": "dashboard.node_modules.node-gyp.gyp.setup",
        "peekOfCode": "here = path.abspath(path.dirname(__file__))\n# Get the long description from the README file\nwith open(path.join(here, \"README.md\")) as in_file:\n    long_description = in_file.read()\nsetup(\n    name=\"gyp-next\",\n    version=\"0.10.0\",\n    description=\"A fork of the GYP build system for use in the Node.js projects\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.setup",
        "documentation": {}
    },
    {
        "label": "Runner",
        "kind": 6,
        "importPath": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "peekOfCode": "class Runner:\n    def __init__(self, formats, tests, gyp_options, verbose):\n        self.formats = formats\n        self.tests = tests\n        self.verbose = verbose\n        self.gyp_options = gyp_options\n        self.failures = []\n        self.num_tests = len(formats) * len(tests)\n        num_digits = len(str(self.num_tests))\n        self.fmt_str = \"[%%%dd/%%%dd] (%%s) %%s\" % (num_digits, num_digits)",
        "detail": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "documentation": {}
    },
    {
        "label": "is_test_name",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "peekOfCode": "def is_test_name(f):\n    return f.startswith(\"gyptest\") and f.endswith(\".py\")\ndef find_all_gyptest_files(directory):\n    result = []\n    for root, dirs, files in os.walk(directory):\n        result.extend([os.path.join(root, f) for f in files if is_test_name(f)])\n    result.sort()\n    return result\ndef main(argv=None):\n    if argv is None:",
        "detail": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "documentation": {}
    },
    {
        "label": "find_all_gyptest_files",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "peekOfCode": "def find_all_gyptest_files(directory):\n    result = []\n    for root, dirs, files in os.walk(directory):\n        result.extend([os.path.join(root, f) for f in files if is_test_name(f)])\n    result.sort()\n    return result\ndef main(argv=None):\n    if argv is None:\n        argv = sys.argv\n    parser = argparse.ArgumentParser()",
        "detail": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "peekOfCode": "def main(argv=None):\n    if argv is None:\n        argv = sys.argv\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-a\", \"--all\", action=\"store_true\", help=\"run all tests\")\n    parser.add_argument(\"-C\", \"--chdir\", action=\"store\", help=\"change to directory\")\n    parser.add_argument(\n        \"-f\",\n        \"--format\",\n        action=\"store\",",
        "detail": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "documentation": {}
    },
    {
        "label": "print_configuration_info",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "description": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "peekOfCode": "def print_configuration_info():\n    print(\"Test configuration:\")\n    if sys.platform == \"darwin\":\n        sys.path.append(os.path.abspath(\"test/lib\"))\n        import TestMac\n        print(f\"  Mac {platform.mac_ver()[0]} {platform.mac_ver()[2]}\")\n        print(f\"  Xcode {TestMac.Xcode.Version()}\")\n    elif sys.platform == \"win32\":\n        sys.path.append(os.path.abspath(\"pylib\"))\n        import gyp.MSVSVersion",
        "detail": "dashboard.node_modules.node-gyp.gyp.test_gyp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "dashboard.node_modules.node-gyp.test.fixtures.test-charmap",
        "description": "dashboard.node_modules.node-gyp.test.fixtures.test-charmap",
        "peekOfCode": "def main():\n    encoding = locale.getdefaultlocale()[1]\n    if not encoding:\n        return False\n    try:\n        sys.setdefaultencoding(encoding)\n    except AttributeError:  # Python 3\n        pass\n    textmap = {\n        \"cp936\": \"\\u4e2d\\u6587\",",
        "detail": "dashboard.node_modules.node-gyp.test.fixtures.test-charmap",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "BASE_URL = \"https://github.com/nodejs/gyp-next/archive/\"\nCHECKOUT_PATH = os.path.dirname(os.path.realpath(__file__))\nCHECKOUT_GYP_PATH = os.path.join(CHECKOUT_PATH, \"gyp\")\nparser = argparse.ArgumentParser()\nparser.add_argument(\"tag\", help=\"gyp tag to update to\")\nargs = parser.parse_args()\ntar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "CHECKOUT_PATH",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "CHECKOUT_PATH = os.path.dirname(os.path.realpath(__file__))\nCHECKOUT_GYP_PATH = os.path.join(CHECKOUT_PATH, \"gyp\")\nparser = argparse.ArgumentParser()\nparser.add_argument(\"tag\", help=\"gyp tag to update to\")\nargs = parser.parse_args()\ntar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "CHECKOUT_GYP_PATH",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "CHECKOUT_GYP_PATH = os.path.join(CHECKOUT_PATH, \"gyp\")\nparser = argparse.ArgumentParser()\nparser.add_argument(\"tag\", help=\"gyp tag to update to\")\nargs = parser.parse_args()\ntar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:\n    tar_file = os.path.join(tmp_dir, \"gyp.tar.gz\")",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "parser = argparse.ArgumentParser()\nparser.add_argument(\"tag\", help=\"gyp tag to update to\")\nargs = parser.parse_args()\ntar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:\n    tar_file = os.path.join(tmp_dir, \"gyp.tar.gz\")\n    unzip_target = os.path.join(tmp_dir, \"gyp\")",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "args = parser.parse_args()\ntar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:\n    tar_file = os.path.join(tmp_dir, \"gyp.tar.gz\")\n    unzip_target = os.path.join(tmp_dir, \"gyp\")\n    with open(tar_file, \"wb\") as f:\n        print(\"Downloading gyp-next@\" + args.tag + \" into temporary directory...\")",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "tar_url",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "tar_url = BASE_URL + args.tag + \".tar.gz\"\nchanged_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:\n    tar_file = os.path.join(tmp_dir, \"gyp.tar.gz\")\n    unzip_target = os.path.join(tmp_dir, \"gyp\")\n    with open(tar_file, \"wb\") as f:\n        print(\"Downloading gyp-next@\" + args.tag + \" into temporary directory...\")\n        print(\"From: \" + tar_url)",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "changed_files",
        "kind": 5,
        "importPath": "dashboard.node_modules.node-gyp.update-gyp",
        "description": "dashboard.node_modules.node-gyp.update-gyp",
        "peekOfCode": "changed_files = subprocess.check_output([\"git\", \"diff\", \"--name-only\"]).strip()\nif changed_files:\n    raise Exception(\"Can't update gyp while you have uncommitted changes in node-gyp\")\nwith tempfile.TemporaryDirectory() as tmp_dir:\n    tar_file = os.path.join(tmp_dir, \"gyp.tar.gz\")\n    unzip_target = os.path.join(tmp_dir, \"gyp\")\n    with open(tar_file, \"wb\") as f:\n        print(\"Downloading gyp-next@\" + args.tag + \" into temporary directory...\")\n        print(\"From: \" + tar_url)\n        with urllib.request.urlopen(tar_url) as in_file:",
        "detail": "dashboard.node_modules.node-gyp.update-gyp",
        "documentation": {}
    },
    {
        "label": "MappedValue",
        "kind": 6,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "class MappedValue(object):\n    def __init__(self, parts):\n        self.flags = 0\n        self.rule = parts[0]\n        # If there are two parts, the second part is the mapping in question.\n        if len(parts) > 1 and parts[1]:\n            self.chars = ''.join(map(lambda u: unichr(int(u, 16)),\n                parts[1].split(' ')))\n        else:\n            self.chars = ''",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "download_unicode",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def download_unicode(version):\n    idna_tables = \"http://www.unicode.org/Public/idna/\" + version\n    infd = urllib2.urlopen(idna_tables + \"/IdnaTest.txt\")\n    #with open(\"test/test-idna2.js\", \"w\") as outfd:\n    #    build_test_code(infd, outfd)\n    with open(\"test/IdnaTest.txt\", \"w\") as outfd:\n        for line in infd:\n            outfd.write(line)\n    infd.close()\n    infd = urllib2.urlopen(idna_tables + \"/IdnaMappingTable.txt\")",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "parse_unicode_data_file",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def parse_unicode_data_file(fd):\n    '''Yield a generator of (start, end, fields) for the given Unicode data\n    file. These files are of the same basic format: a semicolon-delimited set\n    of columns, where the first column is either a single element or a range of\n    characters. In this case, the range implied by start and end are\n    inclusive.'''\n    for line in fd:\n        pos = line.find('#')\n        if pos >= 0: line = line[:pos]\n        line = line.strip()",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "utf16len",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def utf16len(string):\n    return sum(2 if ord(c) > 0xffff else 1 for c in string)\nclass MappedValue(object):\n    def __init__(self, parts):\n        self.flags = 0\n        self.rule = parts[0]\n        # If there are two parts, the second part is the mapping in question.\n        if len(parts) > 1 and parts[1]:\n            self.chars = ''.join(map(lambda u: unichr(int(u, 16)),\n                parts[1].split(' ')))",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "build_unicode_map",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def build_unicode_map(idnaMapTable, out, derivedGeneralCategory):\n    unicharMap = [0] * NUM_UCHAR\n    vals = []\n    for start, end, parts in parse_unicode_data_file(idnaMapTable):\n        for ch in range(start, end + 1):\n            value = MappedValue(parts)\n            vals.append(value)\n            unicharMap[ch] = value\n    # Note which characters have the combining mark property.\n    for start, end, parts in parse_unicode_data_file(derivedGeneralCategory):",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "find_block_sizes",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def find_block_sizes(unicharMap):\n    for lg_block_size in range(1, 15):\n        block_size = 1 << lg_block_size\n        memUsage, blocks = compute_block_size(unicharMap, block_size)\n        yield memUsage, lg_block_size, blocks\ndef compute_block_size(unicharMap, block_size):\n    blocks = set()\n    for i in range(0, len(unicharMap), block_size):\n        block = tuple(unicharMap[i:i + block_size])\n        blocks.add(block)",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "compute_block_size",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def compute_block_size(unicharMap, block_size):\n    blocks = set()\n    for i in range(0, len(unicharMap), block_size):\n        block = tuple(unicharMap[i:i + block_size])\n        blocks.add(block)\n    num = len(blocks)\n    if num < 256:\n        mem = len(unicharMap) / block_size\n    elif num < 0x10000:\n        mem = 2 * len(unicharMap) / block_size",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "convert_escape",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def convert_escape(string):\n    return string\n# These functions build the test IDNA vectors.\ndef build_body(mode, test_vector, func, expected):\n    lines = []\n    if expected[0] == '[':\n        if not re.search('[AVP]', expected):\n            return []\n        if mode == 'T' or mode == 'B':\n            lines.append(\"assert.throws(function () { %s(\\\"%s\\\", true); });\" %",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "build_body",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def build_body(mode, test_vector, func, expected):\n    lines = []\n    if expected[0] == '[':\n        if not re.search('[AVP]', expected):\n            return []\n        if mode == 'T' or mode == 'B':\n            lines.append(\"assert.throws(function () { %s(\\\"%s\\\", true); });\" %\n                (func, test_vector))\n        if mode == 'N' or mode == 'B':\n            lines.append(\"assert.throws(function () { %s(\\\"%s\\\", false); });\" %",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "build_test_code",
        "kind": 2,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "def build_test_code(infd, out):\n    out.write(\"/* This file is generated from the Unicode IDNA table, using\\n\")\n    out.write(\"   the build-unicode-tables.py script. Please edit that\\n\")\n    out.write(\"   script instead of this file. */\\n\\n\")\n    out.write(\"var assert = require(\\\"assert\\\");\\n\")\n    out.write(\"var uts46 = require(\\\"../utr46-gold\\\");\\n\\n\")\n    out.write(\"\"\"\nfunction toAscii(input, transitional) {\n  return uts46.toAscii(input, true, transitional, true);\n}",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    },
    {
        "label": "NUM_UCHAR",
        "kind": 5,
        "importPath": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "description": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "peekOfCode": "NUM_UCHAR = 0x10ffff + 1\ndef download_unicode(version):\n    idna_tables = \"http://www.unicode.org/Public/idna/\" + version\n    infd = urllib2.urlopen(idna_tables + \"/IdnaTest.txt\")\n    #with open(\"test/test-idna2.js\", \"w\") as outfd:\n    #    build_test_code(infd, outfd)\n    with open(\"test/IdnaTest.txt\", \"w\") as outfd:\n        for line in infd:\n            outfd.write(line)\n    infd.close()",
        "detail": "font-end.node_modules.idna-uts46-hx.build-unicode-tables",
        "documentation": {}
    }
]